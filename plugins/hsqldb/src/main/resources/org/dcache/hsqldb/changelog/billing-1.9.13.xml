<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">
    <preConditions>
        <dbms type="hsqldb"/>
    </preConditions>
    <changeSet id="1.0.0" author="arossi" context="billing">
        <sql>
            CREATE TABLE "billinginfo"
            (
            "client"         varchar(256),
            "initiator"      varchar(256),
            "isnew"          boolean,
            "protocol"       varchar(256),
            "transfersize"   bigint,
            "fullsize"       bigint,
            "storageclass"   varchar(256),
            "connectiontime" bigint,
            "action"         varchar(256),
            "cellname"       varchar(256),
            "datestamp"      timestamp with time zone,
            "errorcode"      integer,
            "errormessage"   varchar(8000),
            "pnfsid"         varchar(36),
            "transaction"    varchar(256),
            "p2p"            boolean
            );

            CREATE TABLE "storageinfo"
            (
            "queuedtime"     bigint,
            "fullsize"       bigint,
            "storageclass"   varchar(256),
            "connectiontime" bigint,
            "action"         varchar(256),
            "cellname"       varchar(256),
            "datestamp"      timestamp with time zone,
            "errorcode"      integer,
            "errormessage"   varchar(256),
            "pnfsid"         varchar(36),
            "transaction"    varchar(8000)
            );

            CREATE TABLE "doorinfo"
            (
            "client"         varchar(256),
            "mappedgid"      integer,
            "mappeduid"      integer,
            "owner"          varchar(256),
            "path"           varchar(256),
            "queuedtime"     bigint,
            "connectiontime" bigint,
            "action"         varchar(256),
            "cellname"       varchar(256),
            "datestamp"      timestamp with time zone,
            "errorcode"      integer,
            "errormessage"   varchar(256),
            "pnfsid"         varchar(36),
            "transaction"    varchar(8000)
            );

            CREATE TABLE "hitinfo"
            (
            "filecached"   boolean,
            "action"       varchar(256),
            "cellname"     varchar(256),
            "datestamp"    timestamp with time zone,
            "errorcode"    integer,
            "errormessage" varchar(8000),
            "pnfsid"       varchar(36),
            "transaction"  varchar(256)
            );

            CREATE TABLE "billinginfo_rd_daily"
            (
            "date"         timestamp with time zone,
            "count"        bigint,
            "size"         bigint,
            "transferred"  bigint
            );

            CREATE TABLE "billinginfo_wr_daily"
            (
            "date"         timestamp with time zone,
            "count"        bigint,
            "size"         bigint,
            "transferred"  bigint
            );

            CREATE TABLE "billinginfo_p2p_daily"
            (
            "date"         timestamp with time zone,
            "count"        bigint,
            "size"         bigint,
            "transferred"  bigint
            );

            CREATE TABLE "billinginfo_tm_daily"
            (
            "date"         timestamp with time zone,
            "count"        bigint,
            "minimum"      bigint,
            "maximum"      bigint,
            "average"      bigint
            );

            CREATE TABLE "storageinfo_rd_daily"
            (
            "date"         timestamp with time zone,
            "count"        bigint,
            "size"         bigint
            );

            CREATE TABLE "storageinfo_wr_daily"
            (
            "date"         timestamp with time zone,
            "count"        bigint,
            "size"         bigint
            );

            CREATE TABLE "hitinfo_daily"
            (
            "date"         timestamp with time zone,
            "count"        bigint,
            "notcached"    bigint,
            "cached"       bigint
            );

            CREATE INDEX "billinginfo_date_idx"
                ON "billinginfo" ("datestamp");
            CREATE INDEX "billinginfo_isnew_idx"
                ON "billinginfo" ("isnew");
            CREATE INDEX "billinginfo_client_idx"
                ON "billinginfo" ("client");
            CREATE INDEX "billinginfo_initiator_idx"
                ON "billinginfo" ("initiator");
            CREATE INDEX "billinginfo_pnfsid_idx"
                ON "billinginfo" ("pnfsid");
            CREATE INDEX "billinginfo_storageclass_idx"
                ON "billinginfo" ("storageclass");
            CREATE INDEX "billinginfo_transaction_idx"
                ON "billinginfo" ("transaction");
            CREATE INDEX "storageinfo_date_idx"
                ON "storageinfo" ("datestamp");
            CREATE INDEX "storageinfo_action_idx"
                ON "storageinfo" ("action");
            CREATE INDEX "storageinfo_pnfsid_idx"
                ON "storageinfo" ("pnfsid");
            CREATE INDEX "storageinfo_storageclass_idx"
                ON "storageinfo" ("storageclass");
            CREATE INDEX "storageinfo_transaction_idx"
                ON "storageinfo" ("transaction");
            CREATE INDEX "doorinfo_date_idx"
                ON "doorinfo" ("datestamp");
            CREATE INDEX "doorinfo_owner_idx"
                ON "doorinfo" ("owner");
            CREATE INDEX "doorinfo_pnfsid_idx"
                ON "doorinfo" ("pnfsid");
            CREATE INDEX "doorinfo_transaction_idx"
                ON "doorinfo" ("transaction");
            CREATE INDEX "hitinfo_date_idx"
                ON "hitinfo" ("datestamp");
            CREATE INDEX "hitinfo_pnfsid_idx"
                ON "hitinfo" ("pnfsid");
            CREATE INDEX "hitinfo_transaction_idx"
                ON "hitinfo" ("transaction");
            CREATE INDEX "billinginfo_rd_daily_date_idx"
                ON "billinginfo_rd_daily" ("date");
            CREATE INDEX "billinginfo_wr_daily_date_idx"
                ON "billinginfo_wr_daily" ("date");
            CREATE INDEX "billinginfo_p2p_daily_date_idx"
                ON "billinginfo_p2p_daily" ("date");
            CREATE INDEX "billinginfo_tm_daily_date_idx"
                ON "billinginfo_tm_daily" ("date");
            CREATE INDEX "storageinfo_rd_daily_date_idx"
                ON "storageinfo_rd_daily" ("date");
            CREATE INDEX "storageinfo_wr_daily_date_idx"
                ON "storageinfo_wr_daily" ("date");
            CREATE INDEX "hitinfo_daily_date_idx"
                ON "hitinfo_daily" ("date");
        </sql>
    </changeSet>
    <changeSet id="4.1.0" author="arossi" context="billing">
        <comment>triggers to populate daily tables</comment>
        <sql splitStatements="false">
            CREATE TRIGGER "tgr_update_billinginfo_rd_daily"
                AFTER INSERT ON "billinginfo"
                REFERENCING NEW ROW AS new
                FOR EACH ROW
                BEGIN ATOMIC
                    DECLARE curr_date timestamp with time zone;
                    DECLARE max_date timestamp with time zone;
                    SET curr_date = CURRENT_DATE;
                    SET max_date = SELECT max("date") FROM "billinginfo_rd_daily";
                    IF max_date IS NULL THEN
                        INSERT INTO
                            "billinginfo_rd_daily" ("date","count","size","transferred")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0),
                               coalesce(sum("transfersize"),0)
                        FROM "billinginfo"
                        WHERE "datestamp" &gt; DATE_SUB(curr_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "isnew" = false
                            AND "errorcode" = 0
                            AND "p2p" != true
                            GROUP BY "d";
                    ELSEIF DATEDIFF('day', curr_date, max_date) > 1 THEN
                        INSERT INTO
                            "billinginfo_rd_daily" ("date","count","size","transferred")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0),
                               coalesce(sum("transfersize"),0)
                        FROM "billinginfo"
                        WHERE "datestamp" &gt; DATE_ADD(max_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "isnew" = false
                            AND "errorcode" = 0
                            AND "p2p" != true
                            GROUP BY "d";
                    END IF;
                END

            CREATE TRIGGER "tgr_update_billinginfo_wr_daily"
                AFTER INSERT ON "billinginfo"
                REFERENCING NEW ROW AS new
                FOR EACH ROW
                BEGIN ATOMIC
                    DECLARE curr_date timestamp with time zone;
                    DECLARE max_date timestamp with time zone;
                    SET curr_date = CURRENT_DATE;
                    SET max_date = SELECT max("date") FROM "billinginfo_wr_daily";
                    IF max_date IS NULL THEN
                        INSERT INTO
                            "billinginfo_wr_daily" ("date","count","size","transferred")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0),
                               coalesce(sum("transfersize"),0)
                        FROM "billinginfo"
                        WHERE "datestamp" &gt; DATE_SUB(curr_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "isnew" = true
                            AND "errorcode" = 0
                            AND "p2p" != true
                            GROUP BY "d";
                    ELSEIF DATEDIFF('day', curr_date, max_date) > 1 THEN
                        INSERT INTO
                            "billinginfo_wr_daily" ("date","count","size","transferred")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0),
                               coalesce(sum("transfersize"),0)
                        FROM "billinginfo"
                        WHERE "datestamp" &gt; DATE_ADD(max_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "isnew" = true
                            AND "errorcode" = 0
                            AND "p2p" != true
                            GROUP BY "d";
                    END IF;
                END

            CREATE TRIGGER "tgr_update_billinginfo_p2p_daily"
                AFTER INSERT ON "billinginfo"
                REFERENCING NEW ROW AS new
                FOR EACH ROW
                BEGIN ATOMIC
                    DECLARE curr_date timestamp with time zone;
                    DECLARE max_date timestamp with time zone;
                    SET curr_date = CURRENT_DATE;
                    SET max_date = SELECT max("date") FROM "billinginfo_p2p_daily";
                    IF max_date IS NULL THEN
                        INSERT INTO
                            "billinginfo_p2p_daily" ("date","count","size","transferred")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0),
                               coalesce(sum("transfersize"),0)
                        FROM "billinginfo"
                        WHERE "datestamp" &gt; DATE_SUB(curr_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "errorcode" = 0
                            AND "p2p" = true
                            GROUP BY "d";
                    ELSEIF DATEDIFF('day', curr_date, max_date) > 1 THEN
                        INSERT INTO
                            "billinginfo_p2p_daily" ("date","count","size","transferred")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0),
                               coalesce(sum("transfersize"),0)
                        FROM "billinginfo"
                        WHERE "datestamp" &gt; DATE_ADD(max_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "errorcode" = 0
                            AND "p2p" = true
                            GROUP BY "d";
                    END IF;
                END

            CREATE TRIGGER "tgr_update_billinginfo_tm_daily"
                AFTER INSERT ON "billinginfo"
                REFERENCING NEW ROW AS new
                FOR EACH ROW
                BEGIN ATOMIC
                    DECLARE curr_date timestamp with time zone;
                    DECLARE max_date timestamp with time zone;
                    SET curr_date = CURRENT_DATE;
                    SET max_date = SELECT max("date") FROM "billinginfo_tm_daily";
                    IF max_date IS NULL THEN
                        INSERT INTO
                        "billinginfo_tm_daily" ("date","count","minimum","maximum","average")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               min("connectiontime"), max("connectiontime"), avg("connectiontime")
                        FROM "billinginfo"
                        WHERE "datestamp" &gt; DATE_SUB(curr_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "errorcode" = 0
                            GROUP BY "d";
                    ELSEIF DATEDIFF('day', curr_date, max_date) > 1 THEN
                        INSERT INTO
                        "billinginfo_tm_daily" ("date","count","minimum","maximum","average")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               min("connectiontime"), max("connectiontime"), avg("connectiontime")
                        FROM "billinginfo"
                        WHERE "datestamp" &gt; DATE_ADD(max_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "errorcode" = 0
                            GROUP BY "d";
                    END IF;
                END

            CREATE TRIGGER "tgr_update_storageinfo_rd_daily"
                AFTER INSERT ON "storageinfo"
                REFERENCING NEW ROW AS new
                FOR EACH ROW
                BEGIN ATOMIC
                    DECLARE curr_date timestamp with time zone;
                    DECLARE max_date timestamp with time zone;
                    SET curr_date = CURRENT_DATE;
                    SET max_date = SELECT max("date") FROM "storageinfo_rd_daily";
                    IF max_date IS NULL THEN
                        INSERT INTO
                            "storageinfo_rd_daily" ("date","count","size")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0)
                        FROM "storageinfo"
                        WHERE "datestamp" &gt; DATE_SUB(curr_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "action" = 'restore'
                            AND "errorcode" = 0
                            GROUP BY "d";
                    ELSEIF DATEDIFF('day', curr_date, max_date) > 1 THEN
                        INSERT INTO
                            "storageinfo_rd_daily" ("date","count","size")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0)
                        FROM "storageinfo"
                        WHERE "datestamp" &gt; DATE_ADD(max_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "action" = 'restore'
                            AND "errorcode" = 0
                            GROUP BY "d";
                    END IF;
                END

            CREATE TRIGGER "tgr_update_storageinfo_wr_daily"
                AFTER INSERT ON "storageinfo"
                REFERENCING NEW ROW AS new
                FOR EACH ROW
                BEGIN ATOMIC
                    DECLARE curr_date timestamp with time zone;
                    DECLARE max_date timestamp with time zone;
                    SET curr_date = CURRENT_DATE;
                    SET max_date = SELECT max("date") FROM "storageinfo_wr_daily";
                    IF max_date IS NULL THEN
                        INSERT INTO
                            "storageinfo_wr_daily" ("date","count","size")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0)
                        FROM "storageinfo"
                        WHERE "datestamp" &gt; DATE_SUB(curr_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "action" = 'store'
                            AND "errorcode" = 0
                            GROUP BY "d";
                    ELSEIF DATEDIFF('day', curr_date, max_date) > 1 THEN
                        INSERT INTO
                            "storageinfo_wr_daily" ("date","count","size")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               coalesce(sum("fullsize"),0)
                        FROM "storageinfo"
                        WHERE "datestamp" &gt; DATE_ADD(max_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "action" = 'store'
                            AND "errorcode" = 0
                            GROUP BY "d";
                    END IF;
                END

            CREATE TRIGGER "tgr_update_hitinfo_daily"
                AFTER INSERT ON "hitinfo"
                REFERENCING NEW ROW AS new
                FOR EACH ROW
                BEGIN ATOMIC
                    DECLARE curr_date timestamp with time zone;
                    DECLARE max_date timestamp with time zone;
                    SET curr_date = CURRENT_DATE;
                    SET max_date = SELECT max("date") FROM "hitinfo_daily";
                    IF max_date IS NULL THEN
                        INSERT INTO
                            "hitinfo_daily" ("date","count","notcached","cached")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               count(nullif("filecached", true)) as notcached,
                               count(nullif("filecached", false)) as cached
                        FROM "hitinfo"
                        WHERE "datestamp" &gt; DATE_SUB(curr_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "errorcode" = 0
                            GROUP BY "d";
                    ELSEIF DATEDIFF('day', curr_date, max_date) > 1 THEN
                        INSERT INTO
                            "hitinfo_daily" ("date","count","notcached","cached")
                        SELECT TRUNC("datestamp", 'YYYY-MM-DD') as "d",
                               count(*),
                               count(nullif("filecached", true)) as notcached,
                               count(nullif("filecached", false)) as cached
                        FROM "hitinfo"
                        WHERE "datestamp" &gt; DATE_ADD(max_date, INTERVAL 1 DAY)
                            AND "datestamp" &lt; curr_date
                            AND "errorcode" = 0
                            GROUP BY "d";
                    END IF;
                END
        </sql>
    </changeSet>
</databaseChangeLog>