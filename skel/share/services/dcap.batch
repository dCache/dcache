#
#    dCap    D o o r
#

onerror shutdown
check -strong dcap.limits.clients
check -strong dcap.net.port
check -strong dcap.cell.name
check -strong dcap.cell.name.dir
check -strong dcap.cell.export
check dcap.cell.subscribe
check -strong dcap.service.poolmanager
check -strong dcap.service.pnfsmanager
check -strong dcap.service.gplazma
check -strong dcap.service.billing
check -strong dcap.service.pinmanager
check dcap.loginbroker.update-topic
check dcap.loginbroker.tags
check -strong dcap.loginbroker.family
check -strong dcap.loginbroker.version
check -strong dcap.loginbroker.update-period
check -strong dcap.loginbroker.update-period.unit
check -strong dcap.loginbroker.update-threshold
check -strong dcap.authn.protocol
check -strong dcap.authz.truncate
check -strong dcap.authz.readonly
check -strong dcap.authz.anonymous-operations
check -strong dcap.authz.mover-queue-overwrite
check dcap.authn.passwd
check dcap.mover.queue
check dcap.net.listen
check -strong dcache.paths.share

exec file:${dcache.paths.share}/cells/stage.fragment dcap doors

# Starts an embedded dir cell if one does not exist in the domain already
define env startDir.exe enddefine
  onerror shutdown
  create diskCacheV111.pools.DirectoryLookUpPool ${dcap.cell.name.dir} \
     "-pnfsManager=\"${dcap.service.pnfsmanager}\""
enddefine

onerror continue
test -i ${dcap.cell.name.dir}
exec env startDir.exe -ifnotok
onerror shutdown

set env plain-paths-when-anonymous-access-is-NONE "-brokerReadPaths= -brokerWritePaths="
set env plain-paths-when-anonymous-access-is-READONLY "-brokerReadPaths=/ -brokerWritePaths="
set env plain-paths-when-anonymous-access-is-FULL "${paths-when-readonly-is-${dcap.authz.readonly}}"

set env paths-when-readonly-is-true "-brokerReadPaths=/ -brokerWritePaths="
set env paths-when-readonly-is-false "-brokerReadPaths=/ -brokerWritePaths=/"

set env arguments-plain "${plain-paths-when-anonymous-access-is-${dcap.authz.anonymous-operations}} -localOk"
set env arguments-auth "${paths-when-readonly-is-${dcap.authz.readonly}} -pswdfile=${dcap.authn.passwd} -authorization=required"
set env arguments-gsi "${paths-when-readonly-is-${dcap.authz.readonly}} -localOk -authorization=strong -socketfactory=\\\"javatunnel.TunnelServerSocketCreator,javatunnel.GsiTunnel,-service_key='${dcap.authn.hostcert.key}' -service_cert='${dcap.authn.hostcert.cert}' -service_trusted_certs='${dcap.authn.capath}' -service_voms_dir='${dcap.authn.vomsdir}' -ciphers='${dcap.authn.ciphers}'\\\""
set env arguments-kerberos "{paths-when-readonly-is-${dcap.authz.readonly}} -localOk -authorization=strong -socketfactory=javatunnel.TunnelServerSocketCreator,javatunnel.GssTunnel,'${dcap.authn.kerberos.service-principle-name}'"

create dmg.cells.services.login.LoginManager ${dcap.cell.name} \
            "${dcap.net.port} diskCacheV111.doors.DCapDoor \
             -listen=${dcap.net.listen} \
             -export=${dcap.cell.export} \
             -lookupPool=${dcap.cell.name.dir} \
             -subscribe=${dcap.cell.subscribe}Â \
             -acceptErrorWait=60000 \
             -keepAlive=300 \
             -poolRetry=2700 \
             -prot=telnet \
             -keepPrincipal \
             -root=/ \
             -read-only=${dcap.authz.readonly} \
             -truncate=${dcap.authz.truncate} \
             -maxLogin=${dcap.limits.clients} \
             -brokerTopic=${dcap.loginbroker.update-topic} \
             -brokerTags=${dcap.loginbroker.tags} \
             -brokerUpdateTime=${dcap.loginbroker.update-period} \
             -brokerUpdateTimeUnit=${dcap.loginbroker.update-period.unit} \
             -brokerUpdateOffset=${dcap.loginbroker.update-threshold} \
             -protocolFamily=${dcap.loginbroker.family} \
             -protocolVersion=${dcap.loginbroker.version} \
             -loginBroker=${dcap.service.loginbroker}  \
             -pnfsManager=${dcap.service.pnfsmanager} \
             -poolManager=${dcap.service.poolmanager}  \
             -poolProxy=${dcap.service.poolmanager} \
             -pinManager=${dcap.service.pinmanager} \
             -gplazma=\"${dcap.service.gplazma}\" \
             -billing=\"${dcap.service.billing}\" \
             -stageConfigurationFilePath=\"${dcap.authz.staging}\" \
             -io-queue=${dcap.mover.queue} \
             -io-queue-overwrite=${dcap.authz.mover-queue-overwrite} \
             -anonymous-access=${dcap.authz.anonymous-operations} \
             ${arguments-${dcap.authn.protocol}} \
             "
