#
#    dCap    D o o r
#

onerror shutdown
check -strong dcap.limits.clients
check -strong dcap.net.port
check -strong dcap.cell.name
check -strong dcap.cell.name.dir
check dcap.cell.consume
check dcap.cell.subscribe
check -strong dcap.service.poolmanager
check -strong dcap.service.pnfsmanager
check -strong dcap.service.gplazma
check -strong dcap.service.billing
check -strong dcap.service.pinmanager
check dcap.loginbroker.update-topic
check dcap.loginbroker.tags
check -strong dcap.loginbroker.family
check -strong dcap.loginbroker.version
check -strong dcap.loginbroker.update-period
check -strong dcap.loginbroker.update-period.unit
check -strong dcap.loginbroker.update-threshold
check -strong dcap.loginbroker.address
check -strong dcap.loginbroker.port
check -strong dcap.authn.protocol
check dcap.authn.capath
check dcap.authn.hostcert.cert
check dcap.authn.hostcert.key
check dcap.authn.namespace-mode
check dcap.authn.crl-mode
check dcap.authn.ocsp-mode
check dcap.authn.passwd
check dcap.authn.ciphers
check dcap.authn.gsi.delegation.cache.lifetime
check dcap.authn.gsi.delegation.cache.lifetime.unit
check -strong dcap.authz.truncate
check -strong dcap.authz.readonly
check -strong dcap.authz.anonymous-operations
check -strong dcap.authz.mover-queue-overwrite
check dcap.mover.queue
check dcap.net.listen
check -strong dcache.paths.share
check dcap.limits.client-version

exec file:${dcache.paths.share}/cells/stage.fragment dcap doors

# Starts an embedded dir cell if one does not exist in the domain already
define env startDir.exe enddefine
  onerror shutdown
  create diskCacheV111.pools.DirectoryLookUpPool ${dcap.cell.name.dir} \
     "-pnfsManager=\"${dcap.service.pnfsmanager}\""
enddefine

onerror continue
test -i ${dcap.cell.name.dir}
exec env startDir.exe -ifnotok
onerror shutdown

set env plain-paths-when-anonymous-access-is-NONE "-brokerReadPaths= -brokerWritePaths="
set env plain-paths-when-anonymous-access-is-READONLY "-brokerReadPaths=/ -brokerWritePaths="
set env plain-paths-when-anonymous-access-is-FULL "${paths-when-readonly-is-${dcap.authz.readonly}}"

set env paths-when-readonly-is-true "-brokerReadPaths=/ -brokerWritePaths="
set env paths-when-readonly-is-false "-brokerReadPaths=/ -brokerWritePaths=/"

set env arguments-plain    "${plain-paths-when-anonymous-access-is-${dcap.authz.anonymous-operations}} -localOk"
set env arguments-auth     "${paths-when-readonly-is-${dcap.authz.readonly}} -pswdfile=${dcap.authn.passwd} -authorization=required"
set env arguments-gsi      "${paths-when-readonly-is-${dcap.authz.readonly}} -localOk -authorization=strong \
                             -socketfactory=\\\"javatunnel.DssServerSocketCreator org.dcache.dss.ServerGsiEngineDssContextFactory \
                                                -service_key='${dcap.authn.hostcert.key}' \
                                                -service_cert='${dcap.authn.hostcert.cert}' \
                                                -service_trusted_certs='${dcap.authn.capath}' \
                                                -ciphers='${dcap.authn.ciphers}' \
                                                -namespace-mode='${dcap.authn.namespace-mode}' \
                                                -crl-mode='${dcap.authn.crl-mode}' \
                                                -ocsp-mode='${dcap.authn.ocsp-mode}' \
                                                -key-cache-lifetime='${dcap.authn.gsi.delegation.cache.lifetime}' \
                                                -key-cache-lifetime-unit='${dcap.authn.gsi.delegation.cache.lifetime.unit}' \
                                            \\\""
set env arguments-kerberos "${paths-when-readonly-is-${dcap.authz.readonly}} -localOk -authorization=strong \
                             -socketfactory=\\\"javatunnel.DssServerSocketCreator org.dcache.dss.KerberosDssContextFactory \
                                            '${dcap.authn.kerberos.service-principle-name}'\\\""

create dmg.cells.services.login.LoginManager ${dcap.cell.name} \
            "${dcap.net.port} diskCacheV111.doors.DcapInterpreterFactory \
             -listen=${dcap.net.listen} \
             -consume=${dcap.cell.consume} \
             -lookupPool=${dcap.cell.name.dir} \
             -subscribe=${dcap.cell.subscribe} \
             -acceptErrorWait=60000 \
             -keepAlive=300 \
             -poolRetry=2700 \
             -prot=telnet \
             -keepPrincipal \
             -root=/ \
             -read-only=${dcap.authz.readonly} \
             -truncate=${dcap.authz.truncate} \
             -maxLogin=${dcap.limits.clients} \
             -brokerTopic=${dcap.loginbroker.update-topic} \
             -brokerTags=${dcap.loginbroker.tags} \
             -brokerUpdateTime=${dcap.loginbroker.update-period} \
             -brokerUpdateTimeUnit=${dcap.loginbroker.update-period.unit} \
             -brokerUpdateOffset=${dcap.loginbroker.update-threshold} \
             -brokerAddress=${dcap.loginbroker.address} \
             -brokerPort=${dcap.loginbroker.port} \
             -protocolFamily=${dcap.loginbroker.family} \
             -protocolVersion=${dcap.loginbroker.version} \
             -loginBroker=${dcap.service.loginbroker}  \
             -pnfsManager=${dcap.service.pnfsmanager} \
             -poolManager=${dcap.service.poolmanager}  \
             -pinManager=${dcap.service.pinmanager} \
             -gplazma=\"${dcap.service.gplazma}\" \
             -billing=\"${dcap.service.billing}\" \
             -kafka=\"${dcap.enable.kafka}\" \
             -bootstrap-server-kafka=\"${dcap.kafka.bootstrap-servers}\" \
	     -kafka-topic=\"${dcap.kafka.topic}\" \
             -kafka-max-block=${dcap.kafka.maximum-block}\
             -kafka-max-block-units=${dcap.kafka.maximum-block.unit}\
             -retries-kafka=0 \
             -kafka-clientid=\"${dcap.cell.name}\" \
             -kafka-config-file=\"${dcap.kafka.config-file}\" \
             -stageConfigurationFilePath=\"${dcap.authz.staging}\" \
             -allowAnonymousStaging=\"${dcap.authz.anonymous-staging}\" \
             -io-queue=${dcap.mover.queue} \
             -io-queue-overwrite=${dcap.authz.mover-queue-overwrite} \
             -anonymous-access=${dcap.authz.anonymous-operations} \
             -clientVersion=\"${dcap.limits.client-version}\" \
             -netmask=\"${dcap.net.allowed-subnets}\" \
             ${arguments-${dcap.authn.protocol}} \
             "
