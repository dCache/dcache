##
# Alarms service
##

onerror shutdown

check -strong dcache.log.server.port
check -strong alarms.server.config
check -strong alarms.store.db.type

define env dontStartService.exe enddefine
    say -level=esay "You have configured this domain to host the alarms service together with one"
    say -level=esay "or more other services. This is a configuration error as the alarms service"
    say -level=esay "must be hosted in a domain by itself."
    say -level=esay ""
    say -level=esay "To fix this problem, either remove the alarms service or all other services"
    say -level=esay "from the domain ${domain.name}."
    say -level=esay ""
    say -level=esay "The alarms service will not be started."
enddefine

define env startService.exe enddefine
  create org.dcache.cells.UniversalSpringCell ${cell.name} \
        "classpath:org/dcache/alarms/server/alarms.xml \
        -profiles=${alarms.store.db.type} \
        -dcache.log.server.port=${dcache.log.server.port} \
        -alarms.dir=${alarms.dir} \
        -alarms.server.config=${alarms.server.config} \
        -alarms.store.path=${alarms.store.path} \
        -alarms.definitions.path=${alarms.definitions.path} \
        -alarms.store.db.changelog=${alarms.store.db.changelog} \
        -alarms.store.db.type=${alarms.store.db.type} \
        -alarms.store.db.rdbms=${alarms.store.db.rdbms} \
        -alarms.store.db.driver=${alarms.store.db.driver} \
        -alarms.store.db.url=${alarms.store.db.url} \
        -alarms.store.db.host=${alarms.store.db.host} \
        -alarms.store.db.user=${alarms.store.db.user} \
        -alarms.store.db.pass=${alarms.store.db.pass} \
        -alarms.store.db.properties=${alarms.store.db.properties} \
        -alarms.server.log.level=${alarms.server.log.level}"
enddefine

onerror continue
eval "${domain.cells}" "${cell.name}" ==
set env isUnique ${rc}
onerror shutdown

exec env startService.exe -ifok=isUnique
exec env dontStartService.exe -ifnotok=isUnique
