#
#      WebDAV Door
#

###########################################################################
# Verify properties needed by WebDAV

onerror shutdown
check -strong cell.name
check -strong port
check -strong webdavProtocol
check -strong webdavPnfsTimeout
check -strong webdavPoolManagerTimeout
check -strong webdavPoolTimeout
check -strong webdavGplazmaTimeout
check -strong webdavAddress
check -strong webdavRootPath
check -strong webdavAllowedPaths
check -strong webdavReadOnly
check -strong webdavAnonymousAccess
check -strong webdavAnonymousListing
check -strong webdavKillTimeout
check -strong webdavMoverTimeout
check -strong webdavTransferConfirmationTimeout
check -strong webdavWantClientAuth
check -strong webdavNeedClientAuth
check -strong webdavBasicAuthentication
check -strong pnfsmanager
check -strong poolmanager
check -strong gplazma
check -strong loginBrokerUpdateTime
check -strong loginBrokerUpdateThreshold
check -strong webdav.static-content.dir.local
check -strong webdav.static-content.dir.default
check -strong webdav.static-content.location
check -strong webdav.templates.html
check -strong webdav.redirect.on-read
check -strong webdav.overwrite
check -strong srmSpaceManagerEnabled

check webdavInternalAddress
check webdavIoQueue
check loginBroker

check webdav.security.ciphers

define env verify-http.exe enddefine
enddefine

onerror continue
test -f ${webdavKeyStore}
set env have_keystore ${rc}
test -f ${webdavTrustStore}
set env have_truststore ${rc}
onerror shutdown

define env verify-https.exe enddefine
  check -strong webdavKeyStore
  check -strong webdavKeyStorePassword
  check -strong webdavTrustStore

  exec env failMissingKeyStore.exe -ifnotok=have_keystore
  exec env failMissingTrustStore.exe -ifnotok=have_truststore
enddefine

define env verify-https-jglobus.exe enddefine
  check -strong trustAnchorRefreshPeriod
  check -strong hostCertificateRefreshPeriod
enddefine

define env failMissingKeyStore.exe enddefine
   say -level=esay "The key-store file ${webdavKeyStore} is missing.  Please generate it with:"
   say -level=esay "     /opt/d-cache/bin/dcache import hostcert --out=${webdavKeyStore}"
   exit 1
enddefine

define env failMissingTrustStore.exe enddefine
   say -level=esay "The TrustStore file ${webdavTrustStore} is missing.  Please generate it with:"
   say -level=esay "     /opt/d-cache/bin/dcache import cacerts --out=${webdavTrustStore}"
   exit 1
enddefine

exec env verify-${webdavProtocol}.exe
exec file:${dcache.paths.share}/cells/embedded-gPlazma.fragment

###########################################################################
# If srmSpaceManagerEnabled is on we need to use SrmSpaceManager as
#

onerror continue

define env srmSpaceManagerOn.exe endExe
  set env -c doorPoolManager "${spacemanager}"
endExe

eval ${srmSpaceManagerEnabled} true == ${srmSpaceManagerEnabled} on == || ${srmSpaceManagerEnabled} yes == || ${srmSpaceManagerEnabled} enabled == ||
exec env srmSpaceManagerOn.exe -ifok
set context -c doorPoolManager "${poolmanager}"

###########################################################################
# Create door cell

onerror shutdown
create org.dcache.cells.UniversalSpringCell ${cell.name} \
   "classpath:org/dcache/webdav/webdav.xml \
    -profiles=connector-${webdavProtocol} \
    -webdavKeyStore=\"${webdavKeyStore}\" \
    -webdavKeyStorePassword=${webdavKeyStorePassword} \
    -webdavTrustStore=\"${webdavTrustStore}\" \
    -webdavTrustStorePassword=${webdavTrustStorePassword} \
    -webdavBasicAuthentication=\"${webdavBasicAuthentication}\" \
    -webdavPnfsTimeout=${webdavPnfsTimeout} \
    -webdavPoolManagerTimeout=${webdavPoolManagerTimeout} \
    -webdavPoolTimeout=${webdavPoolTimeout} \
    -webdavLoginTimeout=${webdavGplazmaTimeout} \
    -webdavPort=${port} \
    -webdavAddress=${webdavAddress} \
    -webdavInternalAddress=${webdavInternalAddress} \
    -webdavRootPath=${webdavRootPath} \
    -webdavAllowedPaths=${webdavAllowedPaths} \
    -webdavReadOnly=${webdavReadOnly} \
    -webdavAnonymousAccess=${webdavAnonymousAccess} \
    -webdavAnonymousListing=${webdavAnonymousListing} \
    -webdavIoQueue=${webdavIoQueue} \
    -webdavKillTimeout=${webdavKillTimeout} \
    -webdavMoverTimeout=${webdavMoverTimeout} \
    -webdavTransferConfirmationTimeout=${webdavTransferConfirmationTimeout} \
    -webdavWantClientAuth=${webdavWantClientAuth} \
    -webdavNeedClientAuth=${webdavNeedClientAuth} \
    -hostCertificateRefreshPeriod=${hostCertificateRefreshPeriod} \
    -trustAnchorRefreshPeriod=${trustAnchorRefreshPeriod} \
    -pnfsmanager=${pnfsmanager} \
    -poolmanager=${doorPoolManager} \
    -gplazma=${gplazma} \
    -loginBrokerUpdateTime=${loginBrokerUpdateTime} \
    -loginBrokerUpdateThreshold=${loginBrokerUpdateThreshold} \
    -loginBroker=${loginBroker} \
    -webdav.static-content.dir.default=${webdav.static-content.dir.default} \
    -webdav.static-content.dir.local=${webdav.static-content.dir.local} \
    -webdav.static-content.location=${webdav.static-content.location} \
    -webdav.templates.html=${webdav.templates.html} \
    -webdav.redirect.on-read=${webdav.redirect.on-read} \
    -webdav.overwrite=${webdav.overwrite} \
    -export -cellClass=WebDAVDoor \
    -webdav.security.ciphers=\"${webdav.security.ciphers}\" \
    "
