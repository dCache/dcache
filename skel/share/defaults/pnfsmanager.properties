#  -----------------------------------------------------------------------
#     Default values for pnfsmanager
#  -----------------------------------------------------------------------
#
#   This Java properties file contains default values for pnfsmanager
#   configuration parameters. All values can be redefined in
#   etc/dcache.conf. Do not modify any values here as your changes
#   will be lost when you next upgrade.

pnfsmanager/cell.name=PnfsManager

#  ---- Default pnfs server
#
#   An older version of the pnfsManager actually autodetects the
#   possible pnfs filesystems. The defaultPnfsServer variable is
#   choosen from the list and used as primary pnfs filesystem.
#   Currently the others are ignored.  The pnfs variable can be used
#   to override this mechanism.
#
defaultPnfsServer=localhost

#   -- replace with org.dcache.chimera.namespace.ChimeraEnstoreStorageInfoExtractor
#      if you are running an enstore HSM backend.
#
hsmStorageInfoExtractor=org.dcache.chimera.namespace.ChimeraOsmStorageInfoExtractor

#  ---- Number of threads per thread group
#
#   Depending on how powerful your pnfs server host is you may set
#   this to up to 50.
#
pnfsNumberOfThreads=4

#  ---- Number of thread groups
#
#   A PNFS tree may be split into multiple databases. Each database is
#   single threaded and hence accessing the same database from
#   multiple threads provides only a minor speed-up. To ensure good
#   load balancing when using multiple databases, the PnfsManager
#   supports thread groups. Any database is assigned to one and only
#   one thread group, thus databases assigned to different thread
#   groups are guaranteed not to block each other. Each thread group
#   will have $pnfsNumberOfThreads threads.
#
#   For best performance isolation, set this to be equal the largest
#   database ID defined in PNFS. When increasing
#   pnfsNumberOfThreadGroups, you may want to lower
#   pnfsNumberOfThreads.
#
#   Notice that PNFS access is still subject to the number of threads
#   created in the PNFS daemon. If this number is lower than the
#   number of concurrent requests, then contention may still occur
#   even though multiple databases are used.
#
pnfsNumberOfThreadGroups=1

#  ---- Number of list threads
#
#   The PnfsManager uses dedicated threads for directory list
#   operations. This variable controls the number of threads to
#   use.
#
pnfsNumberOfListThreads=2

#  ---- Max chunk size in list replies
#
#   To avoid out of memory errors when listing large directories,
#   PnfsManager breaks up directory listings in chunk of entries. This
#   setting controls the maximum number of directory entries in a
#   chunk.
#
pnfsListChunkSize=100

#  ---- Threshold for when to log slow requests
#
#   Threshold in milliseconds for when to log slow requests. Requests
#   with a processing time larger than the threshold are logged. Set
#   to 0 to disable. This can also be enabled at runtime using the
#   'set log slow threshold' command.
#
pnfsLogSlowThreshold=0

#  ---- Maximum number of requests in a processing queue
#
#   PnfsManager maintains a request queue per processing thread. This
#   setting specifies the queue length at which point new requests
#   will be denied rather than enqueued for processing. Set to 0 for
#   unlimitted queues.
#
pnfsQueueMaxSize=0

#  ---- PnfsManager message folding
#
#   Whether to use message folding in PnfsManager. When message folding
#   is enabled, the PnfsManager will try to fold or collapse processing of
#   identical messages. This can reduce the load on PNFS or Chimera if a
#   large number of simulatenous requests on the same objects are performed.
#
(one-of?true|false)pnfsFolding=false

#  ---- Inherit file ownership when creating files and directories
#
#   By default new files and directories receive will be owned by the
#   person who created the files and directories. The owner field will
#   be the UID of the creator and the group field will be the primary
#   GID of the creator.
#
#   If this flag is set to true, then both the owner and the group
#   field will inherit the values from the parent directory.
#
#   In either case, a door may override the values with values
#   provided by the user.
#
(one-of?true|false)pnfsInheritFileOwnership=false

#  ---- Whether to verify lookup permissions for the entire path
#
#   For performance reasons dCache with PNFS only verified the lookup
#   permissions of the directory containing the file system entry
#   corresponding to the path. Ie only the lookup permissions for the
#   last parent dirctory of the path were enforced. For compatibility
#   reasons Chimera inherited these semantics.
#
#   When this option is set to true, Chimera will verify the lookup
#   permissions of all directories of a path.
#
(one-of?true|false)pnfsVerifyAllLookups=false

#  ---- Default Access Latency and Retention Policy
#
#   These variables affect only newly created files.
#
#   Do not use OUTPUT.
#
(one-of?CUSTODIAL|REPLICA|OUTPUT)\
DefaultRetentionPolicy=CUSTODIAL

(one-of?ONLINE|NEARLINE)\
DefaultAccessLatency=NEARLINE


#  ---- Configuration for database connection pool
#
#  The database connection pool reuses connections between successive
#  database operations.  By reusing connections dCache doesn't suffer
#  the overhead of establishing new database connections for each
#  operation.
#
#  The options here determine how the pnfsmanager behaves as the
#  number of concurrent requests fluctuates.
#

#
#  The number of partitions.  For performance reasons the available
#  connections are separated into partitions.  Each Java thread will
#  use exactly one partition.  Therefore, for n partitions, there is a
#  (n-1) / n chance that two Java threads will obtain connections
#  without contention.
#
#  Setting this property to a low value will increase the likelihood
#  that Java threads attempting to access the database will force one
#  thread to wait until the other thread has obtained a connection.
#
#  Setting this property to a high value will result in performance
#  problems, particularly when the number of in-use threads is close
#  to the maximum allowed.
#
#  Note: if db.connections.partition-count is adjusted then the
#  values of the db.connections.max-per-partition property and the
#  db.connections.min-per-partition property must be checked.
#
#  Minimum value is 1, recommended is 2--5.
#
pnfsmanager/db.connections.partition-count = 3

#
#  The maximum number of connections per partition.
#
#  Note that the overall maximum number of connections from
#  PnfsManager is the product of db.connections.parition-count and
#  db.connections.paritions.max-per-partition.
#
pnfsmanager/db.connections.max-per-partition = 30

#
#  The minimum number of connections per partition.  PnfsManager will
#  have at least the product of db.connections.partition-count and
#  db.connections.paritions.min-per-partition.
#
pnfsmanager/db.connections.min-per-partition = 10



#
# Database related settings reserved for internal use.
#
pnfsmanager/db.host=${chimera.db.host}
pnfsmanager/db.name=${chimera.db.name}
pnfsmanager/db.user=${chimera.db.user}
pnfsmanager/db.password=${chimera.db.password}
pnfsmanager/db.driver=${chimera.db.driver}
pnfsmanager/db.url=${chimera.db.url}
pnfsmanager/db.schema.changelog=${chimera.db.schema.changelog}


#
#  --- Last Access Time (atime) updates for files
#
#  This integer value controls whether and when dCache updates the last access
#  time of files on reading them.
#
#  Values <  0: atimes are never updated.
#  Values >= 0: The maximum absolute(!) difference (in seconds) between a file's
#               "new" atime and its curently stored one, where the atime is not
#               yet updated.
#               For example, when using a value of "4" and the old atime is (in
#               POSIX time) "1000000000", then atimes up to including
#               "1000000004" (but also down to "999999996") are not written;
#               "1000000005" or later (respectively "999999995" or earlier)
#               would be saved.
#
#  Updating the atimes less often (or not at all) may have performance benefits.
#
pnfsmanager/atime.gap=-1

#
# Old properties
#
(forbidden)namespaceProvider=Use dcache.namespace instead
(obsolete)pnfs=PNFS is not supported
(obsolete)pnfsInfoExtractor=PNFS is not supported
(obsolete)pnfsNumberOfLocationThreads=PNFS is not supported
(obsolete)pnfsDbUser=PNFS is not supported
(obsolete)pnfsDbPassword=PNFS is not supported
(obsolete)pnfsPasswordFile=PNFS is not supported
(obsolete)cacheInfo=PNFS is not supported
(obsolete)companionDatabaseHost=PNFS is not supported

