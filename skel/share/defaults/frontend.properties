#
# dCache - http://www.dcache.org/
#
# Copyright (C) 2016 Deutsches Elektronen-Synchrotron
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#  -----------------------------------------------------------------------
#     Default values for Frontend doors
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Cell name of the door
#
frontend.cell.name=Frontend-${host.name}

#  ---- Named queues to subscribe to
#
#   A service can consume messages from named queues. Other service can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
frontend.cell.consume=${frontend.cell.name}

frontend.cell.subscribe=${frontend.pool-monitor.topic}

# Cell address of pnfsmanager service
frontend.service.pnfsmanager=${dcache.service.pnfsmanager}

# Cell address of pinmanager service
frontend.service.pinmanager=${dcache.service.pinmanager}

# Timeout for pinmanager requests
frontend.service.pinmanager.timeout=300000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)frontend.service.pinmanager.timeout.unit=MILLISECONDS


# Timeout for pnfsmanager requests
frontend.service.pnfsmanager.timeout = 120000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)frontend.service.pnfsmanager.timeout.unit=MILLISECONDS

# Cell address for poolmanager service
frontend.service.poolmanager=${dcache.service.poolmanager}

# Timeout for poolmanager requests
frontend.service.poolmanager.timeout = 300000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)frontend.service.poolmanager.timeout.unit=MILLISECONDS

# Cell address of gplazma service
frontend.service.gplazma=${dcache.service.gplazma}

# Timeout for gplazma requests
frontend.service.gplazma.timeout = 180000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)frontend.service.gplazma.timeout.unit=MILLISECONDS

# Topic on which to expect pool monitor updates
frontend.pool-monitor.topic = ${dcache.pool-monitor.topic}

#  ---- TCP port to listen on
#
#   Specifies the TCP port on which the door accepts connections.
#
frontend.net.port = 3880

#  ---- What IP address to listen on
#
#   Specifies the IP address to which the door listens for
#   connections from clients. Defaults to the wildcard address.
#
frontend.net.listen = ${dcache.net.listen}

#  ---- Whether to use HTTP or HTTPS
#
#   Specifies whether the HTTP or the HTTPS protocol is used. For
#   HTTPS, a server certificate and a trust store need to be
#   created. By default these are stored under /etc/grid-security/.
#
#   The value https-jglobus is deprecated and is an alias for https.

(one-of?http|https|https-jglobus)frontend.authn.protocol = http

(immutable)frontend.authn.profile-for-http = http
(immutable)frontend.authn.profile-for-https = https
(immutable)frontend.authn.profile-for-https-jglobus = https
(immutable)frontend.authn.profile = ${frontend.authn.profile-for-${frontend.authn.protocol}}

#  ---- Whether client certificates are accepted for HTTPS
#
#   This parameter specifies whether the door will accept a client
#   certificate for authentication.
#
(one-of?true|false)frontend.authn.accept-client-cert = true

#  ---- Whether client certificates are required for HTTPS
#
#   This parameter specifies whether the door will require a
#   client certificate for authentication.
#
(one-of?true|false)frontend.authn.require-client-cert = false

#  ---- Whether HTTP Basic authentication is enabled
#
#   When enabled a user name and password will be requested on
#   authorization failures.
#
#   Note that HTTP Basic authentication essentially transfers
#   passwords in clear text. A secure setup should only use HTTP Basic
#   authentication over HTTPS.
#
(immutable)frontend.authn.basic-for-http = false
(immutable)frontend.authn.basic-for-https = true
(immutable)frontend.authn.basic-for-https-jglobus = true
(one-of?true|false|${frontend.authn.basic-for-${frontend.authn.protocol}})\
frontend.authn.basic = ${frontend.authn.basic-for-${frontend.authn.protocol}}

# Host (server) certificate for https authentication
frontend.authn.hostcert.cert=${dcache.authn.hostcert.cert}

# Host (server) key for https authentication
frontend.authn.hostcert.key=${dcache.authn.hostcert.key}

# How often to check the host certificate for updates
frontend.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.hostcert.refresh.unit})frontend.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}

# Path to directory with trusted CA certificates for https authentication
frontend.authn.capath=${dcache.authn.capath}

# How often to check the CA certificates for updates
frontend.authn.capath.refresh=${dcache.authn.capath.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.capath.refresh.unit})frontend.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}

# ---- Certificate Authority Namespace usage mode
(one-of?GLOBUS_EUGRIDPMA|EUGRIDPMA_GLOBUS|GLOBUS|EUGRIDPMA|GLOBUS_EUGRIDPMA_REQUIRE|EUGRIDPMA_GLOBUS_REQUIRE|GLOBUS_REQUIRE|EUGRIDPMA_REQUIRE|EUGRIDPMA_AND_GLOBUS|EUGRIDPMA_AND_GLOBUS_REQUIRE|IGNORE|${dcache.authn.namespace-mode})\
frontend.authn.namespace-mode=${dcache.authn.namespace-mode}

# ---- Certificate Revocation List usage mode
(one-of?REQUIRE|IF_VALID|IGNORE|${dcache.authn.crl-mode})\
frontend.authn.crl-mode=${dcache.authn.crl-mode}

# ---- On-line Certificate Status Protocol usage mode
(one-of?REQUIRE|IF_AVAILABLE|IGNORE|${dcache.authn.ocsp-mode})\
frontend.authn.ocsp-mode=${dcache.authn.ocsp-mode}

#  ---- Level of access granted to anonymous users
#
#   Specifies which HTTP methods are granted to anonymous
#   clients. NONE specifies that all anonymous requests will be
#   rejected; READONLY specifies that only read requests are allowed
#   (that is, GET, HEAD, OPTIONS and PROPFIND); FULL specifies that
#   all HTTP methods are allowed.
#
#   Anonymous clients are still subject to authorisation: Only
#   operations with world access are granted.
#
(one-of?NONE|READONLY|FULL)frontend.authz.anonymous-operations=NONE


#  ---- Whether the door is read only
#
#   When set to true, only read operations are allowed through the frontend.
#
(one-of?true|false)frontend.authz.readonly = false

# ---- Threads that accept TCP connections
#
# The number of threads that accept and dispatch new client connections.
# Except under very high connection rates, a single thread should be
# sufficient.
#
frontend.limits.acceptors=1

# ---- Time before an idle connection is closed
#
# An idle connection is one on which no data is transferred.
#
# Note that a connection may appear idle because the door is blocked
# on other operations on dCache, such as waiting for a file to stage from
# tape, or waiting for a mover to start. It is advisable that this timeout
# is not lower than the individual timeouts configured for talking to other
# dCache services.
#
frontend.limits.idle-time=300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
frontend.limits.idle-time.unit=SECONDS

# ---- Time before an idle TCP connection is closed during high load
#
# An idle connection is one on which no data is transferred. The door
# is considered under high load when all request processing threads
# are busy.
#
# Under high load, new connections will be configured with this timeout
# rather than the timeout defined by frontend.limits.idle-time. Currently,
# existing connections are not affected, although this may change in
# the future.
#
frontend.limits.low-resource-idle-time=30
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
frontend.limits.low-resource-idle-time.unit=SECONDS

# ---- TCP backlog
#
# Maximum number of TCP connections queued for accept. If the acceptor
# threads cannot keep up, up to this number of connections are queued
# before new connections are rejected.
frontend.limits.backlog=1024

# ---- Maximum number of threads used for request processing
#
# Whenever a client submits a request, the request is processed by a thread.
# This setting controls the maximum number of such threads.
#
frontend.limits.threads.max=500

# ---- Minimum number of threads used for request processing
#
# Request processing threads that have been idle for a while are terminated.
# This setting controls a minimum number of threads to keep alive even
# when idle.
frontend.limits.threads.min=1

# ---- Time before an idle request processing thread is terminated
frontend.limits.threads.idle-time=60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
frontend.limits.threads.idle-time.unit=SECONDS

# ---- Maximum number of queued requests
#
# Once the limit is reached no new connections will be accepted;
# instead, the operating system will queue them in the TCP backlog.
# Once the TCP backlog is filled, the operating system will reject
# further TCP connections.
#
frontend.limits.queue-length=500

# ---- Shutdown timeout
#
# During shutdown no new connections will be accepted. Existing
# connections will be given this much time to complete the
# request, after which the connections are forcefully broken.
#
frontend.limits.graceful-shutdown=2
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
frontend.limits.graceful-shutdown.unit=SECONDS

#   Custom HTTP headers in response
#
#   The following configuration prefix is used to add custom headers
#   to dCache responses.  The key part (after the prefix) is used as
#   the header; the value is the header's value.  For example, specifying
#
#       frontend.custom-response-header!Foo = bar
#
#   ensures that HTTP responses will include the line:
#
#       Foo: bar
#
#   The pool.mover.http.custom-response-header property has a similar
#   effect for pools.
#
(prefix)frontend.custom-response-header = HTTP headers that are always included in dCache responses
frontend.custom-response-header!Server = dCache/${dcache.version}

#
#   Document which TCP ports are opened
#
(immutable)frontend.net.ports.tcp=${frontend.net.port}

#  Flags to disable problematic crypto ciphers
#
#  See dcache.authn.ciphers for details.
frontend.authn.ciphers = ${dcache.authn.ciphers}

# Set Http authentication realm
frontend.authn.realm = ${dcache.description}

# maximal number of entries in the cache
frontend.service.gplazma.cache.size = 1024

# cache entry maximal lifetime
frontend.service.gplazma.cache.timeout = 10

# Time unit used for timeout.
#
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
frontend.service.gplazma.cache.timeout.unit = MINUTES

#  ---- Directory with default static content
#
#   The directory in the local file system containing the dcache-view
#   files.
#
frontend.dcache-view.dir = ${dcache.paths.share}/dcache-view

#  ---- HTTP endpoint of dCache's webapi
#
#   The webapi is offered by this frontend service, so the default
#   value is a relative path pointing back to this server.
#
#   MUST end with a slash.
#
frontend.dcache-view.endpoints.webapi=/api/v1/

#  ---- HTTP endpoint of dCache webdav service
#
#   dCacheView uses the webapi for meta data access, but actual
#   file transfers are served from the regular webdav door.
#
#   If left empty, is is assumed the webdav service runs on the same
#   host as the frontend door on port 2880. One could set this
#   to something like https://example.org:443/.
#
#   MUST end with a slash if non-empty.
#
frontend.dcache-view.endpoints.webdav=

#  ---- Name placed at the top of the dCacheView application
#
frontend.dcache-view.org-name=${dcache.description}
