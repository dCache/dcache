#  -----------------------------------------------------------------------
#     Default values for qos-verifier
#
#     The qos services are responsible for maintaining the disk and tape
#     requirements of a given file.
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

qos-verifier.cell.name=qos-verifier

#  ---- Named queues to consume from
#
#       A service can consume messages from named queues. Other services can
#       write messages to such queues. A named queue has an unqualified cell
#       address, that is, an address without a domain name.
#
#       This property contains a comma separated list of named queues to
#       consume from.
#
qos-verifier.cell.consume = ${qos-verifier.cell.name}

#  ---- Message topics to subscribe to.
#
qos-verifier.cell.subscribe=${qos.pool-monitor-topic}

# ---- Configuration for verifier database connection pool ---------------------------
#
#      The database connection pool reuses connections between successive
#      database operations.  By reusing connections dCache doesn't suffer
#      the overhead of establishing new database connections for each
#      operation.
#
#      The options here determine how qos behaves as the number of concurrent
#      requests fluctuates.
# ---------------------------------------------------------------------------
qos-verifier.db.connections.max=10

# ---- The minimum number of idle database connections.
#
qos-verifier.db.connections.idle=1

(prefix)qos-verifier.db.hikari-properties = Hikari-specific properties

# ---- Database related settings reserved for internal use.
#
(immutable)qos-verifier.db.name=qos
qos-verifier.db.host=${dcache.db.host}
qos-verifier.db.user=${dcache.db.user}
qos-verifier.db.password=${dcache.db.password}
qos-verifier.db.password.file=${dcache.db.password.file}
qos-verifier.db.url=jdbc:postgresql://${qos-verifier.db.host}/${qos-verifier.db.name}?targetServerType=master
qos-verifier.db.schema.changelog=org/dcache/qos/model/db.changelog-master.xml
qos-verifier.db.schema.auto=${dcache.db.schema.auto}

# ---- Used with listing of file operations.
#
qos-verifier.db.fetch-size=1000

# ---- Thread queues --------------------------------------------------------------
#
#      There are different thread queues associated with each of the qos services.
#
#      In general, each (remote) service has an executor for handling the
#      processing of incoming messages.  The thread pools for these
#      are labeled 'submit-threads.'  In the case of the verifier,
#      there is also a bulk submission pool for handling bulk scan requests.
#
#      The verifier, scanner and adjuster in addition also have task thread pools.
# ---------------------------------------------------------------------------------

# ---- Thread queue used during the registration of a new operation.
#      Updates will do a verification of the pool locations; cancellation
#      also runs on these threads, but involves simply setting up a filter
#      (the actual cancellation is run on a different thread).
#
qos.limits.verifier.submit-threads=32

# ---- Thread queue used during the registration of a new operation.
#      Like the above, but loops over a list of files.
#
qos.limits.verifier.bulk-threads=8

# ---- Thread queue used when an operation becomes active (to verify
#      the requirements and send a message to the adjuster). Each thread makes
#      a call to the requirements service, then to the pools, and finally,
#      if necessary, to the adjuster service.
#
#      This queue is used for requests originating from the namespace.
#
qos.limits.verifier.task-threads=${qos.limits.verifier.max-running-operations}

# ---- Thread queue used when an operation becomes active (to verify
#      the requirements and send a message to the adjuster). Each thread makes
#      a call to the requirements service, then to the pools, and finally,
#      if necessary, to the adjuster service.
#
#      This queue is used for requests originating from the frontend, bulk service or qos engine.
#
qos.limits.verifier.modify-task-threads=${qos.limits.verifier.max-running-operations}

# ---- Thread queue used when an operation becomes active (to verify
#      the requirements and send a message to the adjuster). Each thread makes
#      a call to the requirements service, then to the pools, and finally,
#      if necessary, to the adjuster service.
#
#      This queue is used for requests originating from the scanner.
#
qos.limits.verifier.scanner-task-threads=${qos.limits.verifier.max-running-operations}

# ---- Thread queue used to execute postprocess and eventual removal of operations.
#
qos.limits.verifier.post-process-threads=${qos.limits.verifier.max-running-operations}

# ---- This number is a maximum per operation queue.
#
qos.limits.verifier.max-running-operations=200

# ---- Maximum number of operation entries to retrieve at one time from the
#      database and store in the in-memory cache.
(deprecated)qos.limits.verifier.cache-capacity=no longer used

# ---- Size of circular buffer for displaying history of the most
#      recently completed tasks and operations.
#
qos.limits.verifier.operation-history=1000

# ---- Retry management.
#
#      The following property controls the number of
#      times the verifier is allowed to retry failed file-operations.
#      This is on a per-source/target basis, if the error is judged retriable.
#      If there is a non-retriable error, but a different source or target
#      can be selected, the retry count is set back to 0 again.
#
qos.limits.verifier.operation-retries=1

# ---- Operation and task map checking.
#
#      The maximum interval which can pass before a check of waiting/completed
#      operations or tasks is run (for an active system the interval will effectively
#      be shorter, as checks are also done each time a running task terminates).
#
qos.limits.verifier.scan-period=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.limits.verifier.scan-period.unit=MINUTES

# ---- Reloading.
#      It is possible that the verifier come on line faster than pools being registered, if
#      this is a full system restart.  Not to incur numerous errors, in case there are incomplete
#      operations in the store, we establish a grace period before reload.
#
qos.limits.verifier.reload-grace-period=3
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.limits.verifier.reload-grace-period.unit=MINUTES

# ---- Copy/migration target selection.
#
#      Strategy implementation used to select among available/eligible target pools.
#
qos.pool-selection-strategy=org.dcache.pool.migration.ProportionalPoolSelectionStrategy
