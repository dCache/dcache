#  -----------------------------------------------------------------------
#     Default values for WebDAV doors
#  -----------------------------------------------------------------------
#
#   This Java properties file contains default values for WebDAV
#   configuration parameters. All values can be redefined in
#   etc/dcache.conf. Do not modify any values here as your changes
#   will be lost when you next upgrade.

#  ---- Name of WebDAV door
#
webdav/cell.name=WebDAV-${host.name}

#  ---- PnfsManager timeout
#
#   Specifies the timeout in milliseconds for communication with the
#   PnfsManager cell.
#
webdavPnfsTimeout=120000

#  ---- PoolManager timeout
#
#   Specifies the timeout in milliseconds for communication with the
#   PoolManager cell.
#
webdavPoolManagerTimeout=300000

#  ---- Pool timeout
#
#   Specifies the timeout in milliseconds for communication with the
#   pool cells.
#
webdavPoolTimeout=10000

#  ---- gPlazma timeout
#
#   Specifies the timeout in milliseconds for communication with the
#   gPlazma cell.
#
webdavGplazmaTimeout=180000


#  ---- Mover kill timeout
#
#   Specifies the timeout in milliseconds after which the WebDAV door
#   gives up on waiting for a mover to respond to a kill request.
#
webdavKillTimeout=1500

#  ---- Mover queue timeout
#
#   Specifies the timeout in milliseconds after which the WebDAV door
#   gives up on waiting for a mover to start. This places a bound on
#   the maximum mover queue time.
#
webdavMoverTimeout=180000

#  ---- Mover finished timeout
#
#   Specifies the timeout in milliseconds for how long the WebDAV door
#   waits for a confirmation from the mover after a transfer has
#   completed.
#
webdavTransferConfirmationTimeout=60000

#  ---- TCP port for WebDAV door
#
#   Specifies the TCP port on which the WebDAV door accepts connections.
#
webdavPort=2880
webdav/port=${webdavPort}

#  ---- What IP address to listen on for WebDAV door
#
#   Specifies the IP address to which the WebDAV door listens for
#   connections from clients. Defaults to the wildcard address.
#
webdavAddress=0.0.0.0

#  ---- What IP address to use for connections from pools to the WebDAV door
#
#   For uploads pools create a TCP connection to the WebDAV door.
#   If empty, the WebDAV door will choose a local address. Notice
#   that this address must not be a wildcard address.
#
webdavInternalAddress=

#  ---- Whether to redirect GET requests to a pool
#
#   If true, WebDAV doors will respond with a 302 redirect pointing to
#   a pool holding the file. This requires that a pool can accept
#   incoming TCP connections and that the client follows the
#   redirect. If false, data is relayed through the door. The door
#   will establish a TCP connection to the pool.
#
(one-of?true|false)webdav.redirect.on-read=true

#  ---- Whether to redirect PUT requests to a pool
#
#   If true, WebDAV doors will respond with a 307 redirect pointing to
#   a pool to which to upload the file. This requires that a pool can
#   accept incoming TCP connections and that the client follows the
#   redirect. If false, data is relayed through the door. The door
#   will establish a TCP connection to the pool. Only clients that send
#   a Expect: 100-Continue header will be redirected - other requests
#   will always be proxied through the door.
#
(one-of?true|false)webdav.redirect.on-write=true

#  ---- Root path of WebDAV door
#
#   Specifies the root directory exposed through the WebDAV door. Used
#   by both the WebDAV and SRM services.
#
webdavRootPath=/

#  ---- Paths which are accessible through WebDAV
#
#   This parameter is set to the absolute paths to directories
#   accessible through WebDAV. Multiple directories are separated by a
#   colon.
#
webdavAllowedPaths=/

#  ---- Whether the WebDAV door is read only
#
#   When set to true, only read operations are allowed through WebDAV.
#
(one-of?true|false)webdavReadOnly=false

#  ---- Whether existing files may be overwritten
#
#   The WebDAV protocol specifies that a PUT overwrites existing files
#   (but not directories). If this property is set to true, then
#   dCache honors this aspect of the WebDAV specification. If set to
#   false, attempts to overwrite existing files will be denied.
#
#   Some clients expect that PUT indeed overwrites existing files. In
#   particular Mac OS X is known to have issues writing and deleting
#   files with dCache when this property is false.
#
(one-of?true|false)webdav.overwrite=false

#  ---- Level of access granted to anonymous users through WebDAV
#
#   Specifies which HTTP methods are granted to anonymous
#   clients. NONE specifies that all anonymous requests will be
#   rejected; READONLY specifies that only read requests are allowed
#   (that is, GET, HEAD, OPTIONS and PROPFIND); FULL specifies that
#   all HTTP methods are allowed.
#
#   Anonymous clients are still subject to authorisation: Only
#   operations with world access are granted.
#
(one-of?NONE|READONLY|FULL)webdavAnonymousAccess=NONE

#  ---- Whether anonymous listing is allowed
#
#   When false, unauthenticated users are prevented from listing the
#   contents of directories.  When true and webdavAnonymousAccess is
#   not 'NONE' then unauthenticated users may list the contents of any
#   world-readable directory.
#
(one-of?true|false)webdavAnonymousListing=true

#  ---- Mover queue
#
#   The mover queue on the pool to which WebDAV transfers will be
#   scheduled. If blank, the default queue will be used.
#
webdavIoQueue=

#  ---- Whether to use HTTP or HTTPS for WebDAV
#
#   Specifies whether the HTTP or the HTTPS protocol is used. For
#   HTTPS, a server certificate and a trust store need to be
#   created.
#
#   Alternatively to https, the https-jglobus option provides HTTPS
#   support through the JGlobus library. JGlobus accesses the host and
#   CA certificates in /etc/grid-security/ directly. In contrast to
#   the plain Java SSL implementation JGlobus accepts proxy
#   certificates, including VOMS proxy certificates. The protocol
#   between the client and the server is however the same for https
#   and https-jglobus.
#
(one-of?http|https|https-jglobus)webdavProtocol=http

#  ---- Server certificate
#
#   This parameter specifies the path to the file containing the
#   PKCS12 encoded server certificate. When using https as the
#   webdavProtocol, the host certificate in /etc/grid-security/ needs
#   to be converted to PKCS12 format before it can be used with the
#   WebDAV door. Use the 'bin/dcache import hostcert' command to
#   perform this task.
#
webdavKeyStore=${keyStore}

#  ---- Password for server certificate
#
#   This parameter specifies the password with which the PKCS12 encoded
#   server certificate is encrypted.
#
webdavKeyStorePassword=${keyStorePassword}

#  ---- Trusted CA certificates
#
#   This parameter specifies the path to a Java Keystore containing
#   the the trusted CA certicates used by the WebDAV door. When using
#   https as the webdavProtocol, the CA certificates in
#   /etc/grid-security/certificates/ need to be converted into a Java
#   Keystore file before they can be used with the WebDAV door. Use
#   the 'bin/dcache import cacerts' command to perform this task.
#
webdavTrustStore=${trustStore}

#  ---- Password for trusted CA certificates
#
#   This parameter specifies the password with which the Java Keystore
#   containing the trusted CA certificates is encrypted.
#
webdavTrustStorePassword=${trustStorePassword}

#  ---- Whether client certificates are accepted for HTTPS
#
#   This parameter specifies whether the WebDAV door will accept a client
#   certificate for authentication.
#
(one-of?true|false)webdavWantClientAuth=true

#  ---- Whether client certificates are required for HTTPS
#
#   This parameter specifies whether the WebDAV door will require a
#   client certificate for authentication.
#
(one-of?true|false)webdavNeedClientAuth=false

#  ---- Whether HTTP Basic authentication is enabled
#
#   When enabled a user name and password will be requested on
#   authorization failures.
#
#   Note that HTTP Basic authentication essentially transfers
#   passwords in clear text. A secure setup should only use HTTP Basic
#   authentication over HTTPS.
#
(one-of?true|false)webdavBasicAuthentication=false

#  ---- Location for static content
#
#   The WebDAV door provides HTML renderings of directories and error
#   messages. The artwork and other static content used in the HTML
#   rendering is exposed through the WebDAV door itself in a virtual
#   directory.
#
#   This parameter specifies the location to use for the virtual
#   directory. The virtual directory masks any real directory with the
#   same path in dCache's name space.
#
webdav.static-content.location=/.webdav

#  ---- Directory with default static content
#
#   The directory in the local file system containing the default
#   artwork and other static content used in the WebDAV door's HTML
#   renderings.
#
webdav.static-content.dir.default=${dcache.paths.share}/webdav/static

#  ---- Directory with custom static content
#
#   The directory in the local file system containing custom artwork
#   and other static content used in the WebDAV door's HTML
#   renderings. Any file placed in this directory masks files by the
#   same name in the default static contet directory.
#
webdav.static-content.dir.local=@webdav.static-content.dir.local@

#  ---- Base URI for static content
#
#   The base URI indicating the location of artwork and other static
#   content used in the WebDAV door's HTML renderings.
#
#   This is exposed as the string $static$ inside templates.
#
webdav.static-content.uri=${webdav.static-content.location}

#  ---- Path to HTML template for directory listing
#
#   To customize the look and feel of the HTML rendering of a
#   directory, modify a copy of this file and redefine the property to
#   point to the copy.
#
webdav.templates.html=file:${dcache.paths.share}/webdav/templates/html.stg

#
#   Document which TCP ports are opened
#
(immutable)webdav/net.ports.tcp=${port}

#  Security related properties
webdav.security.ciphers=${dcache.security.ciphers}

#  ---- Artwork elements
#
#  These properties are obsolete. Modify the template to customize the
#  look and feel.
#
(obsolete)webdav.images.logo=modify the template to customize the look and feel
(obsolete)webdav.images.directory=modify the template to customize the look and feel
(obsolete)webdav.images.file=modify the template to customize the look and feel
(obsolete)webdav.style.css=modify the template to customize the look and feel
(obsolete)webdavLogoPath=modify the template to customize the look and feel
(obsolete)webdavDirIconPath=modify the template to customize the look and feel
(obsolete)webdavFileIconPath=modify the template to customize the look and feel
(obsolete)webdavCssPath=modify the template to customize the look and feel
(obsolete)logoPath=modify the template to customize the look and feel
(obsolete)dirIconPath=modify the template to customize the look and feel
(obsolete)fileIconPath=modify the template to customize the look and feel
(obsolete)cssPath=modify the template to customize the look and feel
(forbidden)webdav.templates.list=Use webdav.templates.html instead
(forbidden)httpPortNumber=use webdavPort instead
(forbidden)httpRootPath=use webdavRootPath instead
(forbidden)httpAllowedPaths=use webdavAllowedPaths instead
(forbidden)webdavContextPath=use webdav.static-content.location instead


