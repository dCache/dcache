#  -----------------------------------------------------------------------
#     Default values for nfs
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

nfs.cell.name=NFS-${host.name}

#
# NFS versions to support.
#
# Comma separated list of NFS versions to support,
# For example:
#  nfs.version=3, 4.1
#
(obsolete)nfs.v3=Use nfs.version
(any-of?3|4.1)nfs.version=3

#
# TCP port number of NFS door
#
(deprecated)nfs.port=2049
nfs.net.port=${nfs.port}

#
# The local NFSv4 domain name. An NFSv4  domain is a namespace
# with a unique username<->UID and groupname<->GID mapping.
#
nfs.domain=

#
# The username<->UID and groupname<->GID mapping results are cached to improve
# NFS interface performance. The following value allowes to tweak caching timeout.
#

# maximal number of entries in the cache
nfs.idmap.cache.size = 512

# cache entry maximal lifetime
nfs.idmap.cache.timeout = 30

# Time unit used for timeout.
#
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
nfs.idmap.cache.timeout.unit = SECONDS


# Allow legacy numeric strings instead of principals. Used for backward compatibility
# and for setups without mapping service like NIS or LDAP.
(one-of?true|false)nfs.idmap.legacy = true

#  ---- Mover queue
#
#   The mover queue on the pool to which this request will be
#   scheduled.
#
(deprecated)nfsIoQueue=
nfs.mover.queue=${nfsIoQueue}

#
# enable RPCSEC_GSS
#
(one-of?true|false)nfs.rpcsec_gss = false

#
# Location of export file
#
nfs.export.file=/etc/exports

#
# Start embedded portmap service if system one not available.
#
(one-of?true|false)nfs.enable.portmap=true

#  ---- Parameters related to talking to other services
#
nfs.service.loginbroker=${dcache.service.loginbroker}
nfs.service.loginbroker.update-period=${dcache.service.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.service.loginbroker.update-period.unit})\
  nfs.service.loginbroker.update-period.unit=${dcache.service.loginbroker.update-period.unit}
nfs.service.loginbroker.update-threshold=${dcache.service.loginbroker.update-threshold}
(deprecated)nfs.published.name = file
nfs.service.loginbroker.family=${nfs.published.name}
nfs.service.loginbroker.version=nfs4.1


nfs.service.poolmanager=${dcache.service.poolmanager}
(deprecated)nfs.poolmanager.timeout=300000
nfs.service.poolmanager.timeout=${nfs.poolmanager.timeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.service.poolmanager.timeout.unit=MILLISECONDS

nfs.service.pinmanager=${dcache.service.pinmanager}
nfs.service.pinmanager.timeout=300000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.service.pinmanager.timeout.unit=MILLISECONDS

(deprecated)nfs.pool.timeout=10000
nfs.service.pool.timeout=${nfs.pool.timeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.service.pool.timeout.unit=MILLISECONDS

nfs.service.gplazma=${dcache.service.gplazma}
(deprecated)nfs.gplazma.timeout=3000
nfs.service.gplazma.timeout=${nfs.gplazma.timeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)nfs.service.gplazma.timeout.unit=MILLISECONDS

nfs.service.pnfsmanager=${dcache.service.pnfsmanager}
nfs.service.billing=${dcache.service.billing}

#
# Database related settings
#
nfs.db.host=${chimera.db.host}
nfs.db.name=${chimera.db.name}
nfs.db.user=${chimera.db.user}
nfs.db.password=${chimera.db.password}
nfs.db.driver=${chimera.db.driver}
nfs.db.url=${chimera.db.url}
nfs.db.schema.changelog=${chimera.db.schema.changelog}
(immutable)nfs.db.schema.auto=false
nfs.db.dialect=${chimera.db.dialect}

#
#  Document which TCP ports are opened
#
(immutable)nfs.net.ports.tcp=(111) ${nfs.port}
(immutable)nfs.net.ports.udp=(111) ${nfs.port}
