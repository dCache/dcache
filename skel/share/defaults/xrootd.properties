#  -----------------------------------------------------------------------
#     Default values for xrootd
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Cell name of Xrootd door
#
xrootd.cell.name=Xrootd-${host.name}

#  ---- Named queues to consume from
#
#   A service can consume messages from named queues. Other services can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
xrootd.cell.consume = ${xrootd.cell.name}
xrootd.cell.subscribe=${xrootd.loginbroker.request-topic},${xrootd.pool-monitor.topic}

#  ---- TCP address and port to bind to
#
#   Specifies the TCP port and address on which the Xrootd door accepts connections.
#
xrootd.net.port = 1094
xrootd.net.listen = ${dcache.net.listen}

#  ---- TCP backlog used by xrootd
#
#   1024 is typically the largest value allowed by the OS.
#
xrootd.net.backlog = 1024

#  ---- Worker thread limit
#
#   Maximum number of work threads used by the door. Since the worker
#   threads block on name space and pool manager operations, a
#   relatively large value is needed.
#
xrootd.limits.threads = 1000


#  ---- The Xrootd door using a caching login strategy.
#
#       Cache lifetime and size are set via these properties.
#
xrootd.limits.login-cache.lifetime=5

(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
xrootd.limits.login-cache.lifetime.unit=MINUTES

xrootd.limits.login-cache.size=500

# Whether space reservations are supported
(one-of?true|false|${dcache.enable.space-reservation})xrootd.enable.space-reservation=${dcache.enable.space-reservation}

# ---- Whether to expect the haproxy Proxy Protocol
#
# Many load balancers and reverse proxies support the Proxy Protocol, a
# de facto standard introduced by the haproxy product. Support for this
# protocol has to be enabled in both the load balancer/reverse proxy and
# the backend service.
#
# If enabled, the proxy injects the actual clients IP address into the data
# stream, thus letting the backend be aware of the clients address.
#
# Both version 1 and version 2 of the proxy protocol is supported for the
# xrootd door.
#
(one-of?true|false)xrootd.enable.proxy-protocol = false

# Cell address of poolmanager service
xrootd.service.poolmanager=${xrootd.service.poolmanager-space-${xrootd.enable.space-reservation}}
(immutable)xrootd.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)xrootd.service.poolmanager-space-true=${dcache.service.spacemanager}

# Timeout for poolmanager requests
xrootd.service.poolmanager.timeout = 5400000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)xrootd.service.poolmanager.timeout.unit=MILLISECONDS

# Cell address of pnfsmanager service
xrootd.service.pnfsmanager=${dcache.service.pnfsmanager}

# Timeout for pnfsmanager requests
xrootd.service.pnfsmanager.timeout = 120
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|DAYS)\
xrootd.service.pnfsmanager.timeout.unit=SECONDS

# Cell address of gplazma service
xrootd.service.gplazma=${dcache.service.gplazma}

# Timeout for gplazma requests
xrootd.service.gplazma.timeout=30
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)xrootd.service.gplazma.timeout.unit=SECONDS

# Cell address of billing service
xrootd.service.billing=${dcache.topic.billing}

# Timeout for pool communication
xrootd.service.pool.timeout = 15000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)xrootd.service.pool.timeout.unit=MILLISECONDS

# Information for loginbroker registration
xrootd.loginbroker.update-topic=${dcache.loginbroker.update-topic}
xrootd.loginbroker.request-topic=${dcache.loginbroker.request-topic}
xrootd.loginbroker.tags=${dcache.loginbroker.tags}
xrootd.loginbroker.update-period=${dcache.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})\
  xrootd.loginbroker.update-period.unit=${dcache.loginbroker.update-period.unit}
xrootd.loginbroker.update-threshold=${dcache.loginbroker.update-threshold}
xrootd.loginbroker.version=5.0
xrootd.loginbroker.family=${xrootd.loginbroker.family-when-${xrootd.security.tls.mode}}
xrootd.loginbroker.root = ${xrootd.root}

(immutable)xrootd.loginbroker.family-when-OFF=xroot
(immutable)xrootd.loginbroker.family-when-OPTIONAL=xroot,xroots
(immutable)xrootd.loginbroker.family-when-STRICT=xroots

##  This property is a space-separated list of hostnames or IP
##  addresses to publish for this door.  Hostnames are resolved to an
##  IP address on start-up, but not subsequently.  Non-wildcard IP
##  addresses are resolved to canonical name on start-up, but not
##  subsequently.  Wildcard IP addresses (0.0.0.0 or ::) are replaced
##  by a dynamically discovered list of IP addresses, based on which
##  network interfaces are "up".  These are resolved, with the
##  corresponding hostnames cached for a configurable period (see
##  'networkaddress.cache.ttl' system property).  An empty value is
##  equivalent to "0.0.0.0".
xrootd.loginbroker.address = ${xrootd.net.listen}
xrootd.loginbroker.port = ${xrootd.net.port}

# Topic on which to expect pool monitor updates
xrootd.pool-monitor.topic = ${dcache.pool-monitor.topic}

#  ---- Root path of Xrootd door
#
#   Specifies the root directory exposed through the Xrootd door.
#
xrootd.root = ${dcache.root}

#  ---- Allowed paths
#
#   These parameters are set to the absolute paths of directories
#   accessible through Xrootd. Multiple directories are separated by a
#   colon. Different directories may be specified for reads and
#   writes. An empty list will disallow access to all directories.
#
#   The writable paths should likely include any upload directory used
#   by this door (see dcache.upload-directory and
#   gplazma.authz.upload-directory).
#
xrootd.authz.read-paths = /
xrootd.authz.write-paths =

#  ---- Xrootd plugins
#
#   Comma separated list of plugins to inject into the xrootd
#   request processing chain.
#
#   dCache ships with a few plugins:
#
#    gplazma:none - no authentication is performed; user identity is
#                   set to ${xrootd.authz.user} (door only).
#
#    gplazma:gsi  - any xrootd request to the door will use a key-exchange
#                   process to identify the end-user (door only).
#
#    authz:alice-token - ALICE token based authorization plugin.
#    authz:scitokens   - JWT/Scitoken based authorization plugin.
#
#   A gplazma:* authentication plugin is required; use
#   gplazma:none if no authentication is desired. Authorization plugins
#   have to be placed after the authentication plugin.
#
#   Third party plugins can be used by adding the plugin to the plugin
#   directory of dCache and specifying the plugin name here. Note that
#   third party authentication plugins have to be loaded with
#   gplazma:<plugin>.
#
#   NOTE:  the access-log plugin, which generates a dCache style access log
#          using the NetLogger format, is now added automatically.
#
xrootd.plugins=gplazma:none,authz:none

#  ---- User identity used for authorizing operations
#
#   As xrootd requests are not authenticated, an identity has to be
#   chosen for authorizing operations. All operations are performed as
#   this identity.
#
#   The authorization controlled by this parameter is different from
#   the authorization performed by the authorization plugin: The
#   authorization plugin validates the requests themselves
#   independently of the file which is accessed. E.g. the token based
#   authorization verifies that the request contains a
#   cryptographically signed token from a trusted source.
#
#   Once the request is authorized it is subject to further
#   authorization by other components in dCache, e.g. PnfsManager or
#   PoolManager. Those authorizations happen wrt. the identity defined
#   by xrootd.authz.user.
#
#   The default is 'nobody', meaning that only world-permissible
#   operations are allowed. Other valid values are 'root' (no further
#   authorization) and a string on the form UID:GID[,GID...], i.e. a
#   numerical UID followed by one or more numerical GIDs. The first
#   GID is the primary one.
#
xrootd.authz.user = nobody

#   The access level granted to users who supply valid credentials but
#   who are not mapped to a dCache user.  FULL and READONLY allow such
#   users to access dCache as the anonymous user, while NONE rejects
#   such authentication attempts.
#
#   FULL and READONLY differ in how dCache handles requests that could
#   modify content: FULL will make the usual authorisation decisions
#   (e.g., checking the namespace), while READONLY will always fail
#   operations that could modify dCache.
#
(one-of?NONE|READONLY|FULL)xrootd.authz.anonymous-operations = NONE

#  ---- Mover queue
#
#   The mover queue on the pool to which this request will be
#   scheduled.
#
xrootd.mover.queue =

#  ---- Mover queue timeout
#
#   Specifies the timeout in milliseconds after which the xrootd door
#   gives up on waiting for a mover to start. This places a bound on
#   the maximum mover queue time.
#
xrootd.mover.timeout = 180000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)xrootd.mover.timeout.unit=MILLISECONDS

#  ----- Custom kXR_Qconfig responses
#
#   xroot clients may query the server configuration using a
#   kXR_Qconfig request.  These key value pairs can be
#   queried. Additional key value pairs may be added as needed, see
#   the xroot protocol specification at http://xrootd.org/ for
#   details.
#
(prefix)xrootd.query-config = kXR_Qconfig responses
xrootd.query-config!version = dCache ${dcache.version}
xrootd.query-config!sitename = ${dcache.description}
xrootd.query-config!role = none

#  ----- Whether the door passes the xrootd 'tried' cgi to the PoolManager
#
#        This option is used by the xrootd client to indicate to an xroot
#        manager-role server that it wishes to exclude data servers on the
#        given host because a previous attempt to use it failed.
#
#        The list of hosts is ignored by dCache pool selection in the following cases:
#
#        1. when it is not enabled
#        2. when the client has not provided a 'triedrc' (error code giving the reason)
#        3. when the error code is other than 'enoent' (file not found) or 'ioerr'
#
#        It is recommended that if this option is activated, you make sure
#        that all doors and pools that could be used as a third-party copy
#        source support TLS (strict or optional) if the client is to be
#        used with the 'xroots' protocol.  This is because the vanilla xrootd
#        third-party copy will send a retried=<host> back to the door if
#        it expects to use TLS and TLS fails.  When this happen, if the file
#        has replicas only on that host, the client will retry uselessly until it
#        times out.  Otherwise, setting this to false would be advisable.
#
(one-of?true|false)xrootd.enable.tried-hosts=true

#  Signed hash verification ----- see dcache.properties
#
xrootd.security.level=${dcache.xrootd.security.level}
xrootd.security.force-signing=${dcache.xrootd.security.force-signing}

#  TLS OPTIONS
#
#      mode:        whether tls is running and is required
#      login:       start tls right after the protocol handshake
#      session:     start tls after the authentication/login phase
#      tpc:         use TLS on tpc (see below for explanation)
#      data:        protect the data channel if opened (currently not supported)
#      gpf:         protect the GP file (currently not supported)
#
#      NOTE     that the login, session, tpc, data, and gpf options only have a bearing
#               on the endpoint behavior if the mode is set to STRICT.  With OPTIONAL,
#               if the client forces/requests TLS, it is turned on at login; otherwise,
#               TLS is not started.
#
#      The configuration of TLS on the door (and pool) can vary according
#      to requirements.   To illustrate, here are three possible settings
#      which might be commonly used:
#
#      [1]          plugins:gplazma:gsi...
#                   tls.mode=OPTIONAL
#
#                   The client will always be required to login with GSI,
#                   whether it supports TLS or not.  The door will turn on TLS if
#                   requested by the client (i.e., 'xroots://my-xroot-door.example.org/...').
#
#      [2]          plugins:gplazma:gsi...
#                   tls.mode=STRICT
#                   tls.require-session=true
#
#                   If the client does not support TLS, it is refused.
#                   Otherwise, it will login with GSI and then go to TLS.
#
#      [3]          plugins:gplazma:none...
#                   tls.mode=STRICT
#                   tls.require-login=true
#
#                   If the client does not support TLS, it is refused.
#                   Otherwise it will go to TLS before logging in.
#
#                   Of course, given that this latter case does not authenticate,
#                   users will have to be mapped via some authorization mechanism.
#                   This probably is the setting most appropriate for
#                   token authorization.
#
#      Each of the 'require' properties corresponds to an xrootd flag.
#      login includes session, though it is not necessary to set both to
#      true in that case (only login); however, setting both to false is
#      also meaningful if one only wishes to protect, for instance, just data
#      connections (this is not yet supported, but may be in the future).
#
#      The 'require-tpc' flag works slightly differently from the others
#      in that it serves to indicate that clients that do not support TLS
#      cannot do TPC, though they may be allowed to do two-party transfers
#      (provided none of the other flags are set to true).
#
#      Note again that these flags only have meaning when the mode is STRICT.
#
#      Signed hash verification and TLS are held to be mutually exclusive.
#      If TLS is activated, signed hash verification is turned off automatically,
#      whether the server has been set to use it otherwise or not.  TLS is
#      more expensive than hash-signing, but also more secure (hash-signing
#      does not encrypt the actual data; it is simply a more lightweight
#      countermeasure to man-in-the-middle attacks).  Nevertheless,
#      minimal protection may on occasion be preferable to the more expensive
#      option, in which case TLS can be deactivated for the door/pool by
#      setting mode to OFF.
#
(one-of?OFF|OPTIONAL|STRICT)xrootd.security.tls.mode=OFF
(one-of?true|false)xrootd.security.tls.require-login=false
(one-of?true|false)xrootd.security.tls.require-session=false
(one-of?true|false)xrootd.security.tls.require-data=false
(one-of?true|false)xrootd.security.tls.require-tpc=false
(one-of?true|false)xrootd.security.tls.require-gpf=false

(immutable)xrootd.security.ssl-plugins-when-tls-mode-is-OFF=
(immutable)xrootd.security.ssl-plugins-when-tls-mode-is-STRICT=ssl-handler
(immutable)xrootd.security.ssl-plugins-when-tls-mode-is-OPTIONAL=ssl-handler

xrootd.security.ssl-plugins=${xrootd.security.ssl-plugins-when-tls-mode-is-${xrootd.security.tls.mode}}

#
#     Required for the TLS handshake.
#
xrootd.security.tls.hostcert.key=${dcache.authn.hostcert.key}
xrootd.security.tls.hostcert.cert=${dcache.authn.hostcert.cert}
xrootd.security.tls.ca.path=${dcache.authn.capath}
xrootd.security.tls.ca.refresh=${dcache.authn.capath.refresh}
xrootd.security.tls.ca.refresh.unit=${dcache.authn.capath.refresh.unit}
(one-of?GLOBUS_EUGRIDPMA|EUGRIDPMA_GLOBUS|GLOBUS|EUGRIDPMA|GLOBUS_EUGRIDPMA_REQUIRE|EUGRIDPMA_GLOBUS_REQUIRE|GLOBUS_REQUIRE|EUGRIDPMA_REQUIRE|EUGRIDPMA_AND_GLOBUS|EUGRIDPMA_AND_GLOBUS_REQUIRE|IGNORE|${dcache.authn.namespace-mode})\
xrootd.security.tls.ca.namespace-mode=${dcache.authn.namespace-mode}
(one-of?REQUIRE|IF_VALID|IGNORE|${dcache.authn.crl-mode})\
xrootd.security.tls.ca.crl-mode=${dcache.authn.crl-mode}
(one-of?REQUIRE|IF_AVAILABLE|IGNORE|${dcache.authn.ocsp-mode})\
xrootd.security.tls.ca.ocsp-mode=${dcache.authn.ocsp-mode}

#
#     Standard implementation of the tls handler
#
xrootd.security.tls.handler-factory.class=org.dcache.xrootd.plugins.tls.CDCCanlTLSHandlerFactory

#  ----- Per-application io-queues
#
#   xroot protocol allows clients to identify the name of their
#   application.  By default this is the name of the executable (e.g.,
#   xrdcp is "xrdcp") but the xrootd library allows the client to send
#   a different value.  The xrootd.app-ioqueue prefix allows the door
#   to select an io-queue based on this supplied name; the key is the
#   application name and the value is the io-queue name.  For example,
#   with the following definition transfers that involve the xrdcp
#   client will use the "stream" io-queue:
#
#       xrootd.app-ioqueue!xrdcp = stream
#
(prefix)xrootd.app-ioqueue = Per-application io-queue

#
#   Document which TCP ports are opened
#
(immutable)xrootd.net.ports.tcp = ${xrootd.net.port}

# Obsolete properties
(forbidden)xrootd.authz.upload-directory=See gplazma.authz.upload-directory
(obsolete)xrootd.cell.export = See xrootd.cell.consume

#  ---- Kafka service enabled
#
(one-of?true|false|${dcache.enable.kafka})xrootd.enable.kafka = ${dcache.enable.kafka}

# A list of host/port pairs (brokers) host1:port1,host2:port2,....
xrootd.kafka.producer.bootstrap.servers =  ${dcache.kafka.bootstrap-servers}

# Kafka topic name
xrootd.kafka.topic = ${dcache.kafka.topic}


(prefix)xrootd.kafka.producer.configs =  Configuration for Kafka Producer
