#  -----------------------------------------------------------------------
#     Default values for pools
#  -----------------------------------------------------------------------
#
#   This Java properties file contains default values for pool
#   configuration parameters. All values can be redefined in
#   etc/dcache.conf. Do not modify any values here as your changes
#   will be lost when you next upgrade.

# Pool name
(deprecated)name=
pool.name=${name}

# Path to pool directory
(deprecated)path=
pool.path=${path}

#  ---- Mover queues to create on a pool
#
#   Mover queues schedule and execute transfers on a pool. Each mover
#   queue can have individual limits and timeouts. These are
#   configured at runtime through the admin interface.
#
#   Doors can be configured to submit transfers to named queues.
#
#   This property takes a comma separated list of named mover queues.
#   The default mover queue is called 'regular' and is always created.
#   The 'regular' mover queue must not be defined in this property.
#
#   Named queues with names that begin with a hyphen are processed in
#   LIFO order; all other queues are process in FIFO order.
#
(deprecated)poolIoQueue=
pool.queues=${poolIoQueue}

#  ---- Large File Store
#
#   Legacy option for disk only pools. There is usually no need to
#   change this setting as the choice whether to write a file to tape
#   is now controlled by the retention policy of each file.
#
(deprecated,one-of?|volatile|transient|precious|none)lfs=none
(one-of?|volatile|transient|precious|none|${lfs})pool.lfs=${lfs}

#  ---- Maximum amount of space to be used by a pool
#
#   In bytes or 'Infinity'. May also be configured at runtime through
#   the admin interface. If 'Infinity', then the pool size is
#   determined from the size of the file system.
#
(deprecated)maxDiskSpace=Infinity
pool.size=${maxDiskSpace}

#  ---- Pool tags
#
#   White space separated list of key value pairs to associate with a
#   pool.
#
(deprecated)tags=hostname=${host.name}
pool.tags=${tags}

#  ---- Whether to monitor pool health
#
#   If true, then the pool periodically performs a number of health
#   checks and disables itself if an error is detected.
#
(deprecated,one-of?true|false)checkRepository=true
(one-of?true|false|${checkRepository})pool.enable.repository-check=${checkRepository}

# ---- Allow pool to remove precious files on request from cleaner.
#
#   This option is respected only when lfs=none. If lfs=precious then
#   removal of precious files is always allowed.
#
(deprecated,one-of?true|false)allowCleaningPreciousFiles=true
(one-of?true|false|${allowCleaningPreciousFiles})pool.enable.remove-precious-files-on-delete=${allowCleaningPreciousFiles}

# Worker thread pool size. Used by migration module and for pool to pool transfers.
pool.limits.worker-threads=5

# Pool cell name. Currently this has to be the same as the pool name.
pool.cell.name=${pool.name}
pool/cell.name=${pool.cell.name}

# Cell message processing limits
pool.cell.limits.message.threads.min=5
pool.cell.limits.message.threads.max=50
pool.cell.limits.message.threads.max-idle-time=60
pool.cell.limits.message.threads.max-idle-time.unit=SECONDS
pool.cell.limits.message.queue.max=1000
pool.cell.limits.callback.threads.min=5
pool.cell.limits.callback.threads.max=50
pool.cell.limits.callback.threads.max-idle-time=60
pool.cell.limits.callback.threads.max-idle-time.unit=SECONDS
pool.cell.limits.callback.queue.max=1000

#  ---- Do not start the pool until specified paths exists.
#
#   If specified then pool startup procedure will block as long as
#   specified paths does not exists. This is useful to delay pool startup
#   until repository's directory is available.
#
#   Format: [path1][:path2]...[:pathN]
#   For example:
#      waitForFiles=${path}/data
#
(deprecated)waitForFiles=
pool.cell.wait-for-files=${waitForFiles}

#  ---- Which meta data repository implementation to use.
#
#   This selects which meta data repository implementation to use.
#   This is essentially a choice between storing meta data in a large
#   number of small files in the control/ directory, or to use the
#   embedded Berkeley database stored in the meta/ directory.  Both
#   directories are within the pool directory.
#
(deprecated,\
 one-of?org.dcache.pool.repository.meta.file.FileMetaDataRepository|\
        org.dcache.pool.repository.meta.db.BerkeleyDBMetaDataRepository)\
metaDataRepository=org.dcache.pool.repository.meta.file.FileMetaDataRepository
(one-of?org.dcache.pool.repository.meta.file.FileMetaDataRepository|\
        org.dcache.pool.repository.meta.db.BerkeleyDBMetaDataRepository|\
        ${metaDataRepository})\
pool.plugins.meta=${metaDataRepository}

#  ---- Garbage collector used when the pool runs out of space
(deprecated)sweeper=org.dcache.pool.classic.SpaceSweeper2
pool.plugins.sweeper=${sweeper}

#
# Whether to enable RPCSEC_GSS for NFS mover
#
(one-of?true|false)pool.mover.nfs.rpcsec_gss = false

#  ---- Port used for passive DCAP movers
#
#   When zero then a random port from the LAN port range is used.
#
(deprecated)pool.dcap.port=0
pool.mover.dcap.port=${pool.dcap.port}

#  ----- Whether to use memory mapping in FTP mover
#
#   If true, the FTP mover utilizes memory mapping for checksum
#   verification. This potentially improves performance, but may cause
#   compatibility issues on some platforms.
#
(deprecated,one-of?true|false)gsiftpAllowMmap=false
(one-of?true|false|${gsiftpAllowMmap})pool.mover.ftp.mmap=${gsiftpAllowMmap}

#  ----- Distance between transfer and checksum computation in FTP mover
#
#   When the checksum is computed on the fly, the FTP mover performs
#   the checksum calculation in a separate thread. This property
#   indicates the maximum distance in bytes between the transfer and
#   the checksum calculation. If too small then the transfer may be
#   throttled by a slow checksum calculation. If too large then data
#   may have to be read back from disk rather than read from the
#   cache.
#
(deprecated)gsiftpReadAhead=16777216
pool.mover.ftp.read-ahead=${gsiftpReadAhead}

# Whether the FTP mover may accept incoming connections. If not, passive
# FTP connections will use the door as a proxy.
(one-of?true|false)pool.mover.ftp.allow-incoming-connections=true

#  ---- Thread pool size for xrootd disk IO threads
(deprecated)xrootdMoverDiskThreads=20
pool.mover.xrootd.disk-threads=${xrootdMoverDiskThreads}

#  ---- Thread pool size for xrootd socket IO threads.
#
#   If unset the number of CPU cores in the host is used as a default.
#
(deprecated)xrootdMoverSocketThreads=
pool.mover.xrootd.socket-threads=${xrootdMoverSocketThreads}

#  ---- Amount of memory to use for buffering per xrootd connection
#
#   Specified in bytes.
#
(deprecated)xrootdMoverMaxMemoryPerConnection=16777216
pool.mover.xrootd.memory-per-connection=${xrootdMoverMaxMemoryPerConnection}

#  ---- Total amount of memory to use for buffering for xrootd connections
#
#   Specified in bytes.
#
(deprecated)xrootdMoverMaxMemory=67108864
pool.mover.xrootd.memory=${xrootdMoverMaxMemory}

#  ---- Maximum size of an xrootd frame
#
#   Specified in bytes.
#
(deprecated)xrootdMoverMaxFrameSize=2097152
pool.mover.xrootd.frame-size=${xrootdMoverMaxFrameSize}

#  ---- Xrootd plugins
#
#   Comma separated list of plugins to inject into the xrootd
#   request processing chain.
#
#   dCache ships with a few authentication and authorization plugins:
#
#    authn:gsi  - any xrootd request to the door will use a key-exchange
#                 process to identify the end-user (pool only).
#
#    authz:alice-token - ALICE token based authorization plugin.
#
#   The property applies to both the xrootd door and the xrootd mover.
#   The defaults are scoped to the xrootd service and pool service,
#   respectively. Hence the property must either be defined per service
#   or with an explicit scope prefix. See pool.properties for information
#   about xrootd plugins for doors.
#
#   For pools no plugins are required. If an authentication plugin is
#   specified, then note that the subject will *not* be mapped by
#   gPlazma.
#
#   Pools authorize access using a one-time token generated by the door
#   when redirecting the client to the pool. For this reason an
#   authentication or authorization plugin is usually *not* needed
#   on pools.
#
#   Third party plugins can be used by adding the plugin to the plugin
#   directory of dCache and specifying the plugin name here. Authentication
#   and authorization plugins can be loaded as authn:<plugin> and
#   authz:<plugin> respectively.
#
(deprecated)pool/xrootdPlugins=
pool.mover.xrootd.plugins=${xrootdPlugins}

#  ---- Xrootd mover-idle timeout
#
#   Specifies the timeout before clients that connect to the
#   pool request handler but don't open any files will be disconnected.
#
pool.mover.xrootd.timeout.idle=300000
pool.mover.xrootd.timeout.idle.unit=MILLISECONDS


#  ---- Thread pool size for http disk IO threads
(deprecated)httpMoverDiskThreads=20
pool.mover.http.disk-threads=${httpMoverDiskThreads}

#  ---- Thread pool size for http socket IO threads
#
#   If unset the number of CPU cores in the host is used as a default.
#
(deprecated)httpMoverSocketThreads=
pool.mover.http.socket-threads=${httpMoverSocketThreads}

#  ---- Amount of memory to use for buffering per http connection
#
#   Specified in bytes
#
(deprecated)httpMoverConnectionMaxMemory=16777216
pool.mover.http.memory-per-connection=${httpMoverConnectionMaxMemory}

#  ---- Total amount of memory to use for buffering for http connections
#
#   Specified in bytes.
#
(deprecated)httpMoverMaxMemory=67108864
pool.mover.http.memory=${httpMoverMaxMemory}

#  ----- Chunk size in bytes for chunked HTTP packages sent by the server
(deprecated)httpMoverChunkSize=8192
pool.mover.http.chunk-size=${httpMoverChunkSize}

#  ---- HTTP client timeout
#
#   Period after which a client will be disconnected if the
#   connection is idle (not reading or writing)
#
(deprecated)httpMoverClientIdleTimeout=300
pool.mover.http.timeout.idle=${httpMoverClientIdleTimeout}
pool.mover.http.timeout.idle.unit=SECONDS

#  ---- HTTP connect timeout
#
#   Timeout that the mover will wait for a client connect before
#   shutting down
#
(deprecated)httpMoverConnectTimeout=300
pool.mover.http.timeout.connect=${httpMoverConnectTimeout}
pool.mover.http.timeout.connect.unit=SECONDS

# Properties related to communicating with other services
pool.service.pnfsmanager=${dcache.service.pnfsmanager}
pool.service.pnfsmanager.timeout=300
pool.service.pnfsmanager.timeout.unit=SECONDS
pool.service.billing=${dcache.service.billing}
pool.service.pool.timeout=60
pool.service.pool.timeout.unit=SECONDS
pool.service.poolmanager=${dcache.service.poolmanager}
pool.service.poolmanager.timeout=120
pool.service.poolmanager.timeout.unit=SECONDS
pool.service.pinmanager=PinManager
pool.service.pinmanager.timeout=120
pool.service.pinmanager.timeout.unit=SECONDS

#  ---- The cell address to notify after a file was flushed to tape
(deprecated)flushMessageTarget=broadcast
pool.destination.flush-notification=${flushMessageTarget}

#  ---- The cell address to notify with poolup messages
(deprecated)poolupDestination=broadcast
pool.destination.heartbeat=${poolupDestination}

#  ---- The cell address to notify with a replication request on arrival of new files
#
# This will typically be PoolManager or HoppingManager. Leave empty to disable the
# notification.
(deprecated)replicateOnArrival=
pool.destination.replicate=${replicateOnArrival}

#  ---- The ip address to include in the replication request
#
# This will typically be an IP address of a worker node or some other client machine.
#
pool.destination.replicate.ip=

#
#   Document which TCP ports are opened
#
(immutable)pool/net.ports.tcp=${net.wan.port.min}-${net.wan.port.max} ${net.lan.port.min}-${net.lan.port.max}
