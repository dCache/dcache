#  -----------------------------------------------------------------------
#     dCache default values
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@
#
#   Properties prefixed by 'dcache' are either not specific to any
#   particular service, or used by several services. In the former case,
#   the property is annotated with (not-for-services). In the latter case,
#   a similarly named property prefixed by the service type is defined
#   for each service using the property.
#

#  -----------------------------------------------------------------------
#     Parameters related to dCache startup
#  -----------------------------------------------------------------------

# If defined, the UID of the java process will be set.  Notice that
# log files will continue to be generated with the user id that
# invoked the init script. When undefined or left blank, the UID will
# not be changed.
(not-for-services)dcache.user=@dcache.user@

# Type of namespace backend. Legal value is chimera.
(one-of?chimera)dcache.namespace=chimera

# The layout determines which domains to start.
(not-for-services)dcache.layout=${host.name}

# Base directory for layout files
(not-for-services)dcache.layout.dir=${dcache.paths.etc}/layouts

# The layout file describes the domains of a layout
(not-for-services)dcache.layout.uri=file:${dcache.layout.dir}/${dcache.layout}.conf

# Directory for PID files
(not-for-services)dcache.pid.dir=@dcache.pid.dir@

# PID file for daemon wrapper script
(not-for-services)dcache.pid.java=${dcache.pid.dir}/dcache.${dcache.domain.name}-java.pid

# PID file for Java process
(not-for-services)dcache.pid.daemon=${dcache.pid.dir}/dcache.${dcache.domain.name}-daemon.pid

# Directory for log files
(not-for-services)dcache.log.dir=@dcache.log.dir@

# Path to log file
(not-for-services)dcache.log.file=${dcache.log.dir}/${dcache.domain.name}.log

# This variable describes what should be done with an existing log
# file when a domain is started.  The options are either to rename
# LOGFILE to LOGFILE.old so allowing a new log file to be created, or
# to retain the log file and subsequent logging information will be
# appended.
#
(not-for-services,one-of?new|keep)dcache.log.mode=keep

# Logback configuration file
(not-for-services)dcache.log.configuration=file:${dcache.paths.etc}/logback.xml

# Log levels
#
# Log levels for various log output targets. Possible log levels are off, error, warn, info,
# debug and trace. Log levels can also be adjusted at runtime using the log commands in
# the dCache admin shell.
#
# Detailed log configuration can be done in the logback configuration file, logback.xml.
#
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.file=warn
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.pinboard=info
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.remote=off
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.events=off
(not-for-services,one-of?off|error|warn|info|debug|trace|all)dcache.log.level.access=info

# How many days to keep access logs
dcache.log.access.max-history=30

# Host on which the remote log server will run
# relative to this dCache installation
#
(not-for-services)dcache.log.server.host=localhost

# Port on which the remote log server will listen
#
(not-for-services)dcache.log.server.port=9867

# Log formats
#
# These define the log format of various log output targets. For details on the format visit
# http://logback.qos.ch/manual/layouts.html#conversionWord
#
# Detailed log configuration can be done in the logback configuration file, logback.xml.
#
(not-for-services)dcache.log.format.file=%d{dd MMM yyyy HH:mm:ss} \\(%X{cells.cell}\\) [%X{org.dcache.ndc}] %m%n
(not-for-services)dcache.log.format.pinboard=[%t] [%X{org.dcache.ndc}] %m

# Delay, in seconds, between automatic restarts of a crashed domain
(not-for-services)dcache.restart.delay=10

# Directory used for creating the files to surpress automatic restart
(not-for-services)dcache.restart.dir=/tmp

# File used to suppress automatic restart
(not-for-services)dcache.restart.file=${dcache.restart.dir}/.dcache-stop.${dcache.domain.name}

# Java maximum heap size
(not-for-services)dcache.java.memory.heap=512m

# Java maximum direct buffer size
(not-for-services)dcache.java.memory.direct=512m

# Directory where to store heapdumps
(not-for-services)dcache.java.oom.location=${dcache.log.dir}

# Path to heap dump file
(not-for-services)dcache.java.oom.file=${dcache.java.oom.location}/${dcache.domain.name}-oom.hprof

# Extra jar files to add to the class path
(not-for-services)dcache.java.classpath=

#  ---- The Library path
#
#   Can contain .so libraries for JNI.
#
(not-for-services)dcache.java.library.path=${dcache.paths.lib}


#  ---- Java VM options
#
#  Properties that control the options to the Java VM instances.
#
#  There are two kinds of Java virtual machine instances: short-lived
#  and long-lived.
#
#  The short-lived invocations are expected to run as quickly as
#  possible and generally complete within a few seconds.
#
#  The long-lived invocations are the dCache domains.  These will have
#  the same duration as a dCache domain; i.e., many months or years.
#
#  dCache uses different Java options to hint to the JVM that the
#  different invocations have different expected lifetimes; for
#  example, short-lived invocations should favour startup speed over
#  long-term optimisation.
#
#  The JVM options used are dcache.java.options and
#  dcache.java.options.short-lived, both of which include
#  dcache.java.options.common.  In general, these three properties
#  should not be directly reconfigured, but site customisation should
#  be achieved through other properties.  In particular, additional
#  java command-line arguments may be added by configuring either the
#  dcache.java.options.extra or dcache.java.options.short-lived.extra
#  property (or both).

#  This property allows site-specific extra options that are used only
#  for long-lived JVM instances.
#
(not-for-services)dcache.java.options.extra=

#  This property allows site-specific extra options that are used only
#  for short-lived JVM instances.
#
(not-for-services)dcache.java.options.short-lived.extra=

#  This property provides Java command-line arguments for long-lived
#  JVM instances.  Sites should not modify this property, but use the
#  dcache.java.options.extra property to add any site-specific
#  arguments.
#
(not-for-services)dcache.java.options=\
    -server \
    -Xmx${dcache.java.memory.heap} \
    -XX:MaxDirectMemorySize=${dcache.java.memory.direct} \
    -Dsun.net.inetaddr.ttl=${dcache.net.inetaddr.lifetime} \
    -Dorg.globus.tcp.port.range=${dcache.net.wan.port.min},${dcache.net.wan.port.max} \
    -Dorg.dcache.dcap.port=${pool.mover.dcap.port} \
    -Dorg.dcache.net.tcp.portrange=${dcache.net.lan.port.min}:${dcache.net.lan.port.max} \
    -Djava.security.krb5.realm=${dcache.authn.kerberos.realm} \
    -Djava.security.krb5.kdc=${dcache.authn.kerberos.key-distribution-center-list} \
    -Djavax.security.auth.useSubjectCredsOnly=false \
    -Djava.security.auth.login.config=${dcache.authn.jaas.config} \
    -Dzookeeper.sasl.client=false \
    -Dcurator-dont-log-connection-problems=true \
    -XX:+HeapDumpOnOutOfMemoryError \
    -XX:HeapDumpPath=${dcache.java.oom.file} \
    -XX:+UseCompressedOops \
    -javaagent:${dcache.paths.classes}/aspectjweaver-1.8.10.jar \
    ${dcache.java.options.common} \
    ${dcache.java.options.extra}


#  This property provides Java command-line arguments for short-lived
#  JVM instances.  Sites should not modify this property, but
#  configure the dcache.java.options.short-lived.extra property to add
#  any site-specific arguments.
#
(not-for-services)dcache.java.options.short-lived=\
    -client \
    -XX:+TieredCompilation \
    -XX:TieredStopAtLevel=1 \
    ${dcache.java.options.common} \
    ${dcache.java.options.short-lived.extra}


#  This property provides Java command-line arguments for both
#  short-lived and long-lived JVM instances.  In general, sites should
#  not modify this property, but modify either the
#  dcache.java.options.extra property, the
#  dcache.java.options.short-lived.extra property or both properties
#  to add any site-specific arguments.
#
#  Notes:
#     - wantLog4jSetup is used by eu.emi:trustmanager
#
(not-for-services)dcache.java.options.common=\
    -Djava.awt.headless=true \
    -DwantLog4jSetup=n



# Whether to cache the compiled configuration files. If disabled most dCache
# scripts will invoke the dCache boot loader to compile the configuration files.
# When enabled the compiled configuration files are cached and only recompiled
# if any of the input files have changed.
(not-for-services)dcache.config.cache=true

#  -----------------------------------------------------------------------
#     Parameters related to what runs inside a domain
#  -----------------------------------------------------------------------

# A batch file to execute in every domain before services are loaded.
(not-for-services)dcache.domain.preload = file:${dcache.paths.share}/cells/preload.fragment

# Directory containing service batch files (the batch files that start
# dCache cells)
dcache.domain.service.dir = ${dcache.paths.share}/services

# Base URI of service batch files (the batch files that start dCache
# cells). The trailing slash is significant due to how URIs are
# resolved relative to each other.
dcache.domain.service.uri.base = file:${dcache.domain.service.dir}/

# URI to service batch file. A relative URI is resolved by
# searching the plugin directories. If not found, it is resolved
# relative to domain.service.uri.base.
dcache.domain.service.uri = ${dcache.domain.service}.batch

# Default directory to be exported by doors
dcache.root = /

# The 'srm' service(s) and the 'srmmanager' service(s) cooperate to
# provide support for the SRM protocol.  These services need a
# consistent configuration of their root directory.
dcache.srm-root = ${dcache.root}

# Reporting from pools concerning broken files
dcache.corrupt-file.topic=CorruptFileTopic

# A credential service provides a mechanism for clients to delegate their credentials.
# Such a service is usually not a fullblown dCache service. Rather, the delegation
# facility is often embedded in an SRM door.
#
dcache.credential-service.topic = CredentialServiceTopic
dcache.credential-service.timeout = 20
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
  dcache.credential-service.timeout.unit = SECONDS

# Pool monitor is part of pool manager. Pool monitor maintains information about all
# pools, the pool selection configuration, and can perform pool selection based on
# this information.
#
# Various services subscribe to snapshots of the pool monitor on this topic.
#
dcache.pool-monitor.topic = PoolMonitorTopic

# Period of periodic pool monitor updates being published
#
# As long as no structural changes are made to its state, pool manager changes are
# published periodically. This disseminates non structural changes such as the
# last pool heartbeat and the current cost metrics.
#
dcache.pool-monitor.update-period = 30
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
dcache.pool-monitor.update-period.unit = SECONDS

# The maximum frequency at which to publish updates.
#
# When structural changes are made to the pool monitor, e.g. because pools go online
# or offline or because the pool selection configuration is changed, the updated pool
# monitor is published right away. This setting allows the rate of such updates to
# be limited such that multiple changes can be included in the same update.
#
dcache.pool-monitor.max-updates-per-second = 2.0

#  -----------------------------------------------------------------------
#     Common network related parameters
#  -----------------------------------------------------------------------

# Port range used for transfers using typical WAN protocols
(not-for-services)dcache.net.wan.port.min = 20000
(not-for-services)dcache.net.wan.port.max = 25000

# Port range used for transfers using typical LAN protocols
(not-for-services)dcache.net.lan.port.min = 33115
(not-for-services)dcache.net.lan.port.max = 33145

# Java DNS cache (seconds)
(not-for-services)dcache.net.inetaddr.lifetime = 1800

#
#   Various components can bind to a particular network interface.  The value of
#   the dcache.net.listen property describes which interface a door should use.
#   The value is the IP address of the interface the component should use; for
#   example, the loop-back interface (commonly 'lo') is '127.0.0.1' for IPv4,
#   '::1' for IPv6.
#
#   The address '0.0.0.0' listens on all interfaces for IPv4
#   connections and '::' listens on all interfaces for IPv6
#   connections (depending on the platform, an IPv4 address may be
#   converted to the equivalent IPv6 address and match '::'). If left blank
#   the service will listen on all interfaces.
#
#   If a hostname is specified, the name is resolved to an address and the service
#   binds to that interface. When publishing this interface to SRM or the info
#   service, this name is used as is. Therefore it is advised to use an FQDN. If
#   an address is specified, reverse lookup to obtain the FQDN is performed.
#
#   In addition to the "normal" FQDN (a DNS A/AAAA record), some hosts
#   have a single alias FQDN (e.g., a CNAME record) that points to the
#   normal FQDN.  If clients are expected to use the alias FQDN then
#   that alias FQDN must be specified.
#
dcache.net.listen =

#  -----------------------------------------------------------------------
#          Cell Communication
#  -----------------------------------------------------------------------

#  ---- Which message broker implementation to use
#
#   Selects between various message brokers. The message broker
#   determines how dCache domains communicate with each other. Valid
#   values are:
#
#   'none' no broker connection is establish. This is used for single
#   domain deployments.
#
#   'core' domains are message brokers that forward messages on behalf
#   of satellite domains. All domains connect to all core domains.
#   There may be more than one core domain.
#
#   'satellite' domains connect to all broker domains.
#
(not-for-services,one-of?none|core|satellite)\
dcache.broker.scheme = satellite

#  ---- Broker for interdomain communication
#
#   dCache domains are grouped into core domains and satellite domains.
#   Core domains act as message brokers for other domains. They listen
#   for TCP connections from other domains on the port specified by
#   dcache.broker.plain.port.
#
(deprecated,not-for-services)dcache.broker.port = 11111
(not-for-services)dcache.broker.plain.port = ${dcache.broker.port}
(not-for-services)dcache.broker.tls.port = 11112

#  ---- Interdomain communication: core domain client encryption support
#
#   Along with accepting cell messages on plain and tls mode, a CoreDomain
#   also connects to other available CoreDomains as a client. With this
#   property, a core domain can be configured to use one of plain-text (none)
#   or encrypted(tls) connections when connecting to other.
(not-for-services,one-of?none|tls)\
dcache.broker.core.client.channel.security=none

#  ---- Interdomain communication: satellite domain encryption support
#
#   A Satellite domain can be configured to connect using one of
#   plain-text(none) or encryted(tls) connections. It can operate
#   in only plain-text or encrypted mode, but not both.
(not-for-services,one-of?none|tls)\
dcache.broker.satellite.channel.security = none


#  -----------------------------------------------------------------------
#  ---- X509 Key and certificates for establishing secure tunnel connection
#  -----------------------------------------------------------------------
# ---- Host private key in PEM format
dcache.broker.channel.credential.key = ${dcache.authn.hostcert.key}

# ---- Tunnel certificate in PEM format
dcache.broker.channel.credential.cert = ${dcache.authn.hostcert.cert}

#  ---- Directory containing trusted CA certificates
dcache.broker.channel.capath = ${dcache.authn.capath}

#  -----------------------------------------------------------------------
#   ZooKeeper client properties
#
#   ZooKeeper is a distributed coordination service required by dCache.
#   dCache uses it to discover domains and services, exchange
#   configuration, and to coordinate services.
#
#   Although ZooKeeper can be embedded into dCache as a service, it is
#   strongly recommended that a production setup uses an independent
#   ZooKeeper instance, either a standalone single node instance or a
#   redundant multi-node instance (three or five nodes are recommended for
#   such a setup).
#
#   dCache does not use ZooKeeper internal permission handling / ACLs.
#   Therefore, sites that have a dedicated ZooKeeper instance for
#   dCache may disable ACL support (the 'skipACL' option), which the
#   ZooKeeper documentation claims will yield some performance
#   benefits.
#
#   Each dCache domain will connect to the ZooKeeper cluster; in
#   particular, the same dCache node can run multiple domains, each of
#   which will connect to the ZooKeeper cluster.  ZooKeeper limits the
#   number of concurrent connections from the same IP address (see
#   'maxClientCnxns' configuration parameter).  Sites should review
#   this limit to ensure there is no problem.
#
#  -----------------------------------------------------------------------

#  --- ZooKeeper connection string
#
#    Usually a comma separated list of host:port pairs.
#
dcache.zookeeper.connection = localhost:2181

#  --- Number of times to retry a ZooKeeper operation before failing
dcache.zookeeper.max-retries = 3

#  --- Initial delay before retrying after a failure
#
#    The delay is increased exponentially for repeating failures.
#
dcache.zookeeper.initial-retry-delay = 1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
dcache.zookeeper.initial-retry-delay.unit = SECONDS

#  --- Timeout for connecting to the ZooKeeper server
dcache.zookeeper.connection-timeout=15
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
dcache.zookeeper.connection-timeout.unit = SECONDS

#  --- Requested session lifetime
#
#  A ZooKeeper session expires if it doesn't receive a heartbeat for
#  this amount of time.
dcache.zookeeper.session-timeout=60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
dcache.zookeeper.session-timeout.unit = SECONDS

#  -----------------------------------------------------------------------
#          Cell addresses of dCache services
#  -----------------------------------------------------------------------
#
#   These are the default addresses used by other services to talk to
#   a particular dCache service. Commonly there is only a single instance
#   (possibly replicated) of these services in dCache, although it is
#   possible to create multiple logical services too.
#
#   Typically the named queues are used as addresses, although it is
#   legal to use a fully qualified cell address too.
#
dcache.service.alarms = ${alarms.cell.name}
dcache.service.acm = acm
dcache.service.pnfsmanager = ${dcache.queue.pnfsmanager}
dcache.service.poolmanager = ${dcache.queue.poolmanager}
dcache.service.gplazma = ${dcache.queue.gplazma}
dcache.service.spacemanager = ${dcache.queue.spacemanager}
dcache.service.pinmanager = ${dcache.queue.pinmanager}
dcache.service.transfermanager = ${transfermanagers.cell.name}
dcache.service.topo = ${dcache.queue.topo}
dcache.service.info = ${dcache.queue.info}
dcache.service.srmmanager = ${dcache.queue.srmmanager}
dcache.service.history = history


#  -----------------------------------------------------------------------
#          Named queues
#  -----------------------------------------------------------------------
#
#   Named queues are used by message producers and message consumers.
#   One or more producers may write messages to a named queue, and one or
#   more consumers may read messages from a named queue. In contrast to
#   topics, a message on a named queue is only received by a single consumer.
#
#   Commonly central services in dCache consume from a well known queue
#   while other services write to that queue. In this manner services are
#   decoupled from each other as they only know the shared named queue.
#
#   In case of replicable services, multiple service of the same logical
#   service consume from a common named queue.
#
#   The names here must be simple names - fully qualified addresses are
#   not allowed.
#
dcache.queue.info = info
dcache.queue.pnfsmanager = PnfsManager
dcache.queue.gplazma = gPlazma
dcache.queue.topo = topo
dcache.queue.srmmanager = SrmManager
dcache.queue.pinmanager = PinManager
dcache.queue.spacemanager = SpaceManager
dcache.queue.poolmanager = PoolManager
dcache.queue.billing = billing

#  -----------------------------------------------------------------------
#          Topics
#  -----------------------------------------------------------------------
#
#   Topics are used by message publishers and message subscribers. One or
#   more publishers may write messages to a topic, and one or more
#   subscribers may read messages from a topic. In contrast to named
#   queues, a message on a topic is received by all subscribers.
#
#   The publish-subscribe paradigm realized by topics is analogous to
#   multicasting in networking.
#
#   The topics here must be simple names - fully qualified addresses are
#   not allowed.
#
#   Note: Currently not all topics are defined like this.
#

# Monitoring services ping on this topic to discover services to monitor
dcache.topic.watched = WatchedServiceTopic

# Pools announce their presence, mode and load on this topic
dcache.topic.pool-heartbeat = PoolUpTopic

# Services publish billing records on this topic
dcache.topic.billing = BillingTopic

# Upload cancelations are announced on this topic
dcache.topic.upload-cancelled = UploadCancelledTopic

#  ---- Topic for loginbroker update
#
# Doors periodically publish information about themselves on this topic, and other
# services subscribe to this topic to discover doors.
#
dcache.loginbroker.update-topic = LoginBrokerTopic

#  ---- Topic for requesting loginbroker updates
#
# Doors that publish loginbroker information subscribe to this topic to receive
# update requests. Services that want to discover doors on demand publish a request
# on this topic.
#
dcache.loginbroker.request-topic = LoginBrokerRequestTopic

#  ---- Tags doors will publish
#
# Tags allow subscribers of loginbroker information to filter doors. The tags are
# published as part of the information sent to the loginbroker topic, and collected
# by subscribers such as the info service. Typical use cases are to restrict the
# doors that are used by srm or published by the info-provider. See srm.protocols.tags
# for further details.
#
dcache.loginbroker.tags = glue,srm

#  ---- How often a door publishes loginbroker information
#
#   The time between two regular loginbroker updates.
#
dcache.loginbroker.update-period = 5
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.loginbroker.update-period.unit = SECONDS

#  ---- Threshold for load changes in a door to trigger loginbroker updates
#
#   The loginbroker information published by doors contains information about
#   the current load of a door. If the load changes rapidly, then a
#   door may updates its registration before the next scheduled update
#   time. This parameter specifies the fraction of the load that
#   triggers an update.
#
dcache.loginbroker.update-threshold = 0.1


#  -----------------------------------------------------------------------
#          Common authentication properties
#  -----------------------------------------------------------------------

#  ---- Delegation key pair reuse lifetime
#
#  X.509 clients may delegate credentials to dCache using GSI or the dedicated GridSite
#  delegation service. The delegation works by the server generating a certificate
#  signing request which the client signs. Since generating a key pair as part of the
#  signing request is expensive, dCache caches and reuses the key pair.
#
#  This setting controls for how long a key pair is reused. A compromised key could be used
#  for new signing requests for this amount of time. If the reuse time is too short, the
#  overhead of generating new key pairs increases.
#
dcache.authn.gsi.delegation.cache.lifetime = 30000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
dcache.authn.gsi.delegation.cache.lifetime.unit = MILLISECONDS

#  ---- Kerberos realm
#
#  Your kerberos 5 realm, used by Kerberos dcap and FTP doors.
#  Leaving this value not set will force dCache to use /etc/krb5.conf.
#
(not-for-services)dcache.authn.kerberos.realm =

#  ---- Kerberos key distribution center
#
#  A comma-separated list of KDC hostnames.  localhost may be used if
#  a KDC multiplexer is running on the same machine as the Kerberos FTP doors.
#  Leaving this value not set will force dCache to use /etc/krb5.conf.
#
dcache.authn.kerberos.key-distribution-center-list =

#  ----- JAAS configuration file
#
#  Template JAAS configuration files are available in the
#  share/examples/kerberos directory as jgss.conf and jgss_host.conf.
#  Please copy these files into ${dcache.paths.etc} and modify their
#  content as appropriate.  The minimum configuration is to change
#  the principle value, replacing "door.example.org" with the FQDN of
#  the door and replacing "EXAMPLE.ORG" with the Kerberos Realm.
#
#  The file jgss.conf is suitable for a domain running a Kerberos FTP
#  door and jgss_host.conf is suitable for a domain running a Kerberos
#  dcap door.  Only one file may be specified per domain.
#
dcache.authn.jaas.config = ${dcache.paths.etc}/jgss.conf
#dcache.authn.jaas.config=${dcache.paths.etc}/jgss.conf
#dcache.authn.jaas.config=${dcache.paths.etc}/jgss_host.conf


# ---- Host private key in PEM format
dcache.authn.hostcert.key = ${dcache.paths.grid-security}/hostkey.pem

# ---- Host certificate in PEM format
dcache.authn.hostcert.cert = ${dcache.paths.grid-security}/hostcert.pem

# ---- Host certificate refresh period
#
# This option influences in which intervals the host certificate will be
# reloaded on a running door.
#
dcache.authn.hostcert.refresh = 60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.authn.hostcert.refresh.unit = SECONDS

#  ---- Verification of the issuer chain of the host certificate
#
#  This can have advantages and disadvantages. If the used host certificates
#  are in a Grid environment, where they are supposed to be signed by trusted
#  CA certificates, setting this to true establishes a fail-fast behaviour.
#
#  If the certificates are self-signed or signed by a custom-CA, this value
#  should be set to false.
#
(one-of?true|false)dcache.authn.hostcert.verify=true

#  ---- Directory containing trusted CA certificates
dcache.authn.capath = ${dcache.paths.grid-security}/certificates

# ---- CA certificates refresh period
#
# Grid-based authentication usually requires to load a set of
# certificates that are accepted as certificate authorities. This
# option influences in which interval these trust anchors are
# reloaded.
#
dcache.authn.capath.refresh = 60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)dcache.authn.capath.refresh.unit = SECONDS

# ---- Path to vomsdir directory
#
# Contains attribute validation information for authorized VOMS servers
dcache.authn.vomsdir=${dcache.paths.grid-security}/vomsdir

# ---- Certificate Authority Namespace usage mode
#
# A CA namespace restricts the certificates dCache accepts as issued by a given CA. The namespace
# is defined in .namespaces (EURGIDPMA) or .signing_policy (GLOBUS) files alongside the CA certificate.
#
# This setting controls the rules governing the verification of these namespaces. The following
# documentation is copied from the EMI CANL library used by dCache.
#
#	GLOBUS_EUGRIDPMA
#
#	   A Globus EACL is checked first. If found for the issuing CA then it is used and enforced.
#	   If not found then EuGridPMA namespaces definition is searched. If found for the issuing CA
#	   then it is enforced.
#	   If no definition is present then namespaces check is considered to be passed.
#
#	EUGRIDPMA_GLOBUS
#
#	   An EuGridPMA namespaces definition is checked first. If found for the issuing CA then it is enforced.
#	   If not found then Globus EACL definition is searched. If found for the issuing CA
#	   then it is enforced.
#	   If no definition is present then namespaces check is considered to be passed.
#
#	GLOBUS
#
#	   A Globus EACL is checked only. If found for the issuing CA then it is used and enforced.
#	   If no definition is present then namespaces check is considered to be passed.
#
#	EUGRIDPMA
#
#	   An EuGridPMA namespaces definition is checked only. If found for the issuing CA then it is enforced.
#	   If no definition is present then namespaces check is considered to be passed.
#
#	GLOBUS_EUGRIDPMA_REQUIRE
#
#	   A Globus EACL is checked first. If found for the issuing CA then it is used and enforced.
#	   If not found then EuGridPMA namespaces definition is searched. If found for the issuing CA
#	   then it is enforced.
#	   If no definition is present then namespaces check is considered to be failed.
#
#	EUGRIDPMA_GLOBUS_REQUIRE
#
#	   An EuGridPMA namespaces definition is checked first. If found for the issuing CA then it is enforced.
#	   If not found then Globus EACL definition is searched. If found for the issuing CA
#	   then it is enforced.
#	   If no definition is present then namespaces check is considered to be failed.
#
#	GLOBUS_REQUIRE
#
#	   A Globus EACL is checked only. If found for the issuing CA then it is used and enforced.
#	   If no definition is present then namespaces check is considered to be failed.
#
#	EUGRIDPMA_REQUIRE
#
#	   An EuGridPMA namespaces definition is checked only. If found for the issuing CA then it is enforced.
#	   If no definition is present then namespaces check is considered to be failed.
#
#	EUGRIDPMA_AND_GLOBUS
#
#	   Both EuGridPMA namespaces definition and Globus EACL are enforced for the issuer.
#	   If no definition is present then namespaces check is considered to be passed.
#
#	EUGRIDPMA_AND_GLOBUS_REQUIRE
#
#	   Both EuGridPMA namespaces definition and Globus EACL are enforced for the issuer.
#	   If no definition is present then namespaces check is considered to be failed.
#
#	IGNORE
#
#	   CA namespaces are fully ignored, even if present.
#
(one-of?GLOBUS_EUGRIDPMA|EUGRIDPMA_GLOBUS|GLOBUS|EUGRIDPMA|GLOBUS_EUGRIDPMA_REQUIRE|EUGRIDPMA_GLOBUS_REQUIRE|GLOBUS_REQUIRE|EUGRIDPMA_REQUIRE|EUGRIDPMA_AND_GLOBUS|EUGRIDPMA_AND_GLOBUS_REQUIRE|IGNORE)\
dcache.authn.namespace-mode=EUGRIDPMA_AND_GLOBUS_REQUIRE

# ---- Certificate Revocation List usage mode
#
# CAs regularly publish certificate revocation lists (CRLs) containing the serial id of
# certificates that have been revoked. Such certificates should not be accepted by dCache.
#
# Such CRLs are stored in .r? files alongside the CA certificate. It is outside the scope
# of dCache to refresh the CRLs.
#
# This setting controls how dCache makes use of such CRLs. The following documentation is copied
# from the EMI CANL library used by dCache.
#
#	REQUIRE
#
#	   A CRL for CA which issued a certificate being validated
#	   must be present and valid and the certificate must not be on the list.
#
#	IF_VALID
#
#	   If a CRL for CA which issued a certificate being validated
#	   is present and valid then the certificate must not be listed on the CRL.
#	   If the CRL is present but it is outdated (or anyhow else corrupted) then the validation fails.
#	   If CRL is missing then validation is successful.
#
#	IGNORE
#
#	   CRL is not checked even if it exists.
#
(one-of?REQUIRE|IF_VALID|IGNORE)\
dcache.authn.crl-mode=REQUIRE

# ---- On-line Certificate Status Protocol usage mode
#
# On-line Certificate Status Protocol (OCSP) is an alternative to CRLs in which
# dCache consults an external service to check the validity of a particular certificate.
#
# This setting controls how dCache makes use of this protocol. The following documentation is copied
# from the EMI CANL library used by dCache.
#
#	REQUIRE
#
#	   Require, for each checked certificate, that at least one valid OCSP responder is defined and
#	   that at least one responder of those defined returns a correct certificate status.
#	   If all OCSP responders return error or unknown status, the last one received is treated as a
#	   critical validation error.
#	   Not suggested, unless it is guaranteed that well configured responder(s) is(are) defined
#	   and can handle all queries without timeouts.
#
#	IF_AVAILABLE
#
#	   Use OCSP for each certificate if a responder is available. OCSP 'unknown' status and
#	   query errors (as timeout) do not cause the validation to fail.
#	   Also a lack of defined responder doesn't cause the validation to fail.
#
#	IGNORE
#
#	   Do not use OCSP.
#
#
# Although OCSP lookups are cached for an hour, the refresh when the cache expires blocks new
# client requests. In case of networks problems such refresh would block connections until the
# TCP connection of the refresh times out.  For this reason the default is IGNORE.
#
(one-of?REQUIRE|IF_AVAILABLE|IGNORE)\
dcache.authn.ocsp-mode=IGNORE


# ---- Flags to disable ciphers
#
#   Comma separated list of flags related to ciphers.  The following
#   flags are understood:
#
#   DISABLE_EC
#
#   Support for certain Elliptic Curve Diffie Hellman (ECDH) ciphers
#   is broken with some versions of OpenJDK 7 on Linux; the problem
#   may also affect some versions of OpenJDK 8.
#
#   The cause is the natively library security-provider (libnss3) only
#   supporting a small subset of the ECDH-backed ciphers while OpenJDK
#   believes all are supported.  If, during the TLS handshake, the
#   client and OpenJDK negotiated an ECDH cipher that libnss3 does not
#   support then the handshake will fail with a
#   CKR_DOMAIN_PARAMS_INVALID message.
#
#   Specifying DISABLE_EC will prevent dCache from selecting any
#   ECDH-backed cipher during the handshake.  In some cases, this
#   could result in a less secure cipher.
#
#   The problem is not due to OpenJDK code-base itself but rather from
#   how it is packaged by various distributions.  Different
#   distributions may have fixed this problem, but with different
#   versions.
#
#   You can check whether your installation of Java is affected by
#   starting dCache without DISABLE_EC and running a command like:
#
#       openssl s_client -connect srm.example.org:8445 -key ~/.globus/userkey.pem \
#           -cert ~/.globus/usercert.pem -cipher ECDHE-RSA-DES-CBC3-SHA
#
#   If the output includes:
#
#        SSL-Session:
#           Protocol  : TLSv1.2
#           Cipher    : ECDHE-RSA-DES-CBC3-SHA
#
#   then your distribution supports one of the problematic ciphers and
#   DISABLE_EC is not needed.
#
#   If, after the command, dCache logs "SSL handshake with [..]
#   failed: no cipher suites in common" then your distribution has
#   removed support for the problematic ciphers (possibly all ECDH
#   ciphers) and DISABLE_EC is not needed.
#
#   If, after the operation, the domain log includes a
#   "CKR_DOMAIN_PARAMS_INVALID" error then your Java requires the
#   DISABLE_EC.
#
#
#   DISABLE_RC4
#
#   RC4 (Rivest Cipher 4) is a stream cipher that may be used to
#   secure a TLS or GSI connection.  RC4 has several potential
#   attacks, is widely considered weak and, for certain uses, broken.
#
#   Java 8u51 has made RC4 deprecated: it is only used if no non-RC4
#   is available.
#
#   By specifying DISABLE_RC4, dCache prevents RC4 from being used
#   under any circumstances, as required by RFC 7465.
#
(any-of?DISABLE_EC|DISABLE_RC4)dcache.authn.ciphers = DISABLE_EC,DISABLE_RC4

#  ---- Whether to overwrite existing files on upload
#
#   The following property affects FTP doors, WebDAV doors and the SRM.
#   For dcap see the dcap.authz.truncate property.  For xrootd, the policy is
#   controlled by the client. Note that setting the property to false
#   will break standards compliance.
#
(one-of?true|false)dcache.enable.overwrite = true

#  ---- Whether space reservation should be supported.
#
#   Whether to support space reservations in this dCache instance. This
#   controls whether services expect a spacemanager service to operate. Unless
#   you disable this feature, you must instantiate the spacemanager service by adding it
#   to the layout file on one of the dCache nodes (preferably in the same
#   domain as the poolmanager service).
#
(one-of?true|false)dcache.enable.space-reservation=true

#  ---- Upload directory
#
#   Some protocols (currently just SRM) allow a client to upload a file and, once
#   satisfied with the file's contents, make the new or updated file "live" in an
#   atomic operation. Such uploads may be aborted before the final step without
#   there being any noticeable effect for other users.
#
#   To achieve this, dCache will point clients to upload files beneath the
#   dcache.upload-directory directory, which must be owned by root and have
#   permission mask 711.  The directory is created automatically if it does not
#   exist and must be accessible through all doors used for SRM uploading.
#
#   If this property is set to an absolute path, it is interpreted as an absolute
#   path in dCache's name space. If this directory is not exposed by a door, that
#   door cannot be used for upload by SRM. This would happen if a non-default root
#   directory has been defined for a door, or if a non-default root directory
#   has been defined for users.
#
#   There are three ways to resolve this problem:
#
#   - Change dcache.upload-directory to a directory that is within a part of
#     the name space exposed by all doors needed for SRM and for all accounts
#     using SRM. E.g. if
#
#           /pnfs/example.org/data
#
#     is the root of all your doors and all your accounts, then setting
#
#           dcache.upload-directory = /pnfs/example.org/data/upload
#
#     is the best solution. This needs to be done for pnfsmanager and all
#     doors.
#
#     If accounts have individual root directories, then this solution may not
#     be suitable.
#
#   - Add additional FTP doors for the SRM configured with
#
#        ftp.root = /
#
#     or
#
#        ftp.root = ${ftp.authz.upload-directory}
#
#     This will expose the upload directory and SRM will automatically
#     prefer these for uploads. This could be done in the same domain as
#     existing doors using a non-standard TCP port.
#
#   - Defined a relative upload directory. If this property is defined to
#     a relative path, it is interpreted relative to the account's root
#     directory. It will thus appear in the name space exposed by the FTP
#     door. There are two downsides to this:
#
#       * The upload directory may conflict with user files and directories.
#
#       * There will be several upload directories scattered throughout the
#         name space. This may make it more difficult to clean up in case
#         dCache fails to remove temporary upload directories.
#
#   This directory should likely be added to any options that impose further path-
#   based access restrictions on doors, if these options are used, for example:
#   wedav.authz.allowed-paths and xrootd.authz.write-paths
#
dcache.upload-directory=/upload

#  -----------------------------------------------------------------------
#          Database Configuration
#  -----------------------------------------------------------------------
#
#   The current setup assumes that one or more PostgreSQL servers are
#   used by the various dCache components.  Database user and database
#   password are configurable. The dCache components use several databases,
#   which might be located on separate hosts.
#
#   The most performant configuration is to have the database server
#   running on the same host as the dCache component that will
#   access it.  Therefore, the default value for all the following
#   variables is 'localhost'.  Uncomment and change these variables
#   only if you have a reason to deviate from this scheme.
#
#   For example, one valid deployment would be to put the 'billing'
#   database on different host than the pnfs server database and
#   companion, but keep the httpDomain on the admin host.

#  ---- Whether to manage database schemas automatically
#
#   When true, database schemas will be automatically updated when
#   needed. Not all services support this setting. This settings
#   applies to a complete domain and must not be defined at the
#   service level.
#
(one-of?true|false)dcache.db.schema.auto=true

#  ---- Default host of RDBMS used by various services.
#
#   Various services need an RDBMS. Each service is recommended to use its
#   own logical database, but these may or may not be hosted in the same RDBMS
#   instance. This setting defines the host of the RDBMS used.
#
#   With postgresql, a comma separated list of servers in a postgresql cluster
#   is accepted. dCache automatically connects to the current master server.
#
dcache.db.host = localhost

#  ---- Default RDBMS user account by various services.
#
dcache.db.user = dcache

#  ---- Default password of RDBMS used by various services.
#
dcache.db.password =

#  ---- Default password file for RDBMS used by various services.
#
#   Follows the format of the PostgreSQL pgpass file format. Avoids putting
#   the passwords in the dCache configuration files.
#
dcache.db.password.file =


#  -----------------------------------------------------------------------
#       Tape protection
#  -----------------------------------------------------------------------
#
#   The    tape   protection    feature   is    only    available   if
#   dcache.authz.staging  is   defined,   and  there  is  a
#   similarly  named file  containing a  list of  FQANs and  DNs whose
#   owners are allowed to stage files (i.e., to read files from dCache
#   that are stored only on tape).
#
#   Stage configuration can  be provided either on the  door or on the
#   PoolManager as described in the following two cases below:
#
#      1) stage configuration provided on the door
#         (remember to repeat the same configuration on each door):
#         dcache.authz.staging.pep=doors
#      2) stage configuration provided on the PoolManager:
#         dcache.authz.staging.pep=PoolManager
#
dcache.authz.staging =
(one-of?doors|PoolManager)dcache.authz.staging.pep = doors

#  A short, human readable description of this dCache instance.  This
#  is used as a default value when describing this dCache instance in
#  GLUE (see 'info-provider.se-name' property), in webdav directory
#  listings (see 'webdav.templates.config!header_text' property) and
#  in webadmin (see 'httpd.html.dcache-instance-description'
#  property).
#
dcache.description =


#  -----------------------------------------------------------------------
#         Macaroon support
#  -----------------------------------------------------------------------
#
#  Macaroons are bearer tokens.  Any authenticated client may request
#  a macaroon, which any client can then use to interact with dCache
#  (as that user) without any other credential.  These tokens are
#  time-limited and may be restricted to certain activity and to
#  certain parts of dCache namespace.  One of the benefits of
#  macaroons is they support autonomous delegation to third-parties
#  with reduced authorization.
#
#  Macaroons are also light-weight in terms of time for creation and
#  storage requirements: typical creation time is a few milliseconds
#  and they require no storage within dCache.  Therefore, in many
#  cases, it is practical to create a macaroon for a very short period
#  -- even a macaroon per request.
#
(one-of?true|false)dcache.enable.macaroons = true

#  The secrets that are used to create and verify a macaroon are
#  time-limited, to reduce the impact should they be discovered.  This
#  property controls how often dCache will remove expired macaroon
#  secrets.
#
dcache.macaroons.expired-removal-period = 5
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
dcache.macaroons.expired-removal-period.unit = MINUTES

#  The maximum lifetime of a macaroon.  Clients can request a macaroon
#  that has a shorter lifetime.
#
dcache.macaroons.max-lifetime = 7
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
dcache.macaroons.max-lifetime.unit = DAYS

#  The default lifetime of a macaroon.  Clients that do not specify
#  their desired lifetime will receive a macaroon with this validity.
#
dcache.macaroons.default-lifetime = 1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
dcache.macaroons.default-lifetime.unit = DAYS



#  -----------------------------------------------------------------------
#         Provide information about message broker
#  -----------------------------------------------------------------------
#
#   The following properties provide information about the broker
#   domain.  The actual domain is defined by dcache.broker.domain.
#
(immutable)dcache.net.ports.tcp-when-scheme-is-none=
(immutable)dcache.net.ports.udp-when-scheme-is-none=

## FIXME -- need to query ZooKeeper to discover what core is supposed to support.
(immutable)dcache.net.ports.tcp-when-scheme-is-core=(${dcache.broker.plain.port}) (${dcache.broker.tls.port})
(immutable)dcache.net.ports.udp-when-scheme-is-core=

(immutable)dcache.net.ports.tcp-when-scheme-is-satellite=
(immutable)dcache.net.ports.udp-when-scheme-is-satellite=

(immutable)dcache.net.ports.tcp=${dcache.net.ports.tcp-when-scheme-is-${dcache.broker.scheme}}
(immutable)dcache.net.ports.udp=${dcache.net.ports.udp-when-scheme-is-${dcache.broker.scheme}}

# OpenID Connect hostnames
#
# Space separated list of multiple hostnames
# e.g.
# dcache.oidc.hostnames = accounts.google.com   idc-iam.example.org  openidconnect.ebay.com   login.salesforce.com
#
dcache.oidc.hostnames =

#  -----------------------------------------------------------------------
#  ---- Unused properties
#  -----------------------------------------------------------------------
(obsolete)dcache.broker.client.port = Location manager now uses ZooKeeper
(obsolete)dcache.broker.cells.config = See dcache.broker.scheme
(obsolete)dcache.broker.messaging.port = Use dcache.broker.plain.port
(obsolete)dcache.authn.gsi.crl.cache.lifetime = No longer configurable
(obsolete)dcache.service.copymanager =

(obsolete)dcache.broker.host = See dcache.zookeeper.connection
(obsolete)dcache.zookeeper.net.port = See dcache.zookeeper.connection
(obsolete)dcache.broker.domain = See dcache.broker.scheme
(obsolete)dcache.service.billing = See dcache.queue.billing and dcache.topic.billing
(obsolete)dcache.enable.replica = The replica service has been removed; use resilience instead.
(obsolete)dcache.service.replica = The replica service has been removed; use resilience instead.
(obsolete)dcache.service.broadcast = The broadcast service has been removed.

#  -----------------------------------------------------------------------
#  ----   Default Access Latency and Retention Policy
#  -----------------------------------------------------------------------

(one-of?ONLINE|NEARLINE)dcache.default-access-latency=NEARLINE
(one-of?CUSTODIAL|REPLICA|OUTPUT)dcache.default-retention-policy=CUSTODIAL
dcache.plugins.storage-info-extractor = org.dcache.chimera.namespace.ChimeraOsmStorageInfoExtractor
