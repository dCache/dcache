#  -----------------------------------------------------------------------
#     Default values for bulk service
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Cell name of the bulk service(s)
#
bulk.cell.name=${dcache.service.bulk}

bulk.cell.consume=${bulk.cell.name}
bulk.cell.subscribe=${bulk.pool-monitor.topic},${bulk.qos-transition-topic}

#  ----- Whether the service is replicable
#
#   Any service in dCache can have several instances as long as these
#   represent separate logical services. Some services can have several
#   instances representing the same logical service, providing some
#   degree of fault tolerance and load balancing. Such services are said
#   to be replicable.
#
#   Instances of a logical service share the same service name, and it is
#   important that the configuration for such instances is synchronized.
#
#   This property indicates if this service is replicable.
#
(immutable)bulk.cell.replicable = false

#  ---- Global setting for directory expansion.
#
#           NONE:       do not allow any processing of targets inside a directory (depth 0)
#           TARGETS:    allow only the immediate children of directories to be processed (depth 1)
#           ALL:        allow full recursive processing of directories (depth N)
#
(one-of?NONE|TARGETS|ALL)bulk.allowed-directory-expansion=TARGETS

#  ---- Algorithm for promoting requests to active.
#
#       Implementations:
#
#           -   org.dcache.services.bulk.manager.scheduler.LeastRecentFirstScheduler:
#               selects the least recent requests to run in order of arrival
#               (first-come first-served).
#
bulk.request-scheduler=org.dcache.services.bulk.manager.scheduler.LeastRecentFirstScheduler

#  ---- Thread pool sizes.
#
#  - container-processing threads:          for running container jobs (one per request)
#                                           also serves as the default number of requests which
#                                           can be run concurrently and the capacity of the cache
#                                           serving to front the request storage.
#                                           The number of concurrent active requests can be
#                                           adjusted via an admin command to oversubscribe to
#                                           this preset number, which may allow for some speed up
#                                           if high latency requests such as pinning predominate.
#  - activity-callback threads:             for running the completion handling on activities
#  - incoming-request threads:              for handling requests received on the message queue
#  - cancellation threads:                  for handling cancellation requests
#  - delayed clear threads:                 for handling requests from user to delay clearing a request
#
bulk.limits.container-processing-threads=200
bulk.limits.activity-callback-threads=50
bulk.limits.incoming-request-threads=10
bulk.limits.cancellation-threads=25
bulk.limits.delay-clear-threads=5

#  ---- Expiration of the cache serving to front the request storage.
#
bulk.limits.request-cache-expiration=1

#  ---- Expiration unit of the cache serving to front the request storage.
#
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)bulk.limits.request-cache-expiration.unit=HOURS

#  ---- Prevents users from monopolizing the service.
#       The limit is in terms of the number of submitted requests
#       which have not yet completed (but not necessarily cleared).
#
bulk.limits.max-requests-per-user=5000

#  ---- The maximum number of unexpanded targets which can appear in the bulk request list.
#       when request expansion is set to NONE.
#
bulk.limits.max.targets-per-flat-request=500

#  ---- The maximum number of unexpanded targets which can appear in the bulk request list.
#       when request expansion is set to TARGETS.
#
bulk.limits.max.targets-per-shallow-request=10

#  ---- The maximum number of unexpanded targets which can appear in the bulk request list.
#       when request expansion is set to ALL.
#
bulk.limits.max.targets-per-recursive-request=1

#  ---- Interval of inactivity by the request manager consumer if not signalled
#       internally (as for instance when a request job completes).  The consumer checks
#       for request readiness and completion.
#
bulk.limits.sweep-interval=5
(one-of?MILLISECONDS|SECONDS|MINUTES)bulk.limits.sweep-interval.unit=SECONDS

#  ---- Interval between sweeps to update the request and target counts.
#       Calls the underlying stores (database tables).
#
bulk.limits.counts-update-interval=1
(one-of?MILLISECONDS|SECONDS|MINUTES)bulk.limits.counts-update-interval.unit=MINUTES

#  ---- Amount of time the shutdown manager should wait for running jobs to complete
#       before disconnecting from the data store.
#
bulk.limits.shutdown-manager-wait=10
(one-of?MILLISECONDS|SECONDS|MINUTES)bulk.limits.shutdown-manager-wait.unit=SECONDS

# ---- Endpoint for contacting pnfs manager.
#
bulk.service.pnfsmanager=${dcache.service.pnfsmanager}

# ---- How long to wait for a response from the pnfs manager.
#
bulk.service.pnfsmanager.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)bulk.service.pnfsmanager.timeout.unit=MINUTES

# ---- Endpoint for contacting pin manager.
#
bulk.service.pinmanager=${dcache.service.pinmanager}

# ---- How long to wait for a response from the pin manager.
#
bulk.service.pinmanager.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)bulk.service.pinmanager.timeout.unit=MINUTES

# ---- Endpoint for contacting pool manager.
#
bulk.service.poolmanager=${dcache.service.poolmanager}

# ---- How long to wait for a response from the pool manager.
#
bulk.service.poolmanager.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)bulk.service.poolmanager.timeout.unit=MINUTES

# ---- Endpoint for contacting qos.
#
bulk.service.qos=${dcache.service.qos}

# ---- How long to wait for a response from qos.
#
bulk.service.qos.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)bulk.service.qos.timeout.unit=MINUTES

# Topic on which to expect pool monitor updates
#
bulk.pool-monitor.topic=${dcache.pool-monitor.topic}

# ---- Configuration for bulk database connection pool ---------------------------

bulk.db.connections.max=50

# ---- The minimum number of idle database connections.
#
bulk.db.connections.idle=1

(prefix)bulk.db.hikari-properties = Hikari-specific properties

# ---- Database related settings.
#
bulk.db.name=bulk
bulk.db.host=${dcache.db.host}
bulk.db.user=${dcache.db.user}
bulk.db.password=${dcache.db.password}
bulk.db.password.file=${dcache.db.password.file}
bulk.db.schema.auto=${dcache.db.schema.auto}
bulk.db.url=jdbc:postgresql://${bulk.db.host}/${bulk.db.name}?targetServerType=master
(immutable)bulk.db.schema.changelog=org/dcache/services/bulk/model/db.changelog-master.xml
bulk.db.fetch-size=1000

# ---- Activity plugin properties
#
#      Max permits is the number permits for the semaphore used by the request container to
#      perform the activity on individual targets.  This number is on a container-by-container
#      basis; for instance, if the bulk.limits.container-processing-threads is set to 100,
#      this means that the number of concurrent requests to pin manager, e.g., would be 100000.
#      These numbers should be adjusted up or down depending on concurrency requirements
#      so as not to generate DOS attacks on the other dCache services such as PnfsManager,
#      PinManager or the QoSEngine.
#
bulk.plugin!delete.max-permits=100
bulk.plugin!pin.max-permits=1000
bulk.plugin!stage.max-permits=1000
bulk.plugin!unpin.max-permits=1000
bulk.plugin!release.max-permits=1000
bulk.plugin!update-qos.max-permits=1000
bulk.plugin!log-target.max-permits=100

#  ---- Algorithm for determining what action to take on job failures.
#
#       Implementations:
#
#            -  org.dcache.services.bulk.job.retry.NoRetryPolicy does not retry failures.
#
bulk.plugin!delete.retry-policy=org.dcache.services.bulk.activity.retry.NoRetryPolicy
bulk.plugin!pin.retry-policy=org.dcache.services.bulk.activity.retry.NoRetryPolicy
bulk.plugin!stage.retry-policy=org.dcache.services.bulk.activity.retry.NoRetryPolicy
bulk.plugin!unpin.retry-policy=org.dcache.services.bulk.activity.retry.NoRetryPolicy
bulk.plugin!release.retry-policy=org.dcache.services.bulk.activity.retry.NoRetryPolicy
bulk.plugin!update-qos.retry-policy=org.dcache.services.bulk.activity.retry.NoRetryPolicy
bulk.plugin!log-target.retry-policy=org.dcache.services.bulk.activity.retry.NoRetryPolicy

# Topic on which to expect qos transition completed updates
#
bulk.qos-transition-topic=${dcache.qos.transition-topic}

(deprecated)bulk.ping.cell.name=no longer used
(deprecated)bulk.ping.cell.consume=no longer used
(deprecated)bulk.dir=no longer used
(deprecated)bulk.limits.max-running-jobs=use bulk.limits.container-processing-threads
(deprecated)bulk.limits.max-queued-jobs=no longer used
(deprecated)bulk.limits.avg-jobs-per-request=no longer used
(deprecated)bulk.limits.max-cleanup-jobs=no longer used
(deprecated)bulk.limits.max-callbacks=use bulk.limits.activity-callback-threads
(deprecated)bulk.limits.message-handler-threads=use bulk.limits.incoming-request-thread
(deprecated)bulk.limits.request-store-clear-threads=use bulk.limits.delay-clear-threads
(deprecated)bulk.limits.queue-sweep-interval=use bulk.limits.sweep-interval
(deprecated)bulk.store.request-store-dir=no longer used
(deprecated)bulk.service.ping=no longer used
(deprecated)bulk.service.ping.timeout=no longer used
(deprecated)bulk.service.ping.timeout.unit=no longer used
