#  -----------------------------------------------------------------------
#     Default values for qos
#
#     The qos services are responsible for maintaining the disk and tape
#     requirements of a given file.
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Cell names of qos services
#
(deprecated)qos.cell.name=qos

#  ---- Named queues to consume from
#
#       A service can consume messages from named queues. Other services can
#       write messages to such queues. A named queue has an unqualified cell
#       address, that is, an address without a domain name.
#
#       This property contains a comma separated list of named queues to
#       consume from.
#
(deprecated)qos.cell.consume = ${qos.cell.name}

#  ---- Message topics to subscribe to.
#
(deprecated)qos.cell.subscribe=${qos.cache-location-topic},\
  ${qos.corrupt-file-topic},\
  ${qos.pool-monitor-topic}

(prefix)qos.db.hikari-properties = Hikari-specific properties

qos.db.connections.max=10

# ---- The minimum number of idle database connections.
#
qos.db.connections.idle=1

# ---- Database related settings reserved for internal use.
#
(immutable)qos.db.name=qos
qos.db.host=${dcache.db.host}
qos.db.user=${dcache.db.user}
qos.db.password=${dcache.db.password}
qos.db.password.file=${dcache.db.password.file}
qos.db.url=jdbc:postgresql://${qos.db.host}/${qos.db.name}?targetServerType=master
qos.db.schema.changelog=org/dcache/qos/model/db.changelog-master.xml
qos.db.schema.auto=${dcache.db.schema.auto}

# ---- Used with listing of file operations.
#
qos.db.fetch-size=1000

# ---- Listens for location updates from PnfsManager.
#
qos.cache-location-topic=CacheLocationTopic

# ---- Listens for checksum scanner or pool reports.  If the corrupt
#      file is a non-unique replica, it tries to handle this by removing
#      the copy and making a new one.
#
qos.corrupt-file-topic=${dcache.corrupt-file.topic}

# ---- Channel on which pool monitor updates are pushed out.
#      Resilience relies on these for current info regarding pools,
#      pool groups, storage units, pool mode/status, pool tags, and pool cost.
#
qos.pool-monitor-topic=${dcache.pool-monitor.topic}

# ---- Publishes transition completed messages on this topic.
#
qos.transition-completed-topic=${dcache.qos.transition-topic}

# ---- Base directory where any qos metadata is stored. This inaccessible file lists and statistics
#      output.
#
qos.home=${dcache.paths.qos}

# ---- Pool manager pool info refreshing.
#
#      Information concerning pool cost is considered out of sync after
#      this interval has passed.   This should be somewhat longer than
#      the notification period value(see poolmanager.pool-monitor.update-period and
#      poolmanager.pool-monitor.update-period.unit).
#
qos.limits.pool-info-expiry=3
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.limits.pool-info-expiry.unit=MINUTES

# ---- Startup
#
#      When an entire dcache installation is brought on line at the same time,
#      pool status may not yet be available from the pool manager.  This
#      property sets an initial delay before pool info initialization
#      begins.  Setting this property to 0 skips the delay.
#
qos.limits.startup-delay=30
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.limits.startup-delay.unit=SECONDS

# ---- Message passing.
#
#      To avoid congestion, particularly in the verifier, messages are sent to the scanner
#      and to the engine in batches.
#
qos.limits.messages.max-batch-size=256
qos.limits.messages.batch-timeout=10
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.limits.messages.batch-timeout.unit=SECONDS

# ---- Semaphore control
#
#      This should always be used to control the communication between the verifier
#      and the engine, to avoid denial of service attacks by the former on the latter.
#
qos.limits.messages.max-requirement-requests=64

# ---- Endpoint (cell) settings for contacting pin manager.
#
qos.service.pinmanager=${dcache.service.pinmanager}
qos.service.pinmanager.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.service.pinmanager.timeout.unit=MINUTES

# ---- Endpoint (cell) settings for contacting pnfs manager.
#      Activity in the engine and verifier can be intense so a longer default timeout
#      may at times be required.
#
qos.service.pnfsmanager=${dcache.service.pnfsmanager}
qos.service.pnfsmanager.timeout=5
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.service.pnfsmanager.timeout.unit=MINUTES

# ---- Endpoint (cell) settings for contacting pools (destination is dynamic).
#
qos.service.pool.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.service.pool.timeout.unit=MINUTES

# ---- Endpoint (cell) settings for the qos.transition-completed-topic.
#
qos.service.transition.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.service.transition.timeout.unit=MINUTES

# ---- Main external entry point for qos.
#      The verifier requirements requests can accumulate against the engine so a longer
#      default timeout is indicated.
#
qos.service.requirements=${dcache.service.qos}
qos.service.requirements.timeout=5
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.service.requirements.timeout.unit=MINUTES

# ---- Internal endpoints consumed only by other qos services.
#
(immutable)qos.service.adjustment=${qos-adjuster.cell.name}
qos.service.adjustment.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.service.adjustment.timeout.unit=MINUTES

(immutable)qos.service.scanner=${qos-scanner.cell.name}
qos.service.scanner.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.service.scanner.timeout.unit=MINUTES

(immutable)qos.service.verification=${qos-verifier.cell.name}
qos.service.verification.timeout=1
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)qos.service.verification.timeout.unit=MINUTES

#
# Whether users require a QoS role to perform a transition.
#
(one-of?true|false)qos.require-roles=true


(obsolete)qos.adjuster.cell.consume=use qos-adjuster.cell.consume
(obsolete)qos.adjuster.cell.name=use qos-adjuster.cell.name
(obsolete)qos.db.verifier.connections.idle=use qos-verifier.db.connections.idle
(obsolete)qos.db.verifier.connections.max=use qos-verifier.db.connections.max
(obsolete)qos.db.verifier.fetch-size=use qos-verifier.db.fetch-size
(obsolete)qos.engine.cell.consume=use qos-engine.cell.consume
(obsolete)qos.engine.cell.name=use qos-engine.cell.name
(obsolete)qos.engine.cell.subscribe=use qos-engine.cell.subscribe
(obsolete)qos.scanner.cell.consume=use qos-scanner.cell.consume
(obsolete)qos.scanner.cell.name=use qos-scanner.cell.name
(obsolete)qos.scanner.cell.subscribe=use qos-scanner.cell.subscribe
(obsolete)qos.verifier.cell.consume=use qos-verifier.cell.consume
(obsolete)qos.verifier.cell.name=use qos-verifier.cell.name
(obsolete)qos.verifier.cell.subscribe=use qos-verifier.cell.subscribe