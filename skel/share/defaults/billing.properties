#  -----------------------------------------------------------------------
#     Default values for billing
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Cell name of billing service
#
billing.cell.name=billing

#  ---- Named queues to consume from
#
#   A service can consume messages from named queues. Other services can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
billing.cell.consume=${billing.cell.name}

#  ---- Topics to which the service subscribes
#
#   A service can subscribe to messages published on a topic. Other service
#   can send messages to such a topic. A topic an unqualified cell address,
#   that is, an address without a domain name.
#
#   This property contains a comma separated list of topics to subscribe to.
#
billing.cell.subscribe=${dcache.topic.billing}

#  ----- Whether the service is replicable
#
#   Any service in dCache can have several instances as long as these
#   represent separate logical services. Some services can have several
#   instances representing the same logical service, providing some
#   degree of fault tolerance and load balancing. Such services are said
#   to be replicable.
#
#   Instances of a logical service share the same service name, and it is
#   important that the configuration for such instances is synchronized.
#
#   This property indicates if this service is replicable.
#
#   Note: it is the administrator's responsibility to ensure that all
#   billing service instances have consistent dCache 'billing.'
#   configuration.
#
(immutable)billing.cell.replicable = true

#  ---- Disable billing to plain text file
#
#   Controls whether dCache activity is logged as plain text files.  If
#   the property is set to 'false' then activity is logged in text files.
#   If set to 'true' then there is no logging to text files.
#
(one-of?true|false)billing.enable.text = true

#  ---- Directory for billing logs
#
#   The directory within which the billing logs are to be written.
#
billing.text.dir = ${dcache.paths.billing}

#
#  ---- whether logs are stored in flattened directory; default:
#       they are stored in year/month subdirectory
#
(one-of?true|false)billing.text.flat-dir=false

#  -----------------------------------------------------------------------
#     Format of billing entries in plain text billing files
#  -----------------------------------------------------------------------

# The billing cell receives billing messages from various components
# in dCache. Each message is logged to a plain text file using a
# configurable format. If the format string is empty or undefined, the
# billing record is not logged.
#
# In its simplest form, the format string contains placeholders using
# the syntax $attribute$, where attribute is the name of an attribute
# in the message. The attribute names of each message is listed
# below. Messages inherited attributes from messages they extend. Beware
# that the two character sequence $$ is an escaped $ symbol in dCache
# configuration files. Thus to have two sequential $ symbols in a format
# string, four $ symbols have to be added.
#
# Each attribute has a type. Some types may expose additional fields.
# The syntax for accessing a field is $attribute.field$, where field
# is a field of the attribute. The field may itself have additional
# fields. The available fields of a number of types is listed below.
#
# Some types may have alternate renderings using a format string. The
# syntax for specifying a format string is $attribute; format="..."$,
# where ... is a type specific format string. Similarly, for
# collection types (eg arrays), the separator symbol can be specified
# as $attribute; separator="..."$, where ... is the separator.
#
# For advanced customizing, consult the StringTemplate v4
# documentation at
#
#  http://www.antlr.org/wiki/display/ST4/StringTemplate+4+Documentation
#
# or the cheat sheet at
#
#  http://www.antlr.org/wiki/display/ST4/StringTemplate+cheat+sheet
#
#
#  Message: InfoMessage
#  --------------------
#
#   Attribute   Type        Description
#   ---------   ----        -----------
#
#   date        Date        Time stamp of mesage
#   cellName    CellAddress Address of cell submitting the message
#   cellType    String      Type of cell submitting the message
#   session     String      Session identifier for transfer
#   type        String      Request type
#   rc          Integer     Result code
#   message     String      Message (usually error message)
#   queuingTime Long        Time request was queued (milliseconds)
#   subject     Subject     Identity of user given as a collection of
#                           principals (uid, gid, FQAN, DN, Username,
#                           Kerberos, Client-IP)
#
# Message: PnfsFileInfoMessage extends InfoMessage
# ------------------------------------------------
#
#   Attribute  Type        Description
#   ---------  ----        -----------
#
#   pnfsid     PnfsId      PNFS id of file
#   path       String      File path
#   filesize   Long        File size (bytes)
#   storage    StorageInfo Storage info of file
#
# Message: MoverInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------
#
#   Attribute       Type         Description
#   ---------       ----         -----------
#
#   transferred     Long         Bytes transferred
#   connectionTime  Long         Time client was connected (milliseconds)
#   created         Boolean      True on upload, false on download
#   protocol        ProtocolInfo Protocol related information
#   initiator       String       Name of cell that initiated the transfer;
#                                if p2p, begins with "pool:"; otherwise "door:"
#   p2p             Boolean      True if transfer is pool to pool
#   transferPath    String       Actual transfer path
#
# Message: DoorRequestInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------------
#
#   Attribute         Type       Description
#   ---------         ----       -----------
#   transactionTime   Long       Duration of operation (milliseconds)
#   uid               Integer    UID of user
#   gid               Integer    GID of user
#   owner             String     DN or user name
#   client            String     IP address of the client.  If the request
#                                passed through one or more intermediates then
#                                this is the IP address of the last
#                                intermediate.
#   clientChain       String     Comma separated list of IP addresses, where the
#                                first address in the list is the client or
#                                intermediate connecting to dCache and the last
#                                address in the list is the client initiating
#                                the request.  The value of any address in the
#                                list is only as reliable as any subsequent
#                                intermediates handling the request.
#   transferPath      String     Actual transfer path
#
#
# Message: StorageInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------------
#
#   Attribute         Type       Description
#   ---------         ----       -----------
#
#   transferTime      Long       Duration of operation (milliseconds)
#
#
# Message: RemoveFileInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------------
#
#   No additional attributes.
#
#
# Message: PoolHitInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------------
#
#   Attribute       Type         Description
#   ---------       ----         -----------
#   protocol        ProtocolInfo Protocol related information
#   cached          Boolean      Whether file was already online
#   transferPath    String       Actual transfer path
#
# Message: WarningPnfsFileInfoMessage extends PnfsFileInfoMessage
# ---------------------------------------------------------------
#
#   Attribute       Type         Description
#   ---------       ----         -----------
#   transferPath    String       Actual transfer path
#
#
#
# Type: Date
# ----------
#
#   By specifying $date; format="yyyy.MM.dd HH:mm:ss:SSS"$ the date
#   and time will be formatted respecting the given pattern
#   "yyyy.MM.dd HH:mm:ss:SSS".  Any other date pattern can be choosen
#   according to the java API SimpleDateFormat class.  The default
#   pattern is for the parameter $date$ is "MM.dd HH:mm:ss".
#
#
# Type: ProtocolInfo
# ------------------
#
#   Field          Type              Description
#   -----          ----              -----------
#
#   protocol       String            Protocol name (as used in pool manager)
#   minorVersion   Integer           Minor version of protocol
#   majorVersion   Integer           Major version of protocol
#   socketAddress  InetSocketAddress IP address and port of client
#
# Type: StorageInfo
# -----------------
#
#   Field          Type               Description
#   -----          ----               -----------
#
#   storageClass    String            The storage class of the file
#   hsm             String            HSM instance
#   locations       URI[]             Tape locations
#   stored          Boolean           True when stored on tape, false otherwise
#   map             Map<Sting,String> Additional info as key-value pairs
#
# Type: Subject
# -------------
#
#   Field          Type              Description
#   -----          ----              -----------
#
#   dn             String       Distinguished name
#   uid            Integer      User id
#   primaryGid     Integer      Primary group id
#   gids           Integer[]    Group ids
#   primaryFqan    String       First FQAN (Fully Qualified Attribute Names
#                               used by VOMS)
#   fqans          String[]     FQANs (unsorted)
#   userName       String       Mapped user name
#   loginName      String       Login name
#
# Type: PnfsId
# ------------
#
#   Field          Type         Description
#   -----          ----         -----------
#   databaseId     Integer      Database ID (first two bytes of PNFS ID)
#   domain         String
#   id             String       String form of PNFS ID
#   bytes          byte[]       Binary form of PNFS ID
#
# Type: CellAddress
# ------------
#
#   The address of a cell within dCache, which may be qualified.
#
#   If a CellAddress 'addr' is qualified then $addr.isQualified$
#   expands to true, $addr.domain$ provides the domain name of this
#   cell, and $addr$ expands to $addr.cell$@$addr.domain$.
#
#   If a CellAddress 'addr' is not qualified then $addr.isQualified$
#   expands to false, $addr.domain$ expands to 'local' and $addr$
#   expands to $addr.cell$.
#
#   Field          Type         Description
#   -----          ----         -----------
#   cell           String       Name of the dCache cell
#   domain         String       Name of the dCache domain
#   isQualified    Boolean      True when the address has a domain name, false otherwise
#


#  ---- MoverInfoMessage
#
#    Submitted by pools for each file transfer.
#    Note:  [p2p=$p2p$] has not been added here for backward compatibility.
#           Please overwrite the default if you wish to be able to distinguish
#           pool-to-pool transfers from door-initiated uploads or downloads.
#
billing.text.format.mover-info-message = $date$ [$cellType$:$cellName.cell$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transferred$ $connectionTime$ $created$ {$protocol$} [$initiator$] {$rc$:"$message$"}

#  ---- RemoveFileInfoMessage
#
#    Submitted by PnfsManager on file removal.
#
billing.text.format.remove-file-info-message = $date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ {$rc$:"$message$"}

#  ---- DoorRequestInfoMessage
#
#    Submitted by doors for each file transfer.
#
billing.text.format.door-request-info-message = $date$ [$cellType$:$cellName$:$type$] ["$owner$":$uid$:$gid$:$clientChain$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transactionTime$ $queuingTime$ {$rc$:"$message$"}

#  ---- StorageInfoMessage
#
#    Submitted by pools for each flush to and fetch from tape.
#
billing.text.format.storage-info-message = $date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transferTime$ $queuingTime$ {$rc$:"$message$"}

#  ---- PoolHitInfoMessage
#
#    Submitted by pool manager on pool selection
#
billing.text.format.pool-hit-info-message = $date$ [$cellType$:$cellName.cell$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $cached$ {$protocol$} {$rc$:"$message$"}

#  ---- WarningPnfsFileInfoMessage
#
#    Submitted by pool manager on various failures
#
billing.text.format.warning-pnfs-file-info-message = $date$ [$cellType$:$cellName$:$type$] {$rc$:"$message$"}

#  -----------------------------------------------------------------------
#     Store billing data in database
##  -----------------------------------------------------------------------

#   This property describes whether the billing information should be
#   written to a PostgreSQL database.  Valid values are 'no' and 'yes'.
#
#   When this property is set to 'yes' then billing will write dCache
#   billing information into a database.  The database must be created
#   manually but dCache will manage the creation and evolution of
#   tables within this database.
#
#   As an example, the following two commands instructs PostgreSQL to
#   create the database 'billing' and allow user 'srmdcache' to access
#   it:
#
#       createdb -O srmdcache -U postgres billing
#       createlang -U srmdcache plpgsql billing
#
(one-of?true|false)billing.enable.db = false

# ---- Data insert logic
#      controls which handler delegate to use (currently only one available)
#
(obsolete)billing.db.inserts.queue-delegate.type=no longer used

# ---- Data insert logic
#      maximum queue size
#
billing.db.inserts.max-queue-size=100000

# ---- Data insert logic
#      maximum batch size (for database batched insert; recommended not to be
#      greater than 2000)
#
billing.db.inserts.max-batch-size=1000

# ---- Data insert logic
#      number of queue consumers for inserts, meaning number of
#      concurrent writes to the database.
#      Be sure to allow enough database connections in the pool so that
#      these do not block very often.
#
billing.db.consumers=10

# ---- Data insert logic
#      drop messages when the queue maximum is reached
#
(one-of?true|false)billing.db.inserts.drop-messages-at-limit=true

# ---- liquibase update
(one-of?true|false|${dcache.db.schema.auto})billing.db.schema.auto = ${dcache.db.schema.auto}

# ---- RDBMS/JDBC URL
#
billing.db.url = jdbc:postgresql://${billing.db.host}/${billing.db.name}?targetServerType=master

# ---- RDBMS/JDBC Database host name
#
# See dcache.db.host for details.
#
billing.db.host = ${dcache.db.host}

# ---- RDBMS/JDBC Database user name
#
billing.db.user = ${dcache.db.user}

# ---- RDBMS/JDBC Database user password
#
billing.db.password = ${dcache.db.password}

#  The following enables using pgfile, which is disabled by default
#
billing.db.password.file = ${dcache.db.password.file}

# ---- Database name
#
(immutable)billing.db.name-when-true=billing
(immutable)billing.db.name-when-false=
billing.db.name=${billing.db.name-when-${billing.enable.db}}

#  ---- Configuration for database connection pool
#
#  The database connection pool reuses connections between successive
#  database operations.  By reusing connections dCache doesn't suffer
#  the overhead of establishing new database connections for each
#  operation.
#
#  The options here determine how billing behaves as the number of
#  concurrent requests fluctuates.
#

#
#  The maximum number of concurrent database connections.
#
billing.db.connections.max=30

#
#  The minimum number of idle database connections.
#
billing.db.connections.idle=3

#
#  To enable conditional presence of database for the dcache database commands
#

(immutable)billing.db.schema.changelog-when-true=org/dcache/services/billing/db/sql/billing.changelog-master.xml
(immutable)billing.db.schema.changelog-when-false=

#
# Note: when db is not enabled, the name needs to be empty, or else
#       the dcache database command will attempt to connect
#       Hence this cannot be equal to billing.db.name in this case.
#
billing.db.schema.changelog=${billing.db.schema.changelog-when-${billing.enable.db}}

#
# For executing histogram/time-series requests against the db
#
billing.limits.data-request-threads=10

# ---- communcation timeout
billing.service.poolmanager.timeout = 3600000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)billing.service.poolmanager.timeout.unit=MILLISECONDS
billing.service.poolmanager=${dcache.service.poolmanager}

(obsolete)billing.cell.export=See billing.cell.consume

# The billing parser is used by the 'dcache billing' and 'dcache-billing-indexer' commands. It parses
# billing text files. Those files contain formatting headers to record the format used when generating
# the files. Old files from prior version of dCache however lack these formatting headers. The following
# properties define default formats to use when a suitable formatting header is lacking.
(prefix)billing.parser.format = Default formatting strings
billing.parser.format!mover-info-message = $date$ [$cellType$:$cellName.cell$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transferred$ $connectionTime$ $created$ {$protocol$} [$initiator$] {$rc$:"$message$"}
billing.parser.format!remove-file-info-message = $date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ {$rc$:"$message$"}
billing.parser.format!door-request-info-message = $date$ [$cellType$:$cellName$:$type$] ["$owner$":$uid$:$gid$:$clientChain$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transactionTime$ $queuingTime$ {$rc$:"$message$"}
billing.parser.format!storage-info-message = $date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transferTime$ $queuingTime$ {$rc$:"$message$"}
billing.parser.format!pool-hit-info-message = $date$ [$cellType$:$cellName.cell$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $cached$ {$protocol$} {$rc$:"$message$"}
billing.parser.format!warning-pnfs-file-info-message = $date$ [$cellType$:$cellName$:$type$] {$rc$:"$message$"}

##  Old properties that are no longer supported
(obsolete)billing.db.inserts.max-before-commit =
(obsolete)billing.db.inserts.timeout-before-commit =
(obsolete)billing.db.inserts.timeout-before-commit.unit =
