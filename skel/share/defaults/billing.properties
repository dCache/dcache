#  -----------------------------------------------------------------------
#     Default values for billing
#  -----------------------------------------------------------------------
#
#   This Java properties file contains default values for billing
#   configuration parameters. All values can be redefined in
#   etc/dcache.conf. Do not modify any values here as your changes
#   will be lost when you next upgrade.

#  ---- Cell name of billing service
#
billing/cell.name=billing

#  ---- Directory for billing logs
#
#   The directory within which the billing logs are to be written.
#
billingLogsDir=${dcache.paths.billing}

#  ---- Disable billing to plain text file
#
#   Controls whether dCache activity is logged as plain text files.  If
#   the property is set to 'false' then activity is logged in text files.
#   If set to 'true' then there is no logging to text files.
#
(one-of?true|false)billingDisableTxt=false

#  -----------------------------------------------------------------------
#     Format of billing entries in plain text billing files
#  -----------------------------------------------------------------------

# The billing cell receives billing messages from various components
# in dCache. Each message is logged to a plain text file using a
# configurable format.
#
# In its simplest form, the format string contains placeholders using
# the syntax $attribute$, where attribute is the name of an attribute
# in the message. The attribute names of each message is listed
# below. Messages inherited attributes from messages they extend.
#
# Each attribute has a type. Some types may expose additional fields.
# The syntax for accessing a field is $attribute.field$, where field
# is a field of the attribute. The field may itself have additional
# fields. The available fields of a number of types is listed below.
#
# Some types may have alternate renderings using a format string. The
# syntax for specifying a format string is $attribute; format="..."$,
# where ... is a type specific format string. Similarly, for
# collection types (eg arrays), the separator symbol can be specified
# as $attribute; separator="..."$, where ... is the separator.
#
# For advanced customizing, consult the StringTemplate v3
# documentation at
#
#  http://www.antlr.org/wiki/display/ST/StringTemplate+3+Documentation
#
# or the cheat sheet at
#
#  http://www.antlr.org/wiki/display/ST/StringTemplate+cheat+sheet
#
#
#  Message: InfoMessage
#  --------------------
#
#   Attribute   Type        Description
#   ---------   ----        -----------
#
#   date        Date        Time stamp of mesage
#   cellName    String      Name of cell submitting the message
#   cellType    String      Type of cell submitting the message
#   type        String      Request type
#   rc          Integer     Result code
#   message     String      Message (usually error message)
#   queuingTime Long        Time request was queued (milliseconds)
#   subject     Subject     Identity of user given as a collection of
#                           principals (uid, gid, FQAN, DN, Username,
#                           Kerberos, Client-IP)
#
# Message: PnfsFileInfoMessage extends InfoMessage
# ------------------------------------------------
#
#   Attribute  Type        Description
#   ---------  ----        -----------
#
#   pnfsid     PnfsId      PNFS id of file
#   path       String      File path
#   filesize   Long        File size (bytes)
#   storage    StorageInfo Storage info of file
#
# Message: MoverInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------
#
#   Attribute       Type         Description
#   ---------       ----         -----------
#
#   transferred     Long         Bytes transferred
#   connectionTime  Long         Time client was connected (milliseconds)
#   created         Boolean      True on upload, false on download
#   protocol        ProtocolInfo Protocol related information
#   initiator       String       Name of cell that initiated the transfer
#
# Message: DoorRequestInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------------
#
#   Attribute         Type       Description
#   ---------         ----       -----------
#   transactionTime   Long       Duration of operation (milliseconds)
#   uid               Integer    UID of user
#   gid               Integer    GID of user
#   owner             String     DN or user name
#   client            String     Client IP address
#
#
# Message: StorageInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------------
#
#   Attribute         Type       Description
#   ---------         ----       -----------
#
#   transferTime      Long       Duration of operation (milliseconds)
#
#
# Message: RemoveFileInfoMessage extends InfoMessage
# --------------------------------------------------
#
#   No additional attributes.
#
#
# Type: Date
# ----------
#
#   By specifying $date; format="yyyy.MM.dd HH:mm:ss:SSS"$ the date
#   and time will be formatted respecting the given pattern
#   "yyyy.MM.dd HH:mm:ss:SSS".  Any other date pattern can be choosen
#   according to the java API SimpleDateFormat class.  The default
#   pattern is for the parameter $date$ is "MM.dd HH:mm:ss".
#
#
# Type: ProtocolInfo
# ------------------
#
#   Field          Type              Description
#   -----          ----              -----------
#
#   protocol       String            Protocol name (as used in pool manager)
#   minorVersion   Integer           Minor version of protocol
#   majorVersion   Integer           Major version of protocol
#   socketAddresss InetSocketAddress IP address and port of client
#
# Type: StorageInfo
# -----------------
#
#   Field          Type               Description
#   -----          ----               -----------
#
#   storageClass    String            The storage class of the file
#   hsm             String            HSM instance
#   locations       URI[]             Tape locations
#   fileSize        Long              File size in bytes
#   stored          Boolean           True when stored on tape, false otherwise
#   retentionPolicy RetentionPolicy   Retention policy of file
#   accessLatency   AccessLatency     Access latentcy of file
#   map             Map<Sting,String> Additional info as key-value pairs
#
# Type: Subject
# -------------
#
#   Field          Type              Description
#   -----          ----              -----------
#
#   dn             String       Distinguished name
#   uid            Integer      User id
#   primaryGid     Integer      Primary group id
#   gids           Integer[]    Group ids
#   primaryFqan    String       First FQAN (Fully Qualified Attribute Names
#                               used by VOMS)
#   fqans          String[]     FQANs (unsorted)
#   userName       String       Mapped user name
#   loginName      String       Login name
#
# Type: PnfsId
# ------------
#
#   Field          Type         Description
#   -----          ----         -----------
#   databaseId     Integer      Database ID (first two bytes of PNFS ID)
#   domain         String
#   id             String       String form of PNFS ID
#   bytes          byte[]       Binary form of PNFS ID
#


#  ---- MoverInfoMessage
#
#    Submitted by pools for each file transfer.
#
billing.format.MoverInfoMessage=$date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$storage.storageClass$@$storage.hsm$$else$<Unknown>$endif$ $transferred$ $connectionTime$ $created$ {$protocol$} [$initiator$] {$rc$:"$message$"}

#  ---- RemoveFileInfoMessage
#
#    Submitted by PnfsManager on file removal.
#
billing.format.RemoveFileInfoMessage=$date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$storage.storageClass$@$storage.hsm$$else$<Unknown>$endif$ {$rc$:"$message$"}

#  ---- DoorRequestInfoMessage
#
#    Submitted by doors for each file transfer.
#
billing.format.DoorRequestInfoMessage=$date$ [$cellType$:$cellName$:$type$] ["$owner$":$uid$:$gid$:$client$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$storage.storageClass$@$storage.hsm$$else$<Unknown>$endif$ $transactionTime$ $queuingTime$ {$rc$:"$message$"}

#  ---- StorageInfoMessage
#
#    Submitted by pools for each flush to and fetch from tape.
#
billing.format.StorageInfoMessage=$date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$storage.storageClass$@$storage.hsm$$else$<Unknown>$endif$ $transferTime$ $queuingTime$ {$rc$:"$message$"}

#  -----------------------------------------------------------------------
#     Store billing data in database
##  -----------------------------------------------------------------------

#   This property describes whether the billing information should be
#   written to a PostgreSQL database.  Valid values are 'no' and 'yes'.
#
#   When this property is set to 'yes' then billing will write dCache
#   billing information into a database.  The database must be created
#   manually but dCache will manage the creation and evolution of
#   tables within this database.
#
#   As an example, the following two commands instructs PostgreSQL to
#   create the database 'billing' and allow user 'srmdcache' to access
#   it:
#
#       createdb -O srmdcache -U postgres billing
#       createlang -U srmdcache plpgsql billing
#
(one-of?yes|no)billingToDb=no

# ---- Use DAO access layer to persistence
#
billingInfoAccess=org.dcache.services.billing.db.impl.datanucleus.DataNucleusBillingInfo

# ---- If this is set, it overrides the jar-resident configuration resource
#      for the DAO implementation, if any
billingInfoAccessPropertiesFile=

# ---- Commit optimizations: in-memory caching thresholds
#
billingMaxInsertsBeforeCommit=10000
billingMaxTimeBeforeCommitInSecs=5

# ---- liquibase changelog
billingChangelog=org/dcache/services/billing/db/sql/billing.changelog-master.xml

# ---- liquibase update
(one-of?true|false)updateBillingDb=true

# ---- pool manager
poolManager=PoolManager

# ---- communcation timeout
poolConnectTimeout=3600000

# ---- RDBMS/JDBC Driver
#
billingDbDriver=org.postgresql.Driver

# ---- RDBMS/JDBC URL
#
billingDbUrl=jdbc:postgresql://${billingDbHost}/${billingDbName}

# ---- RDBMS/JDBC Database host name
#
billingDbHost=localhost

# ---- RDBMS/JDBC Database user name
#
billingDbUser=srmdcache

# ---- RDBMS/JDBC Database user password
#
billingDbPass=srmdcache

#  The following enables using pgfile, which is disabled by default
#  billingDbPgPassFileName=/root/.pgpass
#
billingDbPgPassFileName=

# ---- Database name
#
billingDbName=billing

#  ---- If this is set, it overrides the jar-resident configuration resource
#       for ITimeFramePlot, if any
billingPlotPropertiesFile=

#
#  To enable conditional presence of database for the dcache database commands
#
(immutable)billing-db-name-when-yes=${billingDbName}
(immutable)billing-db-name-when-no=
(immutable)billing-db-scheme-changelog-when-yes=${billingChangelog}
(immutable)billing-db-scheme-changelog-when-no=

#
# Database related settings reserved for internal use.
#
(immutable)billing/db.name=${billing-db-name-when-${billingToDb}}
billing/db.user=${billingDbUser}
(immutable)billing/db.host=${billingDbHost}
billing/db.password=${billingDbPass}
billing/db.password.file=${billingDbPgPassFileName}
billing/db.driver=${billingDbDriver}
billing/db.url=${billingDbUrl}
billing/db.schema.auto=${updateBillingDb}
billing/db.schema.changelog=${billing-db-scheme-changelog-when-${billingToDb}}
