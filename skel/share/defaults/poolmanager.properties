#  -----------------------------------------------------------------------
#     Default values for pool manager
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

# Cell name of poolmanager
poolmanager.cell.name = ${dcache.queue.poolmanager}

# Cell name of poolmanager
poolmanager.cell.service = ${dcache.queue.poolmanager}

#  ----- Whether the service is replicable
#
#   Any service in dCache can have several instances as long as these
#   represent separate logical services. Some services can have several
#   instances representing the same logical service, providing some
#   degree of fault tolerance and load balancing. Such services are said
#   to be replicable.
#
#   Instances of a logical service share the same service name, and it is
#   important that the configuration for such instances is synchronized.
#
#   This property indicates if this service is replicable.
#
#   Note: it is the administrator's responsibility to ensure that all
#   poolmanager service instances have consistent dCache
#   'poolmanager.'  configuration.
#
(immutable)poolmanager.cell.replicable = true

#  ---- Named queues to consume from
#
#   A service can consume messages from named queues. Other services can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
poolmanager.cell.consume = ${poolmanager.cell.service}

# Message topics to subscribe to.
poolmanager.cell.subscribe=${dcache.topic.pool-heartbeat},${dcache.topic.watched}

# Pool manager plugins
poolmanager.plugins.quota-manager = none

# Cell address of pnfsmanager.
poolmanager.service.pnfsmanager=${dcache.service.pnfsmanager}

# Cell address of billing service
poolmanager.service.billing=${dcache.topic.billing}

# Cell address to which to send pool status changes
poolmanager.destination.pool-status=PoolStatusTopic

# Timeout for pool requests
poolmanager.service.pool.timeout=10000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)poolmanager.service.pool.timeout.unit=MILLISECONDS

# Authorization file for staging from tape
poolmanager.authz.staging=${dcache.authz.staging}

# Where to put the policy enforcement point (PEP) for stage authorization
(one-of?doors|PoolManager|${dcache.authz.staging.pep})poolmanager.authz.staging.pep=${dcache.authz.staging.pep}

#  ---- Setup file for PoolManager
#
#   Must be writeable by user ${dcache.user} for the 'save' command of
#   PoolManager to work.
#   Please note, that a .bak copy of this file may be created,
#   for which sufficient rights are needed as well.
#
poolmanager.setup.file=@poolmanager.setup.file@

#  ---- ZooKeeper setup node for PoolManager
#
#   If non-null, the pool manager setup is continuously synced with this node in
#   ZooKeeper. Any local changes are propagated to ZooKeeper and any changes in
#   ZooKeeper are applied locally. The pool manager configuration will be persistent
#   across pool manager restarts even when the 'save' command is not used. To reload
#   the setup file one explicitly has to issue the 'reload' command - a service
#   restart will not suffice.
#
poolmanager.setup.zookeeper=/dcache/poolmanager/${poolmanager.cell.service}/setup

#
#  Whether or not to send a cache hit or miss message to the billing cell
#  on each request.
#
(one-of?true|false)poolmanager.enable.cache-hit-message = false

poolmanager.pool-monitor.topic = ${dcache.pool-monitor.topic}
poolmanager.pool-monitor.update-period = ${dcache.pool-monitor.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.pool-monitor.update-period.unit})\
poolmanager.pool-monitor.update-period.unit = ${dcache.pool-monitor.update-period.unit}

poolmanager.pool-monitor.max-updates-per-second = ${dcache.pool-monitor.max-updates-per-second}

(obsolete)poolmanager.cell.export = See poolmanager.cell.consume
(forbidden)poolmanager.plugins.selection-unit =
