#  -----------------------------------------------------------------------
#     Default values for DCAP doors
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

# Cell names for DCAP doors
dcap.cell.name=${dcap.cell.name.${dcap.authn.protocol}}
dcap.cell.name.plain=DCap-${host.name}
dcap.cell.name.auth=DCap-auth-${host.name}
dcap.cell.name.gsi=DCap-gsi-${host.name}
dcap.cell.name.kerberos=DCap-Kerberos-${host.name}

#  ---- Whether to export the dcap cell as a well known cell
#
#  This property controls whether the dcap cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)dcap.cell.export=true

# Authentication protocol
(one-of?plain|auth|kerberos|gsi)dcap.authn.protocol=plain

# Password authentication file for password authenticated dcap
(deprecated)dcapPasswdFile=${dcache.paths.etc}/passwd4dCapDoor
dcap.authn.passwd=${dcapPasswdFile}

# Kerberos settings for kerberos authentication
dcap.authn.kerberos.service-principle-name=host/${host.fqdn}@${dcache.authn.kerberos.realm}
dcap.authn.kerberos.key-distribution-center-list=${dcache.authn.kerberos.key-distribution-center-list}

# Path to host certificate for gsi authentication
dcap.authn.hostcert.cert=${dcache.authn.hostcert.cert}

# Path to host key for gsi authentication
dcap.authn.hostcert.key=${dcache.authn.hostcert.key}

# Path to directory containing trusted CA certificates (with hashed file names) for gsi authentication
dcap.authn.capath=${dcache.authn.capath}

# Path to directory containing attribute validation information for authorized VOMS servers for gsi authentication
dcap.authn.vomsdir=${dcache.authn.vomsdir}

#  Flags to disable problematic crypto ciphers
#
#  See dcache.authn.ciphers for details.
(deprecated)gsidcap.security.ciphers=${dcache.authn.ciphers}
dcap.authn.ciphers=${gsidcap.security.ciphers}

# Whether to allow existing files to be truncated on open.
(one-of?true|false|${truncate})dcap.authz.truncate=${truncate}
(deprecated,one-of?true|false)truncate=false

# Level of anonymous (unauthenticated) access allowed through a dcap door
(deprecated,one-of?NONE|READONLY|FULL)dcapAnonymousAccessLevel=NONE
(one-of?NONE|READONLY|FULL|${dcapAnonymousAccessLevel})dcap.authz.anonymous-operations=${dcapAnonymousAccessLevel}

# Whether the dcap door is read-only
(deprecated,one-of?true|false)dcapReadOnly=false
(one-of?true|false|${dcapReadOnly})dcap.authz.readonly=${dcapReadOnly}

# Authorization file for tape protection (only used if the policy enforcement point is in doors)
dcap.authz.staging=${dcache.authz.staging}

# Where to put the policy enforcement point (PEP) for stage authorization
(one-of?doors|PoolManager|${dcache.authz.staging.pep})dcap.authz.staging.pep=${dcache.authz.staging.pep}

# Whether a dcap client is allowed to override which mover queue on
# the pool is used to schedule a request.
(one-of?true|false|${dcap.authz.mover-queue-overwrite.${dcap.authn.protocol}})dcap.authz.mover-queue-overwrite=${dcap.authz.mover-queue-overwrite.${dcap.authn.protocol}}
dcap.authz.mover-queue-overwrite.plain=${dcap.authz.mover-queue-overwrite-when-${dcapIoQueueOverwrite}}
dcap.authz.mover-queue-overwrite.auth=${dcap.authz.mover-queue-overwrite-when-${dcapIoQueueOverwrite}}
dcap.authz.mover-queue-overwrite.gsi=${dcap.authz.mover-queue-overwrite-when-${gsidcapIoQueueOverwrite}}
dcap.authz.mover-queue-overwrite.kerberos=${dcap.authz.mover-queue-overwrite-when-${kerberosdcapIoQueueOverwrite}}
(immutable)dcap.authz.mover-queue-overwrite-when-allowed=true
(immutable)dcap.authz.mover-queue-overwrite-when-denied=false
(deprecated,one-of?allowed|denied)dcapIoQueueOverwrite=denied
(deprecated,one-of?allowed|denied)gsidcapIoQueueOverwrite=denied
(deprecated,one-of?allowed|denied)kerberosdcapIoQueueOverwrite=denied

# TCP port to listen to
dcap.net.port=${dcap.net.port.${dcap.authn.protocol}}
dcap.net.port.plain=${dCapPort}
dcap.net.port.auth=${dCapAuthPort}
dcap.net.port.gsi=${dCapGsiPort}
dcap.net.port.kerberos=${dCapKerberosPort}
(deprecated)dCapPort=22125
(deprecated)dCapGsiPort=22128
(deprecated)dCapAuthPort=22129
(deprecated)dCapKerberosPort=22725

# IP address of network interface to listen to
dcap.net.listen=${dcache.net.listen}

# Pool mover queue to use for transfers by this door
dcap.mover.queue=${dcap.mover.queue.${dcap.authn.protocol}}
dcap.mover.queue.plain=${dcapIoQueue}
dcap.mover.queue.auth=${dcapIoQueue}
dcap.mover.queue.gsi=${gsidcapIoQueue}
dcap.mover.queue.kerberos=${kerberosdcapIoQueue}
(deprecated)dcapIoQueue=
(deprecated)gsidcapIoQueue=
(deprecated)kerberosdcapIoQueue=

# Maximum number of concurrent DCAP transfers on this door
dcap.limits.clients=${dcap.limits.clients.${dcap.authn.protocol}}
dcap.limits.clients.plain=${dcapMaxLogin}
dcap.limits.clients.auth=${dcapMaxLogin}
dcap.limits.clients.gsi=${gsidcapMaxLogin}
dcap.limits.clients.kerberos=${kerberosdcapMaxLogin}
(deprecated)dcapMaxLogin=1500
(deprecated)gsidcapMaxLogin=1500
(deprecated)kerberosdcapMaxLogin=1500

# Cell address of loginbroker to register with
dcap.service.loginbroker=${dcache.service.loginbroker}

# Information for loginbroker registration
dcap.service.loginbroker.update-period=${dcache.service.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.service.loginbroker.update-period.unit})\
  dcap.service.loginbroker.update-period.unit=${dcache.service.loginbroker.update-period.unit}
dcap.service.loginbroker.update-threshold=${dcache.service.loginbroker.update-threshold}
dcap.service.loginbroker.family=dcap
dcap.service.loginbroker.version=1.3.0

# Cell address of pnfsmanager service
dcap.service.pnfsmanager=${dcache.service.pnfsmanager}

# Cell address of gplazma service
dcap.service.gplazma=${dcache.service.gplazma}

# Cell address of billing service
dcap.service.billing=${dcache.service.billing}

# Cell address of spacemanager service
dcap.service.spacemanager=${dcache.service.spacemanager}

# Cell address of pinmanager service
dcap.service.pinmanager=${dcache.service.pinmanager}

# Cell address of poolmanager service
dcap.service.poolmanager=${dcap.service.poolmanager-space-${dcap.enable.space-reservation}}
(immutable)dcap.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)dcap.service.poolmanager-space-true=${dcache.service.spacemanager}

# Whether to support space reservations
(one-of?true|false|${dcache.enable.space-reservation})dcap.enable.space-reservation=${dcache.enable.space-reservation}

#
#   Document which TCP ports are opened
#
(immutable)dcap.net.ports.tcp=${dcap.net.port}
