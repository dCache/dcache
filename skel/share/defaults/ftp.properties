#  -----------------------------------------------------------------------
#     Default values for FTP doors
#  -----------------------------------------------------------------------
#
#   This Java properties file contains default values for FTP
#   configuration parameters. All values can be redefined in
#   etc/dcache.conf. Do not modify any values here as your changes
#   will be lost when you next upgrade.

#  Cell names for FTP doors
#
ftp.cell.name.plain=FTP-${host.name}
ftp.cell.name.gsi=GFTP-${host.name}
ftp.cell.name.kerberos=KFTP-${host.name}
ftp.cell.name=${ftp.cell.name.${ftp.authn.protocol}}
ftp/cell.name=${ftp.cell.name}

#  Authentication scheme.
(one-of?plain|gsi|kerberos)ftp.authn.protocol=plain

#  Service Principle Names for Kerberos authentication
#
#  You should not need to alter these.
#
ftp.authn.kerberos.service-principle-name=ftp/${host.fqdn}@${kerberos.realm}
ftp.authn.kerberos.key-distribution-center-list=${kerberos.key-distribution-center-list}

#  Certificate properties for GSI authentication
ftp.authn.hostcert.key=${grid.hostcert.key}
ftp.authn.hostcert.cert=${grid.hostcert.cert}
ftp.authn.capath=${grid.ca.path}

# Authorization file for tape protection
ftp.authz.staging=${dcache.authz.staging}
ftp.authz.staging.pep=${dcache.authz.staging.pep}

#  Whether FTP door allows users to modify content
#
#  The ftp.authz.readonly property controls whether an FTP door will allow
#  users to upload files, delete files or otherwise modify dCache's
#  contents.
ftp.authz.readonly=ftp.authz.readonly.${ftp.authn.protocol}
ftp.authz.readonly.plain=true
ftp.authz.readonly.gsi=false
ftp.authz.readonly.kerberos=false

#  TCP port numbers and IP address
(deprecated)ftpPort=22126
(deprecated)kerberosFtpPort=22127
(deprecated)gsiFtpPortNumber=2811
ftp.net.port=${ftp.net.port.${ftp.authn.protocol}}
ftp.net.port.plain=${ftpPort}
ftp.net.port.kerberos=${kerberosFtpPort}
ftp.net.port.gsi=${gsiFtpPortNumber}
ftp.net.listen=${dcache.net.listen}

#  FTP passive move data channel port range
(deprecated)clientDataPortRange=${net.wan.port.min}:${net.wan.port.max}
ftp.net.port-range=${clientDataPortRange}

#  IP address for connections from pools to the FTP door
#
#  FTP doors in some cases act as proxies for the transfer. This
#  property specifies the IP of the interface on the door that the
#  pool will connect to. If empty, the door will choose a local
#  address. This address must not be a wildcard address.
(deprecated)gsiftpAdapterInternalInterface=
ftp.net.internal=${gsiftpAdapterInternalInterface}

#  Whether passive FTP transfers are relayed by the door
#
#  Passive FTP transfers are those where the client creates the data
#  channel connection to the server.
#
#  If this option is set to true, then all passive transfers are
#  relayed by the FTP door. If this option is set to false, then the
#  client is instructed to connect directly to the pool. This
#  requires that the pool allows inbound connections. Even when set
#  to false, there are several circumstances in which the connection
#  cannot be established directly to the pool due to limitations in
#  the FTP protocol. In such cases the connection will be relayed by
#  the door.
#
#  This setting is interpreted by both FTP doors and pools. For a
#  given combination of door and pool, a direct connection to the
#  pool can only be established if this setting is false at both the
#  door and the pool.
(one-of?true|false)ftp.proxy.on-passive=false

#  Whether active FTP transfers are relayed by the door
#
#  Active FTP transfers are those where the server creates the data
#  channel connection to the client.
#
#  If this option is set to true, then all active transfers are
#  relayed by the FTP door. If this option is set to false, then the
#  pool connects directly to the client. This requires that the pool
#  allows outbound connections. If the pool cannot establish the
#  connection to the client, then the transfer will fail.
(one-of?true|false)ftp.proxy.on-active=false

#  Period between successive GridFTP performance markers
#
#  This variable controls how often performance markers are written.
#  The value is in seconds: set performanceMarkerPeriod to 180 to
#  get performanceMarkers every 3 minutes.  A value of 0 will
#  disable performance markers.
(deprecated)performanceMarkerPeriod=70
ftp.performance-marker-period=${performanceMarkerPeriod}
ftp.performance-marker-period.unit=SECONDS

#  How many times to retry pool selection
#
#  If pool selection fails for some reason, the door may retry the
#  operation. This setting specifies how many times to retry before
#  the transfer fails.
(deprecated)gsiftpMaxRetries=80
ftp.limits.retries=${gsiftpMaxRetries}

#  Maximum number of concurrent streams to allow
#
#  For GridFTP mode E transfers multiple TCP streams are used for the
#  data channel. In active FTP (server creates data channel), the
#  maximum number of channels allowed is controlled by this
#  property. For passive FTP (client creates data channel) the
#  maximum number cannot be controlled by the server.
(deprecated)gsiftpMaxStreamsPerClient=10
ftp.limits.streams-per-client=${gsiftpMaxStreamsPerClient}

#  Limit on number of concurrent logins
#
#  Specifies the largest number of simultaneous logins to allow to an
#  FTP door.
(deprecated)gsiftpMaxLogin=100
ftp.limits.clients=${gsiftpMaxLogin}

#  Whether to delete files after upload failures
#
#  When set to true, FTP doors delete files after upload failures.
(deprecated,one-of?true|false)gsiftpDeleteOnConnectionClosed=true
(one-of?true|false|${gsiftpDeleteOnConnectionClosed})ftp.delete-on-failure=${gsiftpDeleteOnConnectionClosed}

#  Mover queue
#
#  The mover queue on the pool to which FTP transfers will be
#  scheduled. If blank, the default queue will be used.
(deprecated)gsiftpIoQueue=
ftp.mover.queue=${gsiftpIoQueue}

#  FTP transaction log directory
#
#  When set, a log file per FTP session is created in this directory.
(deprecated)FtpTLogDir=
ftp.transaction-log=${FtpTLogDir}

#  Whether existing files may be overwritten
(one-of?true|false|${overwriteEnabled})ftp.overwrite=${overwriteEnabled}

#  Security related properties
(deprecated)gridftp.security.ciphers=${dcache.security.ciphers}
ftp.security.ciphers=${gridftp.security.ciphers}

#  Pool manager settings
(deprecated)gsiftpPoolManagerTimeout=5400
(deprecated)gsiftpPoolManager=${ftp.service.poolmanager-space-${ftp.enable.spacemanager}}
ftp.service.poolmanager=${gsiftpPoolManager}
ftp.service.poolmanager.timeout=${gsiftpPoolManagerTimeout}
ftp.service.poolmanager.timeout.unit=SECONDS
(immutable)ftp.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)ftp.service.poolmanager-space-true=${dcache.service.spacemanager}
(one-of?true|false|${dcache.enable.spacemanager})ftp.enable.spacemanager=${dcache.enable.spacemanager}

#  Pool timeout
(deprecated)gsiftpPoolTimeout=600
ftp.service.pool.timeout=${gsiftpPoolTimeout}
ftp.service.pool.timeout.unit=SECONDS

#  PNFS manager settings
(deprecated)gsiftpPnfsTimeout=300
ftp.service.pnfsmanager=${dcache.service.pnfsmanager}
ftp.service.pnfsmanager.timeout=${gsiftpPnfsTimeout}
ftp.service.pnfsmanager.timeout.unit=SECONDS

#  Loginbroker registration settings
ftp.service.loginbroker=${dcache.service.loginbroker}
ftp.service.loginbroker.update-period=${dcache.service.loginbroker.update-period}
ftp.service.loginbroker.update-period.unit=${dcache.service.loginbroker.update-period.unit}
ftp.service.loginbroker.update-threshold=${dcache.service.loginbroker.update-threshold}
ftp.service.loginbroker.family=${ftp.service.loginbroker.family.${ftp.authn.protocol}}
ftp.service.loginbroker.version=${ftp.service.loginbroker.version.${ftp.authn.protocol}}
ftp.service.loginbroker.family.plain=ftp
ftp.service.loginbroker.version.plain=1.0.0
ftp.service.loginbroker.family.gsi=gsiftp
ftp.service.loginbroker.version.gsi=1.0.0
ftp.service.loginbroker.family.kerberos=gkftp
ftp.service.loginbroker.version.kerberos=1.0.0

#  gPlazma settings
ftp.service.gplazma=${dcache.service.gplazma}

#  billing settings
ftp.service.billing=${dcache.service.billing}

#  Implementation class
(immutable)ftp.implementation=${ftp.implementation.${ftp.authn.protocol}}
(immutable)ftp.implementation.plain=diskCacheV111.doors.WeakFtpDoorV1
(immutable)ftp.implementation.gsi=diskCacheV111.doors.GsiFtpDoorV1
(immutable)ftp.implementation.kerberos=diskCacheV111.doors.KerberosFtpDoorV1

#  Document which TCP ports are opened
(immutable)ftp/net.ports.tcp=${ftp.net.port} ${ftp.net.port-range}


# Old properties
(forbidden)ftp/port=Use ftp.net.port instead
(forbidden)ftp.read-only=Use ftp.authz.readonly
(forbidden)ftp/kerberos.service-principle-name=Use ftp.authn.kerberos.service-principle-name
(forbidden)ftp.authn.kpwd=Use gPlazma instead (possibly a localized gPlazma instance for this door)
