#  -----------------------------------------------------------------------
#     Default values for FTP doors
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  Cell names for FTP doors
#
ftp.cell.name.plain=FTP-${host.name}
ftp.cell.name.gsi=GFTP-${host.name}
ftp.cell.name.tls=FTPS-${host.name}
ftp.cell.name.kerberos=KFTP-${host.name}
ftp.cell.name=${ftp.cell.name.${ftp.authn.protocol}}

#  ---- Named queues to consume from
#
#   A service can consume messages from named queues. Other services can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
ftp.cell.consume = ${ftp.cell.name}
ftp.cell.subscribe=${ftp.loginbroker.request-topic},${ftp.topic.upload-cancelled}

#  Authentication scheme.
(one-of?plain|gsi|tls|kerberos)ftp.authn.protocol=plain

#  Service Principle Names for Kerberos authentication
#
#  You should not need to alter these.
#
ftp.authn.kerberos.service-principle-name=ftp/${host.fqdn}@${dcache.authn.kerberos.realm}
ftp.authn.kerberos.key-distribution-center-list=${dcache.authn.kerberos.key-distribution-center-list}

#  Path to host private key
ftp.authn.hostcert.key=${dcache.authn.hostcert.key}

#  Path to host certificate
ftp.authn.hostcert.cert=${dcache.authn.hostcert.cert}

#  Path to directory containing trusted CA certificates
ftp.authn.capath=${dcache.authn.capath}

# ---- Certificate Authority Namespace usage mode
(one-of?GLOBUS_EUGRIDPMA|EUGRIDPMA_GLOBUS|GLOBUS|EUGRIDPMA|GLOBUS_EUGRIDPMA_REQUIRE|EUGRIDPMA_GLOBUS_REQUIRE|GLOBUS_REQUIRE|EUGRIDPMA_REQUIRE|EUGRIDPMA_AND_GLOBUS|EUGRIDPMA_AND_GLOBUS_REQUIRE|IGNORE|${dcache.authn.namespace-mode})\
ftp.authn.namespace-mode=${dcache.authn.namespace-mode}

# ---- Certificate Revocation List usage mode
(one-of?REQUIRE|IF_VALID|IGNORE|${dcache.authn.crl-mode})\
ftp.authn.crl-mode=${dcache.authn.crl-mode}

# ---- On-line Certificate Status Protocol usage mode
(one-of?REQUIRE|IF_AVAILABLE|IGNORE|${dcache.authn.ocsp-mode})\
ftp.authn.ocsp-mode=${dcache.authn.ocsp-mode}

# ---- GSI Delegation key pair caching lifetime
ftp.authn.gsi.delegation.cache.lifetime = ${dcache.authn.gsi.delegation.cache.lifetime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.gsi.delegation.cache.lifetime.unit})\
ftp.authn.gsi.delegation.cache.lifetime.unit = ${dcache.authn.gsi.delegation.cache.lifetime.unit}

#  Authorization file for tape protection (only used if ftp.authz.staging.pep is 'doors')
ftp.authz.staging=${dcache.authz.staging}

#  Whether anonymous users are allowed to stage files (only used if ftp.authz.staging.pep is 'doors')
(one-of?true|false|${dcache.authz.anonymous-staging})ftp.authz.anonymous-staging = ${dcache.authz.anonymous-staging}

#  Where to put the policy enforcement point (PEP) for stage authorization
(one-of?doors|PoolManager|${dcache.authz.staging.pep})ftp.authz.staging.pep=${dcache.authz.staging.pep}


#  Anonymous FTP access
#
#  This is only supported by plain and tls ftp doors.

#  Control whether anonymous FTP is enable.
(one-of?true|false)ftp.enable.anonymous-ftp = false

#  The path to expose via anonymous FTP.  This is the directory an
#  anonymous user will see as their root.
ftp.anonymous-ftp.root = /

#  The username the client presents for anonymous access.
ftp.anonymous-ftp.user = anonymous

#  Whether to reject anonymous login attempts that do not provide a
#  password that is a valid formatted email address.
(one-of?true|false)\
ftp.anonymous-ftp.require-email-password = false

#  Whether regular username and password authentication is supported.
#  This property is only honoured by the plain and tls ftp doors.
(one-of?true|false)\
ftp.enable.username-password = true

#  Whether FTP door allows users to modify content
#
#  The ftp.authz.readonly property controls whether an FTP door will allow
#  users to upload files, delete files or otherwise modify dCache's
#  contents.
(one-of?true|false|${ftp.authz.readonly.${ftp.authn.protocol}})ftp.authz.readonly=${ftp.authz.readonly.${ftp.authn.protocol}}
(one-of?true|false)ftp.authz.readonly.plain=true
(one-of?true|false)ftp.authz.readonly.gsi=false
(one-of?true|false)ftp.authz.readonly.tls=false
(one-of?true|false)ftp.authz.readonly.kerberos=false

#  ---- Log aborted transfers
#
#  Under normal circumstances, when a file transfer is requested, the
#  requesting client will wait until that transfer completes (either
#  successfully or otherwise).  The client may abort the transfer,
#  which may indicate that the client believes there is some problem
#  with the transfer (e.g., a lack of progress).
#
#  If this option is enabled and a client aborts a transfer then
#  dCache will log internal status of that transfer, which may yield a
#  clue on what triggered the problem.
#
(one-of?true|false)ftp.enable.log-aborted-transfers = true

#  ---- Root path of FTP door
#
#   Specifies the root directory exposed through the FTP door.
#   If ftp.root has an empty value, then the user's root path is
#   used.  If ftp.root has a non-empty value then only the
#   specified sub-tree is visible and any user unable to
#   access that sub-tree will be denied.
#
ftp.root = ${dcache.root}

# TCP port number dCache will listen for incoming connections
ftp.net.port=${ftp.net.port.${ftp.authn.protocol}}
ftp.net.port.plain = 22126
ftp.net.port.kerberos = 22127
ftp.net.port.tls = 22130
ftp.net.port.gsi = 2811

#  Network interface to bind to
#
#  The network interface is identified by its IP address. Specify the wildcard
#  address, 0.0.0.0, to bind to all interfaces.
ftp.net.listen=${dcache.net.listen}

#  FTP passive mode port range
#
#  Used when the door accepts data channel connections from clients. Such
#  data channels are used for directory listing and when the door acts as
#  a proxy for the file transfer.
ftp.net.port-range=${dcache.net.wan.port.min}:${dcache.net.wan.port.max}

#  IP address for connections from pools to the FTP door
#
#  FTP doors in some cases act as proxies for the transfer. This
#  property specifies the IP of the interface on the door that the
#  pool will connect to. If empty, the door will choose a local
#  address. This address must not be a wildcard address.
ftp.net.internal =

#  Whether passive FTP transfers are relayed by the door
#
#  Passive FTP transfers are those where the client creates the data
#  channel connection to the server.
#
#  If this option is set to true, then all passive transfers are
#  relayed by the FTP door. If this option is set to false, then the
#  client is instructed to connect directly to the pool. This
#  requires that the pool allows inbound connections. Even when set
#  to false, there are several circumstances in which the connection
#  cannot be established directly to the pool due to limitations in
#  the FTP protocol. In such cases the connection will be relayed by
#  the door.
#
#  This setting is interpreted by both FTP doors and pools. For a
#  given combination of door and pool, a direct connection to the
#  pool can only be established if this setting is false at both the
#  door and the pool.
(one-of?true|false)ftp.proxy.on-passive=false

#  Whether active FTP transfers are relayed by the door
#
#  Active FTP transfers are those where the server creates the data
#  channel connection to the client.
#
#  If this option is set to true, then all active transfers are
#  relayed by the FTP door. If this option is set to false, then the
#  pool connects directly to the client. This requires that the pool
#  allows outbound connections. If the pool cannot establish the
#  connection to the client, then the transfer will fail.
(one-of?true|false)ftp.proxy.on-active=false

#  Period between successive GridFTP performance markers
#
#  This variable controls how often performance markers are written by
#  default.  Specifying a value of '0' will disable performance
#  markers by default.
#
#  Note that an FTP client may request that dCache sends performance
#  markers at a specific rate.  Such requests are always honoured,
#  provided the period is at least 2 seconds and not more than 5
#  minutes.
#
ftp.performance-marker-period = 70
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.performance-marker-period.unit = SECONDS

#  How many times to retry pool selection
#
#  If pool selection fails for some reason, the door may retry the
#  operation. This setting specifies how many times to retry before
#  the transfer fails.
ftp.limits.retries = 80

#  Maximum number of concurrent streams to allow
#
#  For GridFTP mode E transfers multiple TCP streams are used for the
#  data channel. In active FTP (server creates data channel), the
#  maximum number of channels allowed is controlled by this
#  property. For passive FTP (client creates data channel) the
#  maximum number cannot be controlled by the server.
ftp.limits.streams-per-client = 10

#  Limit on number of concurrent logins
#
#  Specifies the largest number of simultaneous logins to allow to an
#  FTP door.
ftp.limits.clients = 100

# ---- Whether to expect the haproxy Proxy Protocol
#
# Many load balancers and reverse proxies support the Proxy Protocol, a
# de facto standard introduced by the haproxy product. Support for this
# protocol has to be enabled in both the load balancer/reverse proxy and
# the backend service.
#
# If enabled, the proxy injects the actual clients IP address into the data
# stream, thus letting the backend be aware of the clients address.
#
# Both version 1 and version 2 of the proxy protocol is supported for the
# ftp door.
#
(one-of?true|false)ftp.enable.proxy-protocol = false

#  Whether to delete files after upload failures
#
#  When set to true, FTP doors delete files after upload failures.
(one-of?true|false)ftp.enable.delete-on-failure = true

#  Mover queue
#
#  The mover queue on the pool to which FTP transfers will be
#  scheduled. If blank, the default queue will be used.
ftp.mover.queue =

#  Whether existing files may be overwritten
#
#  Controls how to respond when a client attempts to upload data to a
#  file that already exists.  If set to 'false' then such attempts will
#  always fail.  If set to 'true' then the upload will succeed if the
#  user has sufficient permissions to delete the existing data.
#
#  Note that RFC 959 states:
#
#       STORE (STOR)
#
#       [...] If the file specified in the pathname exists at the
#       server site, then its contents shall be replaced by the data
#       being transferred.
#
#  By setting ftp.enable.overwrite to 'false', FTP doors will not be
#  standards-compliant and some clients may fail to operate
#  correctly.
(one-of?true|false|${dcache.enable.overwrite})ftp.enable.overwrite=${dcache.enable.overwrite}

#  FTP LIST output
#
#  FTP includes the LIST command, which provides information about a
#  file or directory.  The output from this command is unspecified,
#  with the understanding that it is some filesystem-specific format.
#
#  A common approach is for an FTP server to issue the 'ls -l' command
#  locally and simply copy the output.  Therefore, although the output
#  of this command is unspecified, people and some software expect the
#  output to be similar to the output of 'ls -l'.
#
#  Previous versions of dCache provided LIST output that looked like
#  'ls -l', but with rather different semantics.  This output is still
#  supported, through the 'legacy' option, providing backwards
#  compatibility with earlier dCache version.  However, please contact
#  <support@dcache.org> if you have clients that require this option
#  as we currently intend retire this option at some point.
#
(one-of?ls-l|legacy)ftp.list-format = ls-l

#  Flags to disable problematic crypto ciphers.
#
#  See dcache.authn.ciphers for details.
ftp.authn.ciphers=${dcache.authn.ciphers}

#  Whether to support space reservations
(one-of?true|false|${dcache.enable.space-reservation})ftp.enable.space-reservation=${dcache.enable.space-reservation}

#  Cell address of poolmanager service
ftp.service.poolmanager = ${ftp.service.poolmanager-space-${ftp.enable.space-reservation}}
(immutable)ftp.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)ftp.service.poolmanager-space-true=${dcache.service.spacemanager}

#  Timeout for poolmanager requests
ftp.service.poolmanager.timeout = 5400
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.poolmanager.timeout.unit = SECONDS


#  Timeout for pool requests
ftp.service.pool.timeout = 600
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.pool.timeout.unit = SECONDS

#  Cell address of pnfsmanager service
ftp.service.pnfsmanager=${dcache.service.pnfsmanager}

#  Timeout for pnfsmanager requests
ftp.service.pnfsmanager.timeout=300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)ftp.service.pnfsmanager.timeout.unit = SECONDS
#  Cell address of gplazma service
ftp.service.gplazma=${dcache.service.gplazma}

#  Cell address of spacemanager service
ftp.service.spacemanager=${dcache.service.spacemanager}

#  Cell address of billing service
ftp.service.billing=${dcache.topic.billing}

#  Topic on which to receive upload cancellations
ftp.topic.upload-cancelled = ${dcache.topic.upload-cancelled}

#  Topic to publish login broker updates to
ftp.loginbroker.update-topic=${dcache.loginbroker.update-topic}
ftp.loginbroker.request-topic=${dcache.loginbroker.request-topic}
ftp.loginbroker.tags=${dcache.loginbroker.tags}
ftp.loginbroker.update-period=${dcache.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})ftp.loginbroker.update-period.unit=${dcache.loginbroker.update-period.unit}
ftp.loginbroker.update-threshold=${dcache.loginbroker.update-threshold}
ftp.loginbroker.family=${ftp.loginbroker.family.${ftp.authn.protocol}}
ftp.loginbroker.version=${ftp.loginbroker.version.${ftp.authn.protocol}}
ftp.loginbroker.family.plain=ftp
ftp.loginbroker.version.plain=1.0.0
ftp.loginbroker.family.gsi=gsiftp
ftp.loginbroker.version.gsi=1.0.0
ftp.loginbroker.family.tls=ftps
ftp.loginbroker.version.tls=1.0.0
ftp.loginbroker.family.kerberos=gkftp
ftp.loginbroker.version.kerberos=1.0.0

##  This property is a space-separated list of hostnames or IP
##  addresses to publish for this door.  Hostnames are resolved to an
##  IP address on start-up, but not subsequently.  Non-wildcard IP
##  addresses are resolved to canonical name on start-up, but not
##  subsequently.  Wildcard IP addresses (0.0.0.0 or ::) are replaced
##  by a dynamically discovered list of IP addresses, based on which
##  network interfaces are "up".  These are resolved, with the
##  corresponding hostnames cached for a configurable period (see
##  'networkaddress.cache.ttl' system property).  An empty value is
##  equivalent to "0.0.0.0".
ftp.loginbroker.address = ${ftp.net.listen}
ftp.loginbroker.port = ${ftp.net.port}
ftp.loginbroker.root = ${ftp.root}

#  Implementation class
(immutable)ftp.implementation=${ftp.implementation.${ftp.authn.protocol}}
(immutable)ftp.implementation.plain=org.dcache.ftp.door.WeakFtpInterpreterFactory
(immutable)ftp.implementation.gsi=org.dcache.ftp.door.GsiFtpInterpreterFactory
(immutable)ftp.implementation.kerberos=org.dcache.ftp.door.KerberosFtpInterpreterFactory
(immutable)ftp.implementation.tls=org.dcache.ftp.door.TlsFtpInterpreterFactory

#  Document which TCP ports are opened
(immutable)ftp.net.ports.tcp=${ftp.net.port} ${ftp.net.port-range}

#  -----------------------------------------------------------------------
#         List of Subnets allowed to connect to the FTP Door
#  -----------------------------------------------------------------------
#  Space separated list of subnets (in CIDR notation) and IP addresses
#  See dcache.net.allowed-subnets for details
ftp.net.allowed-subnets=${dcache.net.allowed-subnets}

(forbidden)ftp.authz.upload-directory=See gplazma.authz.upload-directory
(obsolete)ftp.cell.export = See ftp.cell.consume
(obsolete)ftp.transaction-log = Use the access log instead


#  ---- Kafka service enabled
#
(one-of?true|false|${dcache.enable.kafka})ftp.enable.kafka = ${dcache.enable.kafka}
ftp.kafka.maximum-block = ${dcache.kafka.maximum-block}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.kafka.maximum-block.unit})\
ftp.kafka.maximum-block.unit = ${dcache.kafka.maximum-block.unit}

# A list of host/port pairs (brokers) host1:port1,host2:port2,....
ftp.kafka.bootstrap-servers = ${dcache.kafka.bootstrap-servers}

# Kafka topic name
ftp.kafka.topic = ${dcache.kafka.topic}

# File from which to load additional Kafka properties.
ftp.kafka.config-file = ${dcache.kafka.config-file}
