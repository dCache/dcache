#  -----------------------------------------------------------------------
#     Default values for spacemanager
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Name of the service
#
#   This is the logical name of the service. The service name is usually
#   the name other service use to reach this service.
#
spacemanager.cell.service = ${dcache.queue.spacemanager}

#  ---- Cell name of space manager
#
#   This property defines the cell name of the space manager service.
#
spacemanager.cell.name = ${dcache.queue.spacemanager}

#  ----- Whether the service is replicable
#
#   Any service in dCache can have several instances as long as these
#   represent separate logical services. Some services can have several
#   instances representing the same logical service, providing some
#   degree of fault tolerance and load balancing. Such services are said
#   to be replicable.
#
#   Instances of a logical service share the same service name, and it is
#   important that the configuration for such instances is synchronized.
#
#   This property indicates if this service is replicable.
#
#   Note: it is the administrator's responsibility to ensure that all
#   spacemanager service instances:
#
#       o  have consistent dCache 'spacemanager.' configuration,
#
#       o  share the same database.
#
(immutable)spacemanager.cell.replicable = true

#  ---- Named queues to consume from
#
#   A service can consume messages from named queues. Other services can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
spacemanager.cell.consume = ${spacemanager.cell.service}
spacemanager.cell.subscribe=${spacemanager.pool-monitor.topic},${dcache.topic.watched}

# ---- Allow uploads to link groups outside of space reservation
#
#   If set to false, uploads using links in a link group are only possible by
#   creating a space reservation and either bind the space token to a directory
#   through the writeToken tag, or to explicitly upload to that space reservation
#   with SRM. Other uploads will be served with links not in any link group.
#
#   If set to true, uploads that are not bound to any particular space
#   reservation can still be served by links in a link group if the
#   user is authorized to reserve space in the link group.
#
(one-of?true|false)spacemanager.enable.unreserved-uploads-to-linkgroups = false

# ---- Location of LinkGroupAuthorizationFile
#
#   The LinkGroupAuthorizationFileName file contains the list of VOMS
#   FQANs that are allowed to make space reservations within a given
#   link group.
#
spacemanager.authz.link-group-file-name =

spacemanager.link-groups-update.period=3
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.link-groups-update.period.unit=MINUTES

spacemanager.expire-space-reservation.period=3
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.expire-space-reservation.period.unit=MINUTES

# ---- Delay before removing expired or released reservations
#
#   Once a space reservation expires or is released, it has no further influence
#   on space management. It is however kept in the database for awhile to allow
#   the space reservation to be recovered in case it was released by mistake.
#
#   This property controls how long space manager waits after the expiration date
#   before it deletes such reservations permanently. Files in dCache are not
#   deleted by this. Reservations without an expiration date are not automatically
#   deleted. These can be purged manually using the 'purge spaces' command in the
#   space manager admin interface.
spacemanager.perished-space-purge-delay = 30
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.perished-space-purge-delay.unit = DAYS

# Cell address of pnfsmanager service
spacemanager.service.pnfsmanager=${dcache.service.pnfsmanager}
spacemanager.service.pnfsmanager.timeout=300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.service.pnfsmanager.timeout.unit=SECONDS

# Cell address of poolmanager service
spacemanager.service.poolmanager=${dcache.service.poolmanager}
spacemanager.service.poolmanager.timeout=300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)spacemanager.service.poolmanager.timeout.unit=SECONDS

# ---- Number of concurrent threads used by space manager
#
# Each thread will likely obtain a connection to the database, meaning the thread limit
# and the database connection limit should be in the same ballpark. It is best to keep
# the connection limit a little higher than the number of threads, as there are a few
# periodic background tasks consuming connections too.
#
spacemanager.limits.threads=20

# ---- Whether space manager is enabled
#
#  If set to false, the spacemanager service will disable itself.
(one-of?true|false|${dcache.enable.space-reservation})spacemanager.enable.space-reservation=${dcache.enable.space-reservation}

# Topic on which to expect pool monitor updates
spacemanager.pool-monitor.topic = ${dcache.pool-monitor.topic}

# Host name of space manager database
#
# See dcache.db.host for details.
#
spacemanager.db.host = ${dcache.db.host}

# Database name of space manager database
spacemanager.db.name = spacemanager

# Account name used to access space manager database
spacemanager.db.user = ${dcache.db.user}

# Account password used to access space manager database
spacemanager.db.password = ${dcache.db.password}

# ---- Database password file
spacemanager.db.password.file= ${dcache.db.password.file}

# JDBC URL used to access space manager database
spacemanager.db.url = jdbc:postgresql://${spacemanager.db.host}/${spacemanager.db.name}?targetServerType=master

#
# The maximum number of concurrent database connections.
#
spacemanager.db.connections.max=30

#
# The minimum number of idle database connections.
#
spacemanager.db.connections.idle = 1


#  ---- Whether to manage the database schema automatically during startup
#
# If set to 'false' then the "dcache database update" command must be used to
# check if database schema needs to be updated and apply any necessary changes.
spacemanager.db.schema.auto=${dcache.db.schema.auto}

# Liquibase schema definition
spacemanager.db.schema.changelog=diskCacheV111/services/space/db/spacemanager.changelog-master.xml


(obsolete)spacemanager.cell.export = See spacemanager.cell.consume
