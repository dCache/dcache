#  -----------------------------------------------------------------------
#     Default values for gPlazma configuration
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Name of the service
#
#   This is the logical name of the service. The service name is usually
#   the name other service use to reach this service.
#
gplazma.cell.service = ${dcache.queue.gplazma}

#  ---- Name of the gPlazma cell
#
#  The name gPlazma will use when running.
gplazma.cell.name = ${dcache.queue.gplazma}

#  ----- Whether the service is replicable
#
#   Any service in dCache can have several instances as long as these
#   represent separate logical services. Some services can have several
#   instances representing the same logical service, providing some
#   degree of fault tolerance and load balancing. Such services are said
#   to be replicable.
#
#   Instances of a logical service share the same service name, and it is
#   important that the configuration for such instances is synchronized.
#
#   This property indicates if this service is replicable.
#
#   Note: it is the administrator's responsibility to ensure that all
#   gplazma service instances have:
#
#       o  consistent dCache 'gplazma.' configuration,
#
#       o  the same gPlazma configuration (see
#          gplazma.configuration.file),
#
#       o  the same configuration for each configured gPlazma plugin.
#
(immutable)gplazma.cell.replicable = true


#  ---- Maximum number of concurrent requests to process.
#
#  The number of login requests that gPlazma will process
#  concurrently.  Setting this number too high may result in large
#  spikes of CPU activity and the potential to run out of memory.
#  Setting the number too lower results in potentially slow login
#  activity.
#
(obsolete)gplazma.cell.limits.threads = See gplazma.cell.max-message-threads
gplazma.cell.max-message-threads = 30

#  ---- Maximum number of requests to queue.
#
#  The number of login requests that gPlazma will queue before
#  rejecting requests. Unlimited if left empty.
#
gplazma.cell.max-messages-queued=

#  ---- Named queues to consume from
#
#   A service can consume messages from named queues. Other services can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
gplazma.cell.consume = ${gplazma.cell.service}

#  ---- Topics to which the service subscribes
#
#   A service can subscribe to messages on topics. Other services can
#   write messages to such topics and all subscribers receive such
#   messages. A topic has an unqualified cell address, that is, an
#   address without a domain name.
#
#   This property contains a comma separated list of topics to
#   subscribe to.
#
gplazma.cell.subscribe = ${dcache.topic.watched}

#  ---- Location of the configuration file
#
#  The location of the gPlazma configuration file.  This controls
#  which plugins are used to authenticate end-users, in which order
#  and how the plugins are configured.
#
gplazma.configuration.file=${dcache.paths.etc}/gplazma.conf

#  Cell address of pnfsmanager service
gplazma.service.pnfsmanager=${dcache.service.pnfsmanager}


#  ---- Upload directory
#
#   Users are restricted so they may only access files beneath their per-user-root
#   directory (which is not to be confused with the general root directory of a
#   door).
#   The upload directory is an exception to this rule. The directory is typically
#   used by SRM for uploading files.
#
#   If the property is defined as a relative path, it is interpreted relative to
#   a user's root directory.
#
#   This directory should likely be added to any options that impose further path-
#   based access restrictions on doors, if these options are used, for example:
#   wedav.authz.allowed-paths and xrootd.authz.write-paths
#
gplazma.authz.upload-directory=${dcache.upload-directory}


#  -----------------------------------------------------------------------
#         Properties for gPlazma plugins
#  -----------------------------------------------------------------------

#  ---- Path of the grid-mapfile file
gplazma.gridmap.file=${dcache.paths.grid-security}/grid-mapfile

#  ---- Path of the multi-map file
gplazma.multimap.file=${dcache.paths.etc}/multi-mapfile

#  ---- Path of the storage-authzdb file
gplazma.authzdb.file=${dcache.paths.grid-security}/storage-authzdb

#  ---- Mapping order for determining the UID
#
#  The storage-authzdb file maps names to UID, one or more GIDs, and a
#  number of attributes.
#
#  The authzdb plugin is typically used with other plugins and map
#  user credentials to user and group names. Typical examples are
#  gridmap (maps DN to user name) and vorolemap (maps FQAN to group
#  name). The authzdb plugin maps both user names and group names to
#  UID and GIDs.
#
#  The authzdb plugin can be configured how it selects the mapping
#  that determines the UID to use. The property is an ordered comma
#  separated list of shortcuts of principal that are consulted to
#  select among several possible mappings. The available principle
#  shortcuts are:
#
#   uid Some protocols (specifically DCAP) allow the client to specify
#       a UID explicitly. The UID can be used to disambiguate between
#       several available mappings. Note that a client provided UID is
#       not in itself enough to authorize use of a mapping.
#
#   login Some protocols (DCAP, FTP, among others) allow a login name
#         to be specified in addition to regular X.509 or Kerberos
#         authentication. The login name may be used to disambiguate
#         between several available mappings. Note that a client
#         provided login name is not in itself enough to authorize use
#         of a mapping.
#
#   user The authzdb plugin is always combined with other plugins,
#        such as the gridmap plugin. Such plugins map may map to user
#        names, which both authorize the use of a mapping in
#        storage-authzdb and may determine the mapping being used.
#
#   group The authzdb plugin is always combined with other plugins,
#        such as the vorolemap plugin. Such plugins map may map to
#        group names, which both authorize the use of a mapping in
#        storage-authzdb and may determine the mapping being used. In
#        this case the primary group name will determine the mapping
#        from which the UID is taken.
#
#  With the default setting tha set of candidate mappings (the
#  mappings the user is authorized to use) is determined by the user
#  and group names generated by other plugin (eg gridmap and
#  vorolemap). To select one of the mappings, a user provided UID is
#  consulted; if not avilable a user provided login name is consulted;
#  if not available the mapping of a user name generated by another
#  plugin is consulted (eg gridmap); if not available the mapping of a
#  primary group name generated by another plugin is consulted (eg
#  vorolemap).
#
#  A typical reason to change the default is if one wants to give
#  priority to the group name mapping rather than the user name
#  mapping; Eg when combined with gridmap and vorolemap, changing this
#  property to uid,login,group,user means that the primary group name
#  as generated by vorolemap determines the UID and only if that is
#  not available will the user name generated by gridmap be used.
#
gplazma.authzdb.uid=uid,login,user,group

#  ---- Mapping order for determining the primary GID
#
#  Similar to gplazma.authzdb.uid, but determines how the primary GID
#  is selected. The same principal shortcuts are available, with the
#  exception of uid; instead a user provided GID is consulted when the
#  gid shortcut is used.
#
#  A typical reason to change the default is if one wants to give
#  priority to the user name mapping rather than the group name
#  mapping; Eg when combined with gridmap and vorolemap, changing this
#  property to gid,login,user,group means that the user name as
#  generated by gridmap determines the primary GID and only if that is
#  not available will the primary group name generated by vorolemap be
#  used.
#
gplazma.authzdb.gid=gid,login,group,user

#  Path to the directory containing IGTF .info files.
#
#  This is normally the same directory that contains all the
#  Certificate Authority certificates.
#
gplazma.x509.igtf-info.path = ${dcache.authn.capath}

#  ---- Path to the vomsdir directory
gplazma.vomsdir.dir=${dcache.authn.vomsdir}

#  ---- Path to the directory containing trusted CA certificates
gplazma.vomsdir.ca=${dcache.authn.capath}

#  ---- Path to the grid-vorolemap file
gplazma.vorolemap.file=${dcache.paths.grid-security}/grid-vorolemap

#  ---- Password of the host key, if any
gplazma.argus.hostkey.password=

#  ---- Path to the PEM encoded host key
gplazma.argus.hostkey=${dcache.authn.hostcert.key}

#  ---- Path to the PEM encoded host certificate
gplazma.argus.hostcert=${dcache.authn.hostcert.cert}

#  ---- Path to the directory containing trusted CA certificates
gplazma.argus.ca=${dcache.authn.capath}

#  ---- Argus resource ID
gplazma.argus.resource=dcache

#  ---- Argus action ID
gplazma.argus.action=access

#  ---- Argus endpoint
gplazma.argus.endpoint=https://localhost:8154/authz

#  ---- Path to kpwd file
gplazma.kpwd.file = ${dcache.paths.etc}/dcache.kpwd

#  ---- NIS server host
gplazma.nis.server=

#  ---- NIS domain name
gplazma.nis.domain=

#  ---- JAAS application name
#
# Identifies the section in the JAAS configuration to use.
#
gplazma.jaas.name=gplazma

#  ---- Path to the PEM encoded host key
gplazma.xacml.hostkey=${dcache.authn.hostcert.key}

#  ---- Path to the PEM encoded host certificate
gplazma.xacml.hostcert=${dcache.authn.hostcert.cert}

#  ---- Path to the directory containing trusted CA certificates
gplazma.xacml.ca=${dcache.authn.capath}

#  ---- Path to the vomsdir directory
gplazma.xacml.vomsdir=${dcache.authn.vomsdir}

# ---- LDAP plugin
#
# LDAP server url, eg ldap://ldap.example.org:389
#
gplazma.ldap.url =

# LDAP authentication mechanism
(one-of?none|simple)gplazma.ldap.auth=none

# bind DN used by simple authentication
gplazma.ldap.binddn=uid=someuser,ou=people,o=example,c=org

# bind DN's password used by simple authentication
gplazma.ldap.bindpw=

gplazma.ldap.organization = o=YOUR-SITE,c=YOUR-COUNTRY
gplazma.ldap.tree.people = People
gplazma.ldap.tree.groups = Groups
#
# The search filter to use to locate a user's entry in the LDAP directory.
# It must contain the special token "%s" which will be replaced with the
# supplied username value before the name is used
#
# Some examples:
#    "(uid=%s)"
#    "(&(uid=%s)(objectClass=inetOrgPerson))"
#
gplazma.ldap.userfilter = (uid=%s)

# Use RFC2307 or RFC2307bis LDAP schema types. The difference between RFC2307
# and RFC2307bis is the way which group membership is stored in the LDAP server.
# In an RFC 2307 server, group members are stored as the multi-valued memberuid
# attribute, which contains the name of the users that are members. In an RFC2307bis
# server, group members are stored as the multi-valued member or uniqueMember
# attribute which contains the DN of the user or group that is a member of this group.
# The default is more common RFC 2307, which uses memberUid.
(one-of?memberUid|uniqueMember)gplazma.ldap.group-member = memberUid

#
# The LDAP session plugin assigns two directories to the user's session:
# The root directory, which is the root of the directory hierarchy visible
# to the user and the home directory, which is the directory the user starts
# his session in. In "normal" mode (this is the default), the root directory
# is set to "/" and the home directory is set to "%homeDirectory%", thus the
# user starts his session in the home directory, as it is stored on the LDAP
# server, and is able to go up in the directory hierarchy to "/".
# For a different use-case, for example if dCache is used as a cloud storage
# it may not be wanted that the users can see more than their own storage space.
# For this use case home-dir can be set to "/" and root-dir be set to
# "%homeDirectory".
#
# In both variables %homeDirectory% will be replaced by the user's home
# directory as it is stored on the LDAP server.
#
gplazma.ldap.home-dir = %homeDirectory%
gplazma.ldap.root-dir = /


# ---- BanFile plugin
#

# BanFile config file
gplazma.banfile.path = ${dcache.paths.etc}/ban.conf

# ---- htpasswd plugin
gplazma.htpasswd.file = ${dcache.paths.etc}/htpasswd
gplazma.htpasswd.file.cache-period = 1
gplazma.htpasswd.file.cache-period.unit = SECONDS


# ---- OpenID Connect Plugins
#

# OpenID Connect hostnames
# For example: accounts.google.com   idc-iam.example.org  openidconnect.ebay.com   login.salesforce.com
gplazma.oidc.hostnames = ${dcache.oidc.hostnames}


# ---- Roles plugin
#
#   Roles allow dCache to behave differently between two successful
#   login sessions for the same user, when using the same credentials.
#   By default, no roles are requested when a user logs in; however,
#   the user can request one or more roles when they authenticate.
#   The mechanism for requesting a role is specific to the protocol
#   and often authentication mechanism.
#
#   One supported role is "admin".  A user that is successful in
#   requesting the "admin" role is authorized to do all operations in
#   dCache.  Such users are equivalent to the root user, but retain
#   their identity; for example, namespace entities have their
#   ownership and activity is logged against that user.
#
#   The following property describes the gid of a group a user must be
#   a member of before they are authorized to obtain admin role.
#
gplazma.roles.admin-gid = 0

#
#
#  -----------------------------------------------------------------------
#         Old properties.
#  -----------------------------------------------------------------------
#
#  The following properties are no longer supported.
#

(obsolete)gplazma.enable.plugin-creation-caching = plugins are never cached
(obsolete)gplazma.xacml.vomsdir.dir = Use gplazma.xacml.vomsdir
(obsolete)gplazma.xacml.vomsdir.ca = Use gplazma.xacml.ca
(obsolete)gplazma.cell.export = See gplazma.cell.consume
(obsolete)gplazma.x509.use-policy-principals =
