# -----------------------------------------------------------------------
#    Default values for srm
# -----------------------------------------------------------------------
#
# This Java properties file contains default values for srm
# configuration parameters. All values can be redefined in
# etc/dcache.conf. Do not modify any values here as your changes will
# be lost when you next upgrade.

# ---- Cell names
#
srm.cell.name=SRM-${host.name}

#  ---- Whether to export the srm as a well known cell
#
#  This property controls whether the srm cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)srm.cell.export=true

#  ---- TCP Port
#
#  The port SRM will listen on for GSI-based communication.  GSI is an
#  encrypted transport commonly used in grid communication.  It is
#  similar to SSL but incompatible.
#
(deprecated)srmPort=8443
srm.net.port=${srmPort}
#
#  The port SRM will listen on for SSL-based communication.  SSL is an
#  industry standard encryption transport.
#
(deprecated)srm.ssl.port=8445
srm.net.ssl-port=${srm.ssl.port}

#  The interface SRM will listen on.
srm.net.listen=${dcache.net.listen}


# ---- Host name of srm service
#
# For certain operations srm needs to know its domain name.  The
# property "srmHost" can be used to override the default value.  If
# this value is not set, the value is detected automatically and it is
# equivalent to the output of the unix hostname program.
#
(deprecated)srmHost=${host.fqdn}
srm.net.host=${srmHost}


# ---- Host names of srm services in this deployment
#
# A host part of the source url (surl) is used to determine if the
# surl references file in this storage system.  In case of the copy
# operation, srm needs to be able to dinstinguish between the local
# surl and the remote one.  Also srm needs to refuse to perform
# operations on non local srm urls. localSrmHosts is a comma separated
# list of hosts that will be considered local by this srm service.
# This parameter might need to be defined as a list because in case of
# the multihomed or distributed server it may have more than one
# network name.  If localSrmHosts is not specified, srmHost will be
# used
#
(deprecated)localSrmHosts=${srm.net.host}
srm.net.local-hosts=${localSrmHosts}


# ---- Client side transport layer encryption
#
# The security transport to use when contacting remote SRM instances.  GSI
# (Grid Security Infrastructure) is the commonly deployed protocol, but SSL
# is the industrial standard.  This property is only used for third-party
# copies (srmCopy).
#
(deprecated,one-of?SSL|GSI)srmClientTransport=GSI
(one-of?SSL|GSI|${srmClientTransport})srm.client-transport=${srmClientTransport}


# ---- Database host name
#
(deprecated)srmDatabaseHost=localhost
srm.db.host=${srmDatabaseHost}

# ---- Database name
(deprecated)srmDbName=dcache
srm.db.name=${srmDbName}


# ---- Database user name
(deprecated)srmDbUser=srmdcache
srm.db.user=${srmDbUser}

# ---- Database password
(deprecated)srmDbPassword=srmdcache
srm.db.password=${srmDbPassword}

# ---- Database password file
(deprecated)srmPasswordFile=
srm.db.password.file=${srmPasswordFile}

# ---- Database JDBC driver
srm.db.driver=org.postgresql.Driver

# ---- Database JDBC URL
srm.db.url=jdbc:postgresql://${srm.db.host}/${srm.db.name}

(immutable)srm.db.schema.auto=true

# ---- TCP streams to use for GridFTP transfer
#
#   The number of concurrent TCP streams used by srmCopy controlled
#   GridFTP tranfers.
#
(deprecated)parallelStreams=10
srm.limits.parallel-streams=${parallelStreams}

# ---- Timeout of the external srmCopy script
#
#   Timeout in seconds, how long to wait for the completion of the
#   transfer via external client, should the external client be used
#   for the MSS to MSS transfers.
#
(deprecated)srmTimeout=3600
srm.limits.external-copy-script.timeout=${srmTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.limits.external-copy-script.timeout.unit=SECONDS


# ---- Buffer size used for srmCopy transfer
#
#   Specified in bytes.
#
(deprecated)srmBufferSize=1048576
srm.limits.transfer-buffer.size=${srmBufferSize}

# ---- TCP buffer size used for srmCopy transfer
#
#   Specified in bytes.
#
(deprecated)srmTcpBufferSize=1048576
srm.limits.transfer-tcp-buffer.size=${srmTcpBufferSize}

# ---- Controls debug functionality of the external srmCopy script
#
(deprecated,one-of?true|false)srmDebug=true
(one-of?true|fale|${srmDebug})srm.enable.external-copy-script.debug=${srmDebug}

# ---- Threads that accept TCP connections
(deprecated)srmJettyConnectorAcceptors=1
srm.limits.jetty-connector.acceptors=${srmJettyConnectorAcceptors}

# ---- Milliseconds before an idle TCP connection is closed
(deprecated)srmJettyConnectorMaxIdleTime=60000
srm.limits.jetty-connector.idle-time.max=${srmJettyConnectorMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.limits.jetty-connector.idle-time.max.unit=MILLISECONDS

# --- Handshake timeout
srm.limits.jetty-connector.handshake.timeout=10000
(one-of?MILLISECONDS|SECONDS|MINUTES)srm.limits.jetty-connector.handshake.timeout.unit=MILLISECONDS

# ---- Milliseconds before an idle TCP connection is closed during high load
(deprecated)srmJettyConnectorLowResourceMaxIdleTime=20000
srm.limits.jetty-connector.low-resource.max.idle-time=${srmJettyConnectorLowResourceMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.limits.jetty-connector.low-resource.max.idle-time.unit=MILLISECONDS

# ---- TCP backlog for SRM connections
(deprecated)srmJettyConnectorBackLog=1024
srm.limits.jetty-connector.backlog=${srmJettyConnectorBackLog}

# ---- Maximum number of threads used for SRM request processing
#
# Whenever a client submits an SRM request a thread is allocated. This
# setting controls the maximum number of such threads.
#
# Notice that this does not control the number of SRM transfers that
# can be active at any given time: An SRM transfer involves several
# requests by the client (eg srmPrepareToGet, srmStatusOfGetRequest,
# srmReleaseFiles).
#
# There is also a choice whether to process requests synchronously or
# asynchronously. If processed synchronously, the request is not
# answered until processed. This means that a thread is bound to the
# request for the duration of the request processing. If prcessed
# asynchronous, the thread is released right away and the client
# submits new requests to poll for the completion of the previously
# submitted request. This adds latency and increases authentication
# overhead, but frees thread and TCP connections.
#
(deprecated)srmJettyThreadsMax=500
srm.limits.jetty.threads.max=${srmJettyThreadsMax}

# ---- Minimum number of threads used for SRM request processing
(deprecated)srmJettyThreadsMin=10
srm.limits.jetty.threads.min=${srmJettyThreadsMin}


# ---- Milliseconds before an idle requst processing thread is terminated
(deprecated)srmJettyThreadsMaxIdleTime=30000
srm.limits.jetty.threads.idle-time.max=${srmJettyThreadsMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.limits.jetty.threads.idle-time.max.unit=MILLISECONDS

# ---- Maximum number of queued SRM requests
#
# Once the limit is reached no new connections will be accepted;
# instead, the operating system will queue them in the TCP backlog.
# Once the TCP backlog is filled, the operating system will reject
# further TCP connections.
#
(deprecated)srmJettyThreadsMaxQueued=500
srm.limits.jetty.threads.queued.max=${srmJettyThreadsMaxQueued}


# ---- General SRM request parameters

srm.limits.request.scheduler.thread.queue.size=${srmGetReqThreadQueueSize}
srm.limits.request.scheduler.thread.pool.size=${srmGetReqThreadPoolSize}
srm.limits.request.scheduler.waiting.max=${srmGetReqMaxWaitingRequests}
srm.limits.request.scheduler.ready-queue.size=${srmGetReqReadyQueueSize}
srm.limits.request.scheduler.ready.max=${srmGetReqMaxReadyRequests}
srm.limits.request.scheduler.retries.max=${srmGetReqMaxNumberOfRetries}
srm.limits.request.scheduler.retry-timeout=${srmGetReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.limits.request.scheduler.retry-timeout.unit=MILLISECONDS
srm.limits.request.scheduler.same-owner-running.max=${srmGetReqMaxNumOfRunningBySameOwner}

# ---- Enable storing requests in database
#
(deprecated,one-of?true|false)srmDatabaseEnabled=true
(one-of?true|false|${srmDatabaseEnabled})srm.request.enable.database=${srmDatabaseEnabled}

# ---- Enable cleaning of pending requests during restart
#
# If enabled and the srm is restarted and there are pending requests
# their state will change to Failed or Done.
#
(deprecated,one-of?true|false)srmCleanPendingRequestsOnRestart=false
(one-of?true|false|${srmCleanPendingRequestsOnRestart})srm.request.enable.clean-pending-on-restart=${srmCleanPendingRequestsOnRestart}

# ---- Days before old transfers are removed from the database
#
# The srm will hold SRM requests and their history in database for
# srm.limits.request.keep-history-period days after that they will be removed.
#
(deprecated)srmKeepRequestHistoryPeriod=10
srm.limits.request.keep-history-period=${srmKeepRequestHistoryPeriod}
(one-of?HOURS|DAYS)srm.limits.request.keep-history-period.unit=DAYS

# ---- Seconds between removing old transfers from the database
#
# How frequently to remove old requests from the database.
#
(deprecated)srmExpiredRequestRemovalPeriod=60
srm.limits.request.remove-expired-period=${srmExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.limits.request.remove-expired-period.unit=SECONDS

# ---- Enables SRM request transition history logging
#
# Enables logging of transition history of SRM request in the
# database. The request transitions can be examined through the
# command line interface or through the the srmWatch monitoring tool.
#
# Enabling this feature increases the size and load of the database.
#
(deprecated,one-of?true|false)srmRequestHistoryDatabaseEnabled=false
(one-of?true|false|${srmRequestHistoryDatabaseEnabled})srm.request.enable.history-database=${srmRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false)srmStoreCompletedRequestsOnly=false
(one-of?true|false|${srmStoreCompletedRequestsOnly})srm.request.enable.store-complete-only=${srmStoreCompletedRequestsOnly}


# ---- Milliseconds until  requests are processed asynchronously
#
# Some SRM operations may be processed synchronously or
# asynchronously, at the server's discretion.  dCache can start to
# process such requests synchronously and, if this is taking too long,
# reply asynchronously and continue to work on the operation
# background.
#
# This setting specifies the time in milliseconds after which get
# requests are handled asynchronously. Set to 'infinity' to disable
# asynchronous processing.
#
# Asynchronous processing avoids holding TCP connections to the server
# while the request is processed.
#
srm.limits.request.switch-to-async-mode.delay=${srmGetReqSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|SECONDS|MINUTES)srm.limits.request.switch-to-async-mode.delay.unit=MILLISECONDS


# Get requests settings

(deprecated)srmGetReqThreadQueueSize=10000
srm.limits.request.get.scheduler.thread.queue.size=${srm.limits.request.scheduler.thread.queue.size}

(deprecated)srmGetReqThreadPoolSize=250
srm.limits.request.get.scheduler.thread.pool.size=${srm.limits.request.scheduler.thread.pool.size}

(deprecated)srmGetReqMaxWaitingRequests=1000
srm.limits.request.get.scheduler.waiting.max=${srm.limits.request.scheduler.waiting.max}

(deprecated)srmGetReqReadyQueueSize=10000
srm.limits.request.get.scheduler.ready-queue.size=${srm.limits.request.scheduler.ready-queue.size}

(deprecated)srmGetReqMaxReadyRequests=2000
srm.limits.request.get.scheduler.ready.max=${srm.limits.request.scheduler.ready.max}

(deprecated)srmGetReqMaxNumberOfRetries=10
srm.limits.request.get.scheduler.retries.max=${srm.limits.request.scheduler.retries.max}

(deprecated)srmGetReqRetryTimeout=60000
srm.limits.request.get.scheduler.retry-timeout=${srm.limits.request.scheduler.retry-timeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.scheduler.retry-timeout.unit})srm.limits.request.get.scheduler.retry-timeout.unit=${srm.limits.request.scheduler.retry-timeout.unit}

(deprecated)srmGetReqMaxNumOfRunningBySameOwner=100
srm.limits.request.get.scheduler.same-owner-running.max=${srm.limits.request.scheduler.same-owner-running.max}

(deprecated,one-of?true|false|${srm.request.enable.database})srmGetDatabaseEnabled=${srm.request.enable.database}
(one-of?true|false|${srmGetDatabaseEnabled})srm.request.get.enable.database=${srmGetDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.clean-pending-on-restart})srmGetCleanPendingRequestsOnRestart=${srm.request.enable.clean-pending-on-restart}
(one-of?true|false|${srmGetCleanPendingRequestsOnRestart})srm.request.get.enable.clean-pending-on-restart=${srmGetCleanPendingRequestsOnRestart}

(deprecated)srmGetKeepRequestHistoryPeriod=${srm.limits.request.keep-history-period}
srm.limits.request.get.keep-history-period=${srmGetKeepRequestHistoryPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.keep-history-period.unit})srm.limits.request.get.keep-history-period.unit=${srm.limits.request.keep-history-period.unit}


(deprecated)srmGetExpiredRequestRemovalPeriod=${srm.limits.request.remove-expired-period}
srm.limits.request.get.remove-expired-period=${srmGetExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.remove-expired-period.unit})srm.limits.request.get.remove-expired-period.unit=${srm.limits.request.remove-expired-period.unit}

(deprecated,one-of?true|false|${srm.request.enable.history-database})srmGetRequestHistoryDatabaseEnabled=${srm.request.enable.history-database}
(one-of?true|false|${srmGetRequestHistoryDatabaseEnabled})srm.request.get.enable.history-database=${srmGetRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.store-complete-only})srmGetStoreCompletedRequestsOnly=${srm.request.enable.store-complete-only}
(one-of?true|false|${srmGetStoreCompletedRequestsOnly})srm.request.get.enable.store-complete-only=${srmGetStoreCompletedRequestsOnly}

(deprecated)srmGetReqSwitchToAsynchronousModeDelay=1000
srm.limits.request.get.switch-to-async-mode.delay=${srm.limits.request.switch-to-async-mode.delay}
(one-of?MILLISECONDS|SECONDS|MINUTES|${srm.limits.request.switch-to-async-mode.delay.unit})srm.limits.request.get.switch-to-async-mode.delay.unit=${srm.limits.request.switch-to-async-mode.delay.unit}

# Bring online requests settings

(deprecated)srmBringOnlineReqThreadQueueSize=${srm.limits.request.scheduler.thread.queue.size}
srm.limits.request.bring-online.scheduler.thread.queue.size=${srmBringOnlineReqThreadQueueSize}

(deprecated)srmBringOnlineReqThreadPoolSize=${srm.limits.request.scheduler.thread.pool.size}
srm.limits.request.bring-online.scheduler.thread.pool.size=${srmBringOnlineReqThreadPoolSize}

(deprecated)srmBringOnlineReqMaxWaitingRequests=${srm.limits.request.scheduler.waiting.max}
srm.limits.request.bring-online.scheduler.waiting.max=${srmBringOnlineReqMaxWaitingRequests}

(deprecated)srmBringOnlineReqReadyQueueSize=${srm.limits.request.scheduler.ready-queue.size}
srm.limits.request.bring-online.scheduler.ready-queue.size=${srmBringOnlineReqReadyQueueSize}

(deprecated)srmBringOnlineReqMaxReadyRequests=${srm.limits.request.scheduler.ready.max}
srm.limits.request.bring-online.scheduler.ready.max=${srmBringOnlineReqMaxReadyRequests}

(deprecated)srmBringOnlineReqMaxNumberOfRetries=${srm.limits.request.scheduler.retries.max}
srm.limits.request.bring-online.scheduler.retries.max=${srmBringOnlineReqMaxNumberOfRetries}

(deprecated)srmBringOnlineReqRetryTimeout=${srm.limits.request.scheduler.retry-timeout}
srm.limits.request.bring-online.scheduler.retry-timeout=${srmBringOnlineReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.scheduler.retry-timeout.unit})srm.limits.request.bring-online.scheduler.retry-timeout.unit=${srm.limits.request.scheduler.retry-timeout.unit}

(deprecated)srmBringOnlineReqMaxNumOfRunningBySameOwner=${srm.limits.request.scheduler.same-owner-running.max}
srm.limits.request.bring-online.scheduler.same-owner-running.max=${srmBringOnlineReqMaxNumOfRunningBySameOwner}

(deprecated,one-of?true|false|${srm.request.enable.database})srmBringOnlineDatabaseEnabled=${srm.request.enable.database}
(one-of?true|false|${srmBringOnlineDatabaseEnabled})srm.request.bring-online.enable.database=${srmBringOnlineDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.clean-pending-on-restart})srmBringOnlineCleanPendingRequestsOnRestart=${srm.request.enable.clean-pending-on-restart}
(one-of?true|false|${srmBringOnlineCleanPendingRequestsOnRestart})srm.request.bring-online.enable.clean-pending-on-restart=${srmBringOnlineCleanPendingRequestsOnRestart}

(deprecated)srmBringOnlineKeepRequestHistoryPeriod=${srm.limits.request.keep-history-period}
srm.limits.request.bring-online.keep-history-period=${srmBringOnlineKeepRequestHistoryPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.keep-history-period.unit})srm.limits.request.bring-online.keep-history-period.unit=${srm.limits.request.keep-history-period.unit}

(deprecated)srmBringOnlineExpiredRequestRemovalPeriod=${srm.limits.request.remove-expired-period}
srm.limits.request.bring-online.remove-expired-period=${srmBringOnlineExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.remove-expired-period.unit})srm.limits.request.bring-online.remove-expired-period.unit=${srm.limits.request.remove-expired-period.unit}

(deprecated,one-of?true|false|${srm.request.enable.history-database})srmBringOnlineRequestHistoryDatabaseEnabled=${srm.request.enable.history-database}
(one-of?true|false|${srmBringOnlineRequestHistoryDatabaseEnabled})srm.request.bring-online.enable.history-database=${srmBringOnlineRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.store-complete-only})srmBringOnlineStoreCompletedRequestsOnly=${srm.request.enable.store-complete-only}
(one-of?true|false|${srmBringOnlineStoreCompletedRequestsOnly})srm.request.bring-online.enable.store-complete-only=${srmBringOnlineStoreCompletedRequestsOnly}

(deprecated)srmBringOnlineReqSwitchToAsynchronousModeDelay=${srm.limits.request.switch-to-async-mode.delay}
srm.limits.request.bring-online.switch-to-async-mode.delay=${srmBringOnlineReqSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.switch-to-async-mode.delay.unit})srm.limits.request.bring-online.switch-to-async-mode.delay.unit=${srm.limits.request.switch-to-async-mode.delay.unit}

# Put requests settings


(deprecated)srmPutReqThreadQueueSize=${srm.limits.request.scheduler.thread.queue.size}
srm.limits.request.put.scheduler.thread.queue.size=${srmPutReqThreadQueueSize}

(deprecated)srmPutReqThreadPoolSize=${srm.limits.request.scheduler.thread.pool.size}
srm.limits.request.put.scheduler.thread.pool.size=${srmPutReqThreadPoolSize}

(deprecated)srmPutReqMaxWaitingRequests=${srm.limits.request.scheduler.waiting.max}
srm.limits.request.put.scheduler.waiting.max=${srmPutReqMaxWaitingRequests}

(deprecated)srmPutReqReadyQueueSize=${srm.limits.request.scheduler.ready-queue.size}
srm.limits.request.put.scheduler.ready-queue.size=${srmPutReqReadyQueueSize}

(deprecated)srmPutReqMaxReadyRequests=${srm.limits.request.scheduler.ready.max}
srm.limits.request.put.scheduler.ready.max=${srmPutReqMaxReadyRequests}

(deprecated)srmPutReqMaxNumberOfRetries=${srm.limits.request.scheduler.retries.max}
srm.limits.request.put.scheduler.retries.max=${srmPutReqMaxNumberOfRetries}

(deprecated)srmPutReqRetryTimeout=${srm.limits.request.scheduler.retry-timeout}
srm.limits.request.put.scheduler.retry-timeout=${srmPutReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.scheduler.retry-timeout.unit})srm.limits.request.put.scheduler.retry-timeout.unit=${srm.limits.request.scheduler.retry-timeout.unit}

(deprecated)srmPutReqMaxNumOfRunningBySameOwner=${srm.limits.request.scheduler.same-owner-running.max}
srm.limits.request.put.scheduler.same-owner-running.max=${srmPutReqMaxNumOfRunningBySameOwner}

(deprecated,one-of?true|false|${srm.request.enable.database})srmPutDatabaseEnabled=${srm.request.enable.database}
(one-of?true|false|${srmPutDatabaseEnabled})srm.request.put.enable.database=${srmPutDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.clean-pending-on-restart})srmPutCleanPendingRequestsOnRestart=${srm.request.enable.clean-pending-on-restart}
(one-of?true|false|${srmPutCleanPendingRequestsOnRestart})srm.request.put.enable.clean-pending-on-restart=${srmPutCleanPendingRequestsOnRestart}

(deprecated)srmPutKeepRequestHistoryPeriod=${srm.limits.request.keep-history-period}
srm.limits.request.put.keep-history-period=${srmPutKeepRequestHistoryPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.keep-history-period.unit})srm.limits.request.put.keep-history-period.unit=${srm.limits.request.keep-history-period.unit}

(deprecated)srmPutExpiredRequestRemovalPeriod=${srm.limits.request.remove-expired-period}
srm.limits.request.put.remove-expired-period=${srmPutExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.remove-expired-period.unit})srm.limits.request.put.remove-expired-period.unit=${srm.limits.request.remove-expired-period.unit}

(deprecated,one-of?true|false|${srm.request.enable.history-database})srmPutRequestHistoryDatabaseEnabled=${srm.request.enable.history-database}
(one-of?true|false|${srmPutRequestHistoryDatabaseEnabled})srm.request.put.enable.history-database=${srmPutRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.store-complete-only})srmPutStoreCompletedRequestsOnly=${srm.request.enable.store-complete-only}
(one-of?true|false|${srmPutStoreCompletedRequestsOnly})srm.request.put.enable.store-complete-only=${srmPutStoreCompletedRequestsOnly}

(deprecated)srmPutReqSwitchToAsynchronousModeDelay=${srm.limits.request.switch-to-async-mode.delay}
srm.limits.request.put.switch-to-async-mode.delay=${srmPutReqSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.switch-to-async-mode.delay.unit})srm.limits.request.put.switch-to-async-mode.delay.unit=${srm.limits.request.switch-to-async-mode.delay.unit}

# Copy requests settings

(deprecated)srmCopyReqThreadQueueSize=${srm.limits.request.scheduler.thread.queue.size}
srm.limits.request.copy.scheduler.thread.queue.size=${srmCopyReqThreadQueueSize}

(deprecated)srmCopyReqThreadPoolSize=${srm.limits.request.scheduler.thread.pool.size}
srm.limits.request.copy.scheduler.thread.pool.size=${srmCopyReqThreadPoolSize}

(deprecated)srmCopyReqMaxWaitingRequests=${srm.limits.request.scheduler.waiting.max}
srm.limits.request.copy.scheduler.waiting.max=${srmCopyReqMaxWaitingRequests}

(deprecated)srmCopyReqReadyQueueSize=${srm.limits.request.scheduler.ready-queue.size}
srm.limits.request.copy.scheduler.ready-queue.size=${srmCopyReqReadyQueueSize}

(deprecated)srmCopyReqMaxReadyRequests=${srm.limits.request.scheduler.ready.max}
srm.limits.request.copy.scheduler.ready.max=${srmCopyReqMaxReadyRequests}

(deprecated)srmCopyReqMaxNumberOfRetries=${srm.limits.request.scheduler.retries.max}
srm.limits.request.copy.scheduler.retries.max=${srmCopyReqMaxNumberOfRetries}

(deprecated)srmCopyReqRetryTimeout=${srm.limits.request.scheduler.retry-timeout}
srm.limits.request.copy.scheduler.retry-timeout=${srmCopyReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.scheduler.retry-timeout.unit})srm.limits.request.copy.scheduler.retry-timeout.unit=${srm.limits.request.scheduler.retry-timeout.unit}

(deprecated)srmCopyReqMaxNumOfRunningBySameOwner=${srm.limits.request.scheduler.same-owner-running.max}
srm.limits.request.copy.scheduler.same-owner-running.max=${srmCopyReqMaxNumOfRunningBySameOwner}

(deprecated,one-of?true|false|${srm.request.enable.database})srmCopyDatabaseEnabled=${srm.request.enable.database}
(one-of?true|false|${srmCopyDatabaseEnabled})srm.request.copy.enable.database=${srmCopyDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.clean-pending-on-restart})srmCopyCleanPendingRequestsOnRestart=${srm.request.enable.clean-pending-on-restart}
(one-of?true|false|${srmCopyCleanPendingRequestsOnRestart})srm.request.copy.enable.clean-pending-on-restart=${srmCopyCleanPendingRequestsOnRestart}

(deprecated)srmCopyKeepRequestHistoryPeriod=${srm.limits.request.keep-history-period}
srm.limits.request.copy.keep-history-period=${srmCopyKeepRequestHistoryPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.keep-history-period.unit})srm.limits.request.copy.keep-history-period.unit=${srm.limits.request.keep-history-period.unit}

(deprecated)srmCopyExpiredRequestRemovalPeriod=${srm.limits.request.remove-expired-period}
srm.limits.request.copy.remove-expired-period=${srmCopyExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.remove-expired-period.unit})srm.limits.request.copy.remove-expired-period.unit=${srm.limits.request.remove-expired-period.unit}

(deprecated,one-of?true|false|${srm.request.enable.history-database})srmCopyRequestHistoryDatabaseEnabled=${srm.request.enable.history-database}
(one-of?true|false|${srmCopyRequestHistoryDatabaseEnabled})srm.request.copy.enable.history-database=${srmCopyRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.store-complete-only})srmCopyStoreCompletedRequestsOnly=${srm.request.enable.store-complete-only}
(one-of?true|false|${srmCopyStoreCompletedRequestsOnly})srm.request.copy.enable.store-complete-only=${srmCopyStoreCompletedRequestsOnly}

(deprecated)srmCopyReqSwitchToAsynchronousModeDelay=${srm.limits.request.switch-to-async-mode.delay}
srm.limits.request.copy.switch-to-async-mode.delay=${srmCopyReqSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.switch-to-async-mode.delay.unit})srm.limits.request.copy.switch-to-async-mode.delay.unit=${srm.limits.request.switch-to-async-mode.delay.unit}


# Ls requests settings

# ---- Directory entries to include in list reply
#
# Number of entries allowed to be returnes in a single srmls
# request. Directory listings larger than this most be broken into
# multiple requests.
#
(deprecated)srmLsMaxNumberOfEntries=1000
srm.limits.request.ls.entries.max=${srmLsMaxNumberOfEntries}

# ---- List recursion depth
#
# Maximum recursion depth.
#
(deprecated)srmLsMaxNumberOfLevels=100
srm.limits.request.ls.levels.max=${srmLsMaxNumberOfLevels}

(deprecated)srmLsRequestThreadQueueSize=1000
srm.limits.request.ls.scheduler.thread.queue.size=${srmLsRequestThreadQueueSize}

(deprecated)srmLsRequestThreadPoolSize=30
srm.limits.request.ls.scheduler.thread.pool.size=${srmLsRequestThreadPoolSize}

(deprecated)srmLsRequestMaxWaitingRequests=1000
srm.limits.request.ls.scheduler.waiting.max=${srmLsRequestMaxWaitingRequests}

(deprecated)srmLsRequestMaxNumberOfRetries=10
srm.limits.request.ls.scheduler.retries.max=${srmLsRequestMaxNumberOfRetries}

(deprecated)srmLsRequestRetryTimeout=60000
srm.limits.request.ls.scheduler.retry-timeout=${srmLsRequestRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.scheduler.retry-timeout.unit})srm.limits.request.ls.scheduler.retry-timeout.unit=${srm.limits.request.scheduler.retry-timeout.unit}

(deprecated)srmLsRequestMaxNumberOfRunningBySameOwner=100
srm.limits.request.ls.scheduler.same-owner-running.max=${srmLsRequestMaxNumberOfRunningBySameOwner}

(deprecated,one-of?true|false|${srm.request.enable.database})srmLsDatabaseEnabled=${srm.request.enable.database}
(one-of?true|false|${srmLsDatabaseEnabled})srm.request.ls.enable.database=${srmLsDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.clean-pending-on-restart})srmLsCleanPendingRequestsOnRestart=${srm.request.enable.clean-pending-on-restart}
(one-of?true|false|${srmLsCleanPendingRequestsOnRestart})srm.request.ls.enable.clean-pending-on-restart=${srmLsCleanPendingRequestsOnRestart}

(deprecated)srmLsKeepRequestHistoryPeriod=${srm.limits.request.keep-history-period}
srm.limits.request.ls.keep-history-period=${srmLsKeepRequestHistoryPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.keep-history-period.unit})srm.limits.request.ls.keep-history-period.unit=${srm.limits.request.keep-history-period.unit}

(deprecated)srmLsExpiredRequestRemovalPeriod=${srm.limits.request.remove-expired-period}
srm.limits.request.ls.remove-expired-period=${srmLsExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.remove-expired-period.unit})srm.limits.request.ls.remove-expired-period.unit=${srm.limits.request.remove-expired-period.unit}

(deprecated,one-of?true|false|${srm.request.enable.history-database})srmLsRequestHistoryDatabaseEnabled=${srm.request.enable.history-database}
(one-of?true|false|${srmLsRequestHistoryDatabaseEnabled})srm.request.ls.enable.history-database=${srmLsRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.store-complete-only})srmLsStoreCompletedRequestsOnly=${srm.request.enable.store-complete-only}
(one-of?true|false|${srmLsStoreCompletedRequestsOnly})srm.request.ls.enable.store-complete-only=${srmLsStoreCompletedRequestsOnly}

(deprecated)srmLsRequestSwitchToAsynchronousModeDelay=1000
srm.limits.request.ls.switch-to-async-mode.delay=${srmLsRequestSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.switch-to-async-mode.delay.unit})srm.limits.request.ls.switch-to-async-mode.delay.unit=${srm.limits.request.switch-to-async-mode.delay.unit}

# Reserve space  requests settings

(deprecated)srmReserveReqThreadQueueSize=${srm.limits.request.scheduler.thread.queue.size}
srm.limits.request.reserve-space.scheduler.thread.queue.size=${srmReserveReqThreadQueueSize}

(deprecated)srmReserveReqThreadPoolSize=${srm.limits.request.scheduler.thread.pool.size}
srm.limits.request.reserve-space.scheduler.thread.pool.size=${srmReserveReqThreadPoolSize}

(deprecated)srmReserveReqMaxWaitingRequests=${srm.limits.request.scheduler.waiting.max}
srm.limits.request.reserve-space.scheduler.waiting.max=${srmReserveReqMaxWaitingRequests}

(deprecated)srmReserveReqReadyQueueSize=${srm.limits.request.scheduler.ready-queue.size}
srm.limits.request.reserve-space.scheduler.ready-queue.size=${srmReserveReqReadyQueueSize}

(deprecated)srmReserveReqMaxReadyRequests=${srm.limits.request.scheduler.ready.max}
srm.limits.request.reserve-space.scheduler.ready.max=${srmReserveReqMaxReadyRequests}

(deprecated)srmReserveReqMaxNumberOfRetries=${srm.limits.request.scheduler.retries.max}
srm.limits.request.reserve-space.scheduler.retries.max=${srmReserveReqMaxNumberOfRetries}

(deprecated)srmReserveReqRetryTimeout=${srm.limits.request.scheduler.retry-timeout}
srm.limits.request.reserve-space.scheduler.retry-timeout=${srmReserveReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.scheduler.retry-timeout.unit})srm.limits.request.reserve-space.scheduler.retry-timeout.unit=${srm.limits.request.scheduler.retry-timeout.unit}

(deprecated)srmReserveReqMaxNumOfRunningBySameOwner=${srm.limits.request.scheduler.same-owner-running.max}
srm.limits.request.reserve-space.scheduler.same-owner-running.max=${srmReserveReqMaxNumOfRunningBySameOwner}

(deprecated,one-of?true|false|${srm.request.enable.database})srmReserveDatabaseEnabled=${srm.request.enable.database}
(one-of?true|false|${srmReserveDatabaseEnabled})srm.request.reserve-space.enable.database=${srmReserveDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.clean-pending-on-restart})srmReserveCleanPendingRequestsOnRestart=${srm.request.enable.clean-pending-on-restart}
(one-of?true|false|${srmReserveCleanPendingRequestsOnRestart})srm.request.reserve-space.enable.clean-pending-on-restart=${srmReserveCleanPendingRequestsOnRestart}

(deprecated)srmReserveKeepRequestHistoryPeriod=${srm.limits.request.keep-history-period}
srm.limits.request.reserve-space.keep-history-period=${srmReserveKeepRequestHistoryPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.keep-history-period.unit})srm.limits.request.reserve-space.keep-history-period.unit=${srm.limits.request.keep-history-period.unit}

(deprecated)srmReserveExpiredRequestRemovalPeriod=${srm.limits.request.remove-expired-period}
srm.limits.request.reserve-space.remove-expired-period=${srmReserveExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.remove-expired-period.unit})srm.limits.request.reserve-space.remove-expired-period.unit=${srm.limits.request.remove-expired-period.unit}

(deprecated,one-of?true|false|${srm.request.enable.history-database})srmReserveRequestHistoryDatabaseEnabled=${srm.request.enable.history-database}
(one-of?true|false|${srmReserveRequestHistoryDatabaseEnabled})srm.request.reserve-space.enable.history-database=${srmReserveRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.request.enable.store-complete-only})srmReserveStoreCompletedRequestsOnly=${srm.request.enable.store-complete-only}
(one-of?true|false|${srmReserveStoreCompletedRequestsOnly})srm.request.reserve-space.enable.store-complete-only=${srmReserveStoreCompletedRequestsOnly}

#

srm.limits.request.lifetime=14400000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.limits.request.lifetime.unit=MILLISECONDS

(deprecated)srmGetLifeTime=14400000
srm.limits.request.get.lifetime=${srmGetLifeTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.lifetime.unit})srm.limits.request.get.lifetime.unit=${srm.limits.request.lifetime.unit}

(deprecated)srmBringOnlineLifeTime=${srmGetLifeTime}
srm.limits.request.bring-online.lifetime=${srmBringOnlineLifeTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.lifetime.unit})srm.limits.request.bring-online.lifetime.unit=${srm.limits.request.lifetime.unit}

(deprecated)srmPutLifeTime=14400000
srm.limits.request.put.lifetime=${srmPutLifeTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.lifetime.unit})srm.limits.request.put.lifetime.unit=${srm.limits.request.lifetime.unit}

(deprecated)srmCopyLifeTime=14400000
srm.limits.request.copy.lifetime=${srmCopyLifeTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.limits.request.lifetime.unit})srm.limits.request.copy.lifetime.unit=${srm.limits.request.lifetime.unit}

# ---- File system root exported by the srm service
(deprecated)pnfsSrmPath=/
srm.root=${pnfsSrmPath}

srm.service.webdav.root=${webdav.root}
srm.service.xrootd.root=${xrootd.root}



# Cell address of pnfsmanager service
srm.service.pnfsmanager=${dcache.service.pnfsmanager}

# Timeout for pnfsmanager requests
(deprecated)srmPnfsTimeout=300
srm.service.pnfsmanager.timeout=${srmPnfsTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.service.pnfsmanager.timeout.unit=SECONDS

# Cell address of gplazma service
srm.service.gplazma=${dcache.service.gplazma}

# Timeout for gplazma requests
srm.service.gplazma.timeout=30000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.service.gplazma.timeout.unit=MILLISECONDS

# gPlazma authorization cache size
srm.service.gplazma.cache.size=1000
(deprecated)srmAuthzCacheLifetime=180

# gPlazma authorization cache lifetime
srm.service.gplazma.cache.timeout=${srmAuthzCacheLifetime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.service.gplazma.cache.timeout.unit=SECONDS

# Cell address of spacemanager service
srm.service.spacemanager=${dcache.service.spacemanager}

# Timeout for spacemanager requests
srm.service.spacemanager.timeout=180
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.service.spacemanager.timeout.unit=SECONDS

# Cell address of transfermanager service
srm.service.transfermanager=${dcache.service.transfermanager}

# Timeout for transfermanager requests
srm.service.transfermanager.timeout=24
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.service.transfermanager.timeout.unit=HOURS

# Cell address of copymanager service
srm.service.copymanager=${dcache.service.copymanager}

# Timeout for copymanager requests
srm.service.copymanager.timeout=24
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.service.copymanager.timeout.unit=HOURS

# Cell address of pinmanager service
srm.service.pinmanager=${dcache.service.pinmanager}

# Timeout for pinmanager requests
srm.service.pinmanager.timeout=60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.service.pinmanager.timeout.unit=MINUTES

# Cell address of poolmanager service
srm.service.poolmanager=${dcache.service.poolmanager}

# Timeout for poolmanager requests
(deprecated)srmPoolManagerTimeout=300
srm.service.poolmanager.timeout=${srmPoolManagerTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.service.poolmanager.timeout.unit=SECONDS

# Cell address of login broker the SRM registers with
(deprecated)srm.loginbroker=LoginBroker
srm.service.loginbroker=${srm.loginbroker}

# How often the SRM registers with the loginbroker (seconds)
(deprecated)srm.loginbroker.period=${dcache.service.loginbroker.update-period}
srm.service.loginbroker.update-period=${srm.loginbroker.period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.service.loginbroker.update-period.unit})srm.service.loginbroker.update-period.unit=${dcache.service.loginbroker.update-period.unit}

# Threshold for load changes in SRM to trigger loginbroker registration
#
# The registration with a login broker contains information about
# the current load of SRM. If the load changes rapidly, then a
# door may updates its registration before the next scheduled update
# time. This parameter specifies the fraction of the load that
# triggers a reregistration.
(deprecated)srm.loginbroker.threshold=${dcache.service.loginbroker.update-threshold}
srm.service.loginbroker.update-threshold=${srm.loginbroker.threshold}

# Protocol version registered in login broker
(deprecated)srm.loginbroker.version=1.1.1
srm.service.loginbroker.version=${srm.loginbroker.version}

# Protocol family registered in login broker
(deprecated)srm.loginbroker.family=srm
srm.service.loginbroker.family=${srm.loginbroker.family}


# ---- Enable automatic creation of directories
#
# Allow automatic creation of directories via SRM.
#
#  allow=true, disallow=false
#
(deprecated,one-of?true|false)RecursiveDirectoryCreation=true
(one-of?true|false|${RecursiveDirectoryCreation})srm.enable.recursive-directory-creation=${RecursiveDirectoryCreation}


# ---- Allow delete via SRM v1.1
#
# Allow deletion of files via the SRM v1.1 interface. This setting has no effect on
# the SRM v2.2 interface.
#
#  allow=true, disallow=false
#
(deprecated,one-of?true|false)AdvisoryDelete=true
(one-of?true|false|${AdvisoryDelete})srm.enable.advisory-delete=${AdvisoryDelete}

# ---- Enable overwrite for SRM
#
# Defines how to respond to write requests to files that already exist.
#
# If srm.enable.overwrite is false, any request to overwrite an existing file will
# be rejected.
#
# If srm.enable.overwrite is enabled, the response depends on whether the SRM v1.1
# or SRM v2.2 interface is used. #For SRM v2.2, the write request contains a flag
# allowing the client to indicate whether it wants an existing file to be overwritten.
# If present, the flag is respected. If not present, the srm.enable.overwrite-by-default
# flag controls whether an existing file is overwritten or not. For SRM v1.1, the write
# request contains no such flag and srm.enable.overwrite-by-default controls whether an
# existing file is overwritten.
#
# Note that setting srm.enable.overwrite to false or srm.enable.overwrite-by-default
# to true violates the SRM 2.2 specification. That is, the defaults are required
# for standards-compliance.
#
(one-of?true|false|${dcache.enable.overwrite})srm.enable.overwrite=${dcache.enable.overwrite}
(deprecated,one-of?true|false)srmOverwriteByDefault=false
(one-of?true|false|${srmOverwriteByDefault})srm.enable.overwrite-by-default=${srmOverwriteByDefault}

# ---- Number of concurrent file deletions
#
# To avoid starving other name space operations, the srm throttles
# bulk file deletion. This setting controls the number of concurrent
# file deletion requests submitted to PnfsManager.
#
(deprecated)srmSizeOfSingleRemoveBatch=100
srm.limits.remove-batch-size=${srmSizeOfSingleRemoveBatch}

# path to host certificate
srm.authn.hostcert.cert=${dcache.authn.hostcert.cert}

# Host key
srm.authn.hostcert.key=${dcache.authn.hostcert.key}

# Host key refresh interval
srm.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.hostcert.refresh.unit})srm.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}

# Path to CA directory
srm.authn.capath=${dcache.authn.capath}

# How often to check the CA certificates for updates
srm.authn.capath.refresh=${dcache.authn.capath.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.capath.refresh.unit})srm.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}

# ---- Directory for delegated proxy certificates
#
# This is the directory in which the delegated user credentials will
# be stored as files. We recommend set permissions to 700 on this
# directory.
#
(deprecated)srmUserCredentialsDirectory=@srmUserCredentialsDirectory@
srm.user.credentials.directory=${srmUserCredentialsDirectory}

# ---- Database threads
#
# Database updates are queued and their execution is decoupled from
# the execution of SRM requests. The setting controls the number of
# the threads that will be dedicated to execution of these updates.
#
(deprecated)srmJdbcExecutionThreadNum=5
srm.limits.db.thread.pool.size=${srmJdbcExecutionThreadNum}

# ---- Database request queue depth
#
# Database updates are queued and their execution is decoupled from
# the execution of SRM requests. The setting controls the maximum
# length of the queue.
#
(deprecated)srmMaxNumberOfJdbcTasksInQueue=1000
srm.limits.db.queue.size=${srmMaxNumberOfJdbcTasksInQueue}

# ---- srmClientDNSLookup
#
# Perform the lookup of the client hostname based on the client's IP
# address. The result is used in pool selection. If srmClientDNSLookup
# is set to false the client's IP address is used.
#
(deprecated,one-of?true|false)srmClientDNSLookup=false
(one-of?true|false|${srmClientDNSLookup})srm.enable.client-dns-lookup=${srmClientDNSLookup}

# set graceful shutdown timeout. If set, the internal doStop() method
# will not immediately stop the server. Instead, all Connectors will
# be closed so that new connections will not be accepted and all handlers that
# implement Server.Graceful will be put into the shutdown mode so that no
# new requests will be accepted, but existing requests can complete.
# The server will then wait the configured timeout before stopping.
(deprecated)srmGracefulShutdown=2000
srm.limits.jetty.graceful-shutdown=${srmGracefulShutdown}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.limits.jetty.graceful-shutdown.unit=MILLISECONDS

# ---- Enable custom address resolution.
#
#   The srmCustomGetHostByAddr option enables a custom IP resolution
#   if the standard InetAddress method fails. Contributed by BNL.
#
(deprecated,one-of?true|false)srmCustomGetHostByAddr=false
(one-of?true|false|${srmCustomGetHostByAddr})srm.enable.custom-get-host-by-address=${srmCustomGetHostByAddr}

# ----- Disallowed protocols for get requests
#
# Comma separated list of protocols that will not be used even if both
# client and server support it.
#
srm.protocols.disallowed.get = ${srm.service.loginbroker.family}

# ----- Disallowed protocols for put requests
#
# Comma separated list of protocols that will not be used even if both
# client and server support it.
#
srm.protocols.disallowed.put = http,${srm.service.loginbroker.family}

# ----- Preferred transfer protocols
#
# Ordered comma separated list of preferred transfer protocols. If
# supported by both client and server, protocols early in this list
# will be preferred to protocols later in the list or not in the
# list at all. If no common protocol is found, the first protocol in
# the clients list supported by the server is used.
#
# Setting this property to a non-empty list means the clients protocol
# preference is ignored, which is usually not a good thing. The classic
# use case for this property is as a workaround for clients that assign
# high priority to protocols the server admin tries to avoid.
srm.protocols.preferred =

# ---- Cell address of login broker the SRM will ask to locate doors
(deprecated)srm.lookup.loginbroker=${dcache.service.loginbroker}
srm.protocols.loginbroker=${srm.lookup.loginbroker}

# ---- Login broker cache life time in milliseconds
(deprecated)srmLoginBrokerUpdatePeriod=3000
(deprecated)srm.lookup.period=${srmLoginBrokerUpdatePeriod}
srm.protocols.loginbroker.period=${srm.lookup.period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.protocols.loginbroker.period.unit=MILLISECONDS

# ---- Login broker lookup timeout after which a request is retried (seconds)
(deprecated)srm.lookup.timeout=${srmPnfsTimeout}
srm.protocols.loginbroker.timeout=${srm.lookup.timeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.protocols.loginbroker.timeout.unit=SECONDS

# ---- Number of doors in random door selection
#
# SRM will order doors according to their load and select certain
# number of the least loaded and then randomly choose which one to
# use.
#
(deprecated)srmNumberOfDoorsInRandomSelection=5
(deprecated)srm.lookup.population-size=${srmNumberOfDoorsInRandomSelection}
srm.protocols.population-size=${srm.lookup.population-size}



# ----- Whether to pin disk files
#
# The SRM protocol allows files to be pinned. The pin suppresses
# automatic garbage collection for the lifetime of the pin.
#
# Since dCache pools may be configured to only serve particular types
# of requests and not every pool may be configured to serve a
# particular read request, strict protocol compliance requires pinning
# even for disk only files.
#
# Often strict protocol compliance is however unnecessary, or disk
# files may be known to always be on read pools. In those cases one
# can skip the pinning step and thus reduce the latency of
# srmPrepareToGet request.
#
# When this property is set to false, files with access latency of
# ONLINE will not be pinned. If all files in the system have access
# latency of ONLINE, then the SRM will not use the pin manager at
# all. Note that when this property is set to false, orphaned file
# location entries in the name space will not validated during the
# srmPrepareToGet processing. The consequence is that the
# srmPrepareToGet may succeed for a lost and the subsequence file
# transfer will fail.
#
(deprecated,one-of?true|false)srmPinOnlineFiles=true
(one-of?true|false|${srmPinOnlineFiles})srm.enable.pin-online-files=${srmPinOnlineFiles}

# ---- Quality of Service plugins
#
# to enable terapath plugin define:
# qosPluginClass=org.dcache.srm.qos.terapaths.TerapathsPlugin
# qosConfigFile=${dcache.paths.config}/terapaths.properties
#
# to enable lambda station plugin define:
# qosPluginClass=org.dcache.srm.qos.terapaths.LambdaStation
# qosConfigFile=${dcache.paths.config}/lambdastation.properties
#
(deprecated)qosPluginClass=
srm.plugins.qos.class=${qosPluginClass}

(deprecated)qosConfigFile=
srm.plugins.qos.config.file=${qosConfigFile}

(one-of?true|false|${dcache.enable.space-reservation})srm.enable.space-reservation=${dcache.enable.space-reservation}

# Explicit and Implicit Space Reservations for Data Storage in dCache
#
# In dCache, if a space reservation is specified, the file will be stored in it (assuming
# the user has permission to do so in the name space).
#
# If a reservation token is not specified, and implicit space reservation is enabled,
# then a space reservation will be performed implicitly for each SRM v1.1 and SRM 2.2
# srmPrepareToPut or srmCopy in pull mode. If an Access Latency and a Retention Policy
# are specified, these are used for the implicit space reservation. If the user has not
# specified Access Latency or Retention Policy (or if SRM v1.1 is used), the system will
# attempt to extract directory tags (called “AccessLatency” and “RetentionPolicy”) from
# the namespace from the directory to which file is being written. If the tags are present,
# then their values will determine the default Access Latency or Retention Policy that will
# be used for implicit space reservations. If the tags are not present, then system wide
# defaults will be used. If no implicit space reservation can be made, the transfer will
# fail. (Note: some clients also have default values, which are used when not explicitly
# specified by the user. I this case server side defaults will have no effect.)
#
(deprecated,one-of?true|false)srmImplicitSpaceManagerEnabled=true
(one-of?true|false|${srmImplicitSpaceManagerEnabled})srm.enable.space-reservation.implicit=${srmImplicitSpaceManagerEnabled}

(deprecated,one-of?true|false)srmSpaceReservationStrict=true
(one-of?true|false|${srmSpaceReservationStrict})srm.enable.space-reservation.strict=${srmSpaceReservationStrict}



#  Security related properties
(deprecated)srm.security.ciphers=${dcache.authn.ciphers}
srm.authn.ciphers=${srm.security.ciphers}


#
#   Document which TCP ports are opened
#
(immutable)srm.net.ports.tcp=${srm.net.port}


#
#  Obsolete or Forbidden properties
#
(obsolete)srmIgnoreClientProtocolOrder = Use srm.protocols.preferred instead (set to gsiftp,gsidcap to achieve the same effect)
