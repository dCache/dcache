#!/bin/sh

set -e

rel_path=$(dirname $0)/../etc/grid-security
mkdir -p $rel_path/certificates
TARGET_DIR=$(cd $rel_path;pwd)
TARGET_CERTIFICATES=$TARGET_DIR/certificates

while [ $# -gt 0 ]; do
    case "$1" in
	--only-localhost)
	    only_localhost=1
	    shift
	    ;;

	--install)
	    install=1
	    shift
	    ;;

	--generate)
	    generate=1
	    shift
	    ;;

	--help|-h)
	    echo "Usage: $0 [--generate] [--only-localhost] [--install]"
	    echo
	    echo "Tool for handling and generating grid host credentials suitable"
	    echo "for testing dCache"
	    echo
	    echo "Options:"
	    echo "     --generate        create a CA and host credentials"
	    echo "     --only-localhost  only include 'localhost' as subjAltName"
	    echo "     --install         install CA files in ~/.globus/certificates"
	    echo "  -h --help            provide this information"
	    echo
	    echo "If --generate is specified then this command will generate host"
	    echo "credentials (private key and certificate) using a disposable CA,"
	    echo "which is also generated.  The results will be the files "
	    echo "'hostkey.pem' and 'hostcert.pem' and four files written in the"
	    echo "'certificates' directory that start with a 8-digit hexadecimal"
	    echo "number.  All these locations are relative to the target directory:"
	    echo
	    echo "    $TARGET_DIR"
	    echo
	    echo "TRUST"
	    echo
	    echo "The Certificate Authority is generated afresh each time this"
	    echo "command is run with --generate and the CA's private key is thrown"
	    echo "away after signing the host certificate.  Therefore it is safe to"
	    echo "trust the CA as no further certificates can be generated."
	    echo
	    echo "Trusting the CA may involve copying the CA certificate and"
	    echo "signing_policy files into a trust store.  Users typically have"
	    echo "two: the user-local trust store (~/.globus/certificates) and"
	    echo "the system-wide trust store (/etc/grid-security/certificates)."
	    echo "Copying the files into either one is sufficient."
	    echo
	    echo "As a convenience, when the --install option is specified the"
	    echo "generated CA files (certificate and signing_policy files) are"
	    echo "copied into the ~/.globus/certificates directory.  If --install"
	    echo "is specified without --generate then the contents of the target"
	    echo "directory is copied."
	    echo 
	    echo "SUBJECT ALTERNATIVE NAME:"
	    echo
	    echo "A certificate may include zero or more Subject Alternative Names."
	    echo "For a host certificate, such Subject Alternative Names normally"
	    echo "includes all the DNS names through which this machine may be "
	    echo "contacted.  By default, when generating a host certificate,"
	    echo "'localhost', the output of running 'uname -n' and all known FQDNs"
	    echo "found by running 'hostname -A' are added as Subject Alternative Names."
	    echo "The resulting host certificate should always work, but is specific"
	    echo "to this host."
	    echo
	    echo "The '--only-localhost' option limits the Subject Alternative Names"
	    echo "to just 'localhost'.  The resulting certificate may not work in all"
	    echo "circumstances, but is generic and so may be placed in some central"
	    echo "location (e.g., a VCS) for general use."
	    exit 0
	    ;;

	*)
	    echo "Unknown option '$1', try --help"
	    exit 1
	    ;;
    esac
done

if [ "$only_localhost" = "1" ] && [ ! "$generate" = "1" ]; then
    echo "The --only-local flag only has effect if --generate is also specified. See"
    echo "--help for details."
    exit 1
fi

if [ ! "$generate" = "1" ] && [ ! "$install" = "1" ]; then
    echo "Either --generate, --install or both must be specified.  Try --help for"
    echo "details."
    exit 1
fi

function list_potential_subjaltname()
{
    echo localhost
    if [ "$only_localhost" != 1 ]; then
	uname -n
	hostname -A | sed 's/ /\n/g'
    fi
}

function cleanup_ca_dir()
{
    rm -rf $CA_DIR
}


if [ "$generate" = "1" ]; then
    CA_DIR=$(mktemp -d)

    trap cleanup_ca_dir EXIT

    CA_CONFIG=$CA_DIR/openssl.config
    CA_KEY=$CA_DIR/ca-key.pem
    CA_CERT=$CA_DIR/ca-cert.pem
    CA_INDEX=$CA_DIR/index.txt
    CA_SERIAL=$CA_DIR/serial

    cat > $CA_CONFIG <<EOF
RANDFILE = $CA_DIR/rand
CN       = disposable-CA

##  USED WHEN GENERATING CA (SELF-SIGNED) CERTIFICATE + PRIVATE KEY

[req]
default_bits       = 2048
encrypt_key        = no
default_md         = sha256
distinguished_name = CA_distinguished_name
x509_extensions    = CA_x509_extensions
prompt             = no

[CA_distinguished_name]
1.DC = org
2.DC = dCache
CN   = \$ENV::CN

[CA_x509_extensions]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical,CA:true
subjectAltName         = email:support@dcache.org,URI:http://www.dcache.org/
nsComment              = "dCache.org disposable CA, generated $(date "+%Y-%m-%d %H:%M:%S")"
keyUsage               = critical,keyCertSign

##
##  USED WHEN PROCESSING CERTIFICATE SIGNING REQUEST:
##

[ca]
default_ca = CA_default

[CA_default]
certs            = $CA_DIR
crl_dir          = $CA_DIR
database         = $CA_INDEX
new_certs_dir    = $CA_DIR
certificate      = $CA_CERT
private_key      = $CA_KEY
serial           = $CA_SERIAL
crlnumber        = $CA_DIR/crlnumber
crl              = $CA_DIR/crl.pem
RANDFILE         = $CA_DIR/rand
x509_extensions  = host_cert
name_opt         = ca_default
cert_opt         = ca_default
default_days     = 365
default_crl_days = 30
default_md       = sha256
preserve         = no
policy           = policy_any
email_in_dn      = no

[host_cert]
basicConstraints       = critical,CA:FALSE
keyUsage               = critical,digitalSignature,keyEncipherment,dataEncipherment
nsComment              = "dCache.org disposable CA generated host certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
subjectAltName         = @alt_names
extendedKeyUsage       = serverAuth,clientAuth
issuerAltName          = issuer:copy
certificatePolicies    = 2.5.29.32.0


[policy_any]
DC = match
DC = match
CN = supplied

[alt_names]
EOF

    i=1
    for fqdn in $(list_potential_subjaltname | sort | uniq); do
	echo "DNS.$i = $fqdn" >> $CA_CONFIG
	i=$(( $i + 1 ))
    done

    touch $CA_INDEX
    echo 01 > $CA_SERIAL
    openssl req -batch -new -x509 -config $CA_CONFIG -days 365 -keyout $CA_DIR/ca-key.pem -out $CA_DIR/ca-cert.pem >/dev/null 2>&1
    CN=host/localhost openssl req -new -config $CA_CONFIG -keyout $CA_DIR/hostkey.pem -out $CA_DIR/hostcert.req  >/dev/null 2>&1
    openssl ca -batch -config $CA_CONFIG -out $CA_DIR/hostcert.pem  -infiles $CA_DIR/hostcert.req >/dev/null 2>&1

    hash_old=$(openssl x509 -in $CA_CERT -noout -subject_hash_old)
    hash_new=$(openssl x509 -in $CA_CERT -noout -subject_hash)

    cp $CA_CERT $TARGET_CERTIFICATES/$hash_old.0
    cp $CA_CERT $TARGET_CERTIFICATES/$hash_new.0

    cat > $TARGET_CERTIFICATES/$hash_old.signing_policy <<EOF
access_id_CA    X509    '/DC=org/DC=dCache/CN=disposable-CA'
pos_rights      globus  CA:sign
cond_subjects   globus  '"/DC=org/DC=dCache/*"'
EOF
    cp $TARGET_CERTIFICATES/$hash_old.signing_policy $TARGET_CERTIFICATES/$hash_new.signing_policy

    mv $CA_DIR/hostcert.pem $TARGET_DIR/hostcert.pem
    openssl rsa -in $CA_DIR/hostkey.pem -out $TARGET_DIR/hostkey.pem >/dev/null 2>&1
fi


if [ "$install" = "1" ]; then
    TRUST_STORE=$HOME/.globus/certificates
    mkdir -p $TRUST_STORE
    if [ "$generate" = "1" ]; then
	cp $TARGET_CERTIFICATES/$hash_old.0 \
	    $TARGET_CERTIFICATES/$hash_new.0 \
	    $TARGET_CERTIFICATES/$hash_old.signing_policy \
	    $TARGET_CERTIFICATES/$hash_new.signing_policy \
	    $TRUST_STORE
    else
	cp $TARGET_CERTIFICATES/* $TRUST_STORE
    fi
fi