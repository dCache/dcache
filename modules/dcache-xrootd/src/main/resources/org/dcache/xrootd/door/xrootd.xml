<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">

  <context:property-placeholder/>
  <context:annotation-config/>

  <!-- Convert properties with multiple values separated by comma into an array of strings:
       key=value1,value2,value3 : String[] {value1, value2, value3}
    -->
  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
      <property name="customEditors">
          <map>
              <entry key="java.lang.String[]"
                     value="org.springframework.beans.propertyeditors.StringArrayPropertyEditor" />
          </map>
      </property>
  </bean>

  <bean id="noroutetocell" class="org.dcache.cells.LogNoRouteToCellExceptionReceiver">
      <description>Undeliverable message logger</description>
      <property name="excludedDestinations" value="${xrootd.loginbroker.update-topic}"/>
  </bean>

  <bean id="pnfs-stub" class="org.dcache.cells.CellStub">
    <description>PNFS manager communication stub</description>
    <property name="destination" value="${xrootd.service.pnfsmanager}"/>
    <property name="timeout" value="${xrootd.service.pnfsmanager.timeout}"/>
    <property name="timeoutUnit" value="${xrootd.service.pnfsmanager.timeout.unit}"/>
    <property name="flags" value="#{ T(dmg.cells.nucleus.CellEndpoint.SendFlag).RETRY_ON_NO_ROUTE_TO_CELL }"/>
  </bean>


  <bean id="pool-stub" class="org.dcache.cells.CellStub">
    <description>Pool cell stub</description>
    <property name="timeout" value="${xrootd.service.pool.timeout}"/>
    <property name="timeoutUnit" value="${xrootd.service.pool.timeout.unit}"/>
  </bean>

  <bean id="pool-manager-stub" class="org.dcache.cells.CellStub">
    <description>Pool manager cell stub</description>
    <property name="destination" value="${xrootd.service.poolmanager}"/>
    <property name="timeout" value="${xrootd.service.poolmanager.timeout}"/>
    <property name="timeoutUnit" value="${xrootd.service.poolmanager.timeout.unit}"/>
  </bean>

  <bean id="billing-stub" class="org.dcache.cells.CellStub">
    <description>Billing communication stub</description>
    <property name="destination" value="${xrootd.service.billing}"/>
  </bean>

  <bean id="gPlazma-stub" class="org.dcache.cells.CellStub">
    <description>gPlazma communication stub</description>
    <property name="destination" value="${xrootd.service.gplazma}"/>
    <property name="timeout" value="${xrootd.service.gplazma.timeout}"/>
    <property name="timeoutUnit" value="${xrootd.service.gplazma.timeout.unit}"/>
  </bean>

  <bean id="pool-monitor" class="org.dcache.poolmanager.RemotePoolMonitor">
    <description>Maintains runtime information about all pools</description>
    <property name="poolManagerStub" ref="pool-manager-stub"/>
  </bean>

  <bean id="scheduled-thread-pool"
        class="org.dcache.util.CDCScheduledExecutorServiceDecorator"
        destroy-method="shutdown">
      <description>Thread pool for scheduled activities</description>
      <constructor-arg>
          <bean class="java.util.concurrent.Executors"
                factory-method="newSingleThreadScheduledExecutor"/>
      </constructor-arg>
  </bean>

    <bean id="request-thread-pool" class="org.dcache.util.BoundedCachedExecutor" destroy-method="shutdown">
        <description>Thread pool for xrootd request processing</description>
        <constructor-arg value="${xrootd.limits.threads}"/>
    </bean>

  <bean id="connection-tracker"
        class="org.dcache.xrootd.door.ConnectionTracker">
    <description>Administrative interface to manage connections</description>
  </bean>

  <bean id="signing-policy"
        class="org.dcache.xrootd.security.SigningPolicy">
      <constructor-arg name="secLvl" value="${xrootd.security.level}"/>
      <constructor-arg name="force" value="${xrootd.security.force-signing}"/>
  </bean>

  <bean id="server" class="org.dcache.xrootd.door.NettyXrootdServer"
        init-method="start" destroy-method="stop">
    <description>Netty based Xrootd service</description>
    <property name="port" value="${xrootd.net.port}"/>
    <property name="address" value="#{ T(com.google.common.base.Strings).emptyToNull('${xrootd.net.listen}') }"/>
    <property name="backlog" value="${xrootd.net.backlog}"/>
    <property name="requestExecutor" ref="request-thread-pool"/>
    <property name="connectionTracker" ref="connection-tracker"/>
    <property name="door" ref="door"/>
    <property name="channelHandlerFactories" ref="channelhandler-factories"/>
    <property name="accessLogHandlerFactories" ref="accesslog-factories"/>
    <property name="rootPath" value="${xrootd.root}"/>
    <property name="queryConfig">
        <bean class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
            <property name="prefix" value="xrootd.query-config"/>
        </bean>
    </property>
    <property name="appIoQueues">
        <bean class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
            <property name="prefix" value="xrootd.app-ioqueue"/>
        </bean>
    </property>
    <property name="expectedProxyProtocol" value="${xrootd.enable.proxy-protocol}"/>
    <property name="signingPolicy" ref="signing-policy"/>
  </bean>

  <bean id="pnfs" class="diskCacheV111.util.PnfsHandler">
    <description>PNFS manager client module</description>
    <constructor-arg>
      <bean class="dmg.cells.nucleus.CellPath">
        <constructor-arg value="${xrootd.service.pnfsmanager}"/>
      </bean>
    </constructor-arg>
  </bean>

  <bean id="accesslog-factories"
        class="org.dcache.xrootd.spring.ChannelHandlerFactoryFactoryBean">
    <description>Factory for access log handler</description>
    <property name="plugins" value="access-log"/>
  </bean>

  <bean id="channelhandler-factories"
        class="org.dcache.xrootd.spring.GplazmaAwareChannelHandlerFactoryFactoryBean"
        destroy-method="shutdown">
      <description>Factory for channel handlers</description>
      <property name="plugins" value="${xrootd.plugins}"/>
      <property name="loginStrategy" ref="loginstrategy"/>
      <property name="anonymousLoginStrategy" ref="anonymous-loginstrategy"/>
  </bean>

  <bean id="door" class="org.dcache.xrootd.door.XrootdDoor">
    <description>Gateway between xrootd protocol handler and dCache</description>
    <property name="pnfsStub" ref="pnfs-stub"/>
    <property name="poolStub" ref="pool-stub"/>
    <property name="poolManagerStub">
      <bean class="org.dcache.poolmanager.PoolManagerStub">
        <property name="handler" ref="pool-manager-handler"/>
        <property name="maximumPoolManagerTimeout" value="${xrootd.service.poolmanager.timeout}"/>
        <property name="maximumPoolManagerTimeoutUnit" value="${xrootd.service.poolmanager.timeout.unit}"/>
        <property name="maximumPoolTimeout" value="${xrootd.service.pool.timeout}"/>
        <property name="maximumPoolTimeoutUnit" value="${xrootd.service.pool.timeout.unit}"/>
      </bean>
    </property>
    <property name="billingStub" ref="billing-stub"/>
    <property name="writePaths" value="${xrootd.authz.write-paths}"/>
    <property name="readPaths" value="${xrootd.authz.read-paths}"/>
    <property name="pnfsHandler" ref="pnfs"/>
    <property name="ioQueue" value="${xrootd.mover.queue}"/>
    <property name="moverTimeout" value="${xrootd.mover.timeout}"/>
    <property name="moverTimeoutUnit" value="${xrootd.mover.timeout.unit}"/>
    <property name="executor" ref="scheduled-thread-pool"/>
    <property name="poolMonitor" ref="pool-monitor"/>
    <property name="triedHostsEnabled" value="${xrootd.enable.tried-hosts}"/>
  </bean>

  <bean id="pool-manager-handler" class="org.dcache.poolmanager.PoolManagerHandlerSubscriber">
    <description>Pool manager client</description>
    <property name="poolManager" ref="pool-manager-stub"/>
  </bean>

  <bean id="anonymous-loginstrategy" class="org.dcache.auth.AnonymousLoginStrategy">
    <description>Login strategy used for unauthenticated login</description>
    <property name="user" value="${xrootd.authz.user}"/>
  </bean>

  <bean id="loginstrategy" class="org.dcache.auth.CachingLoginStrategy">
    <description>Caching login strategy suitable for GSI and SciTokens</description>
    <constructor-arg index="0">
      <bean class="org.dcache.auth.UnionLoginStrategy">
        <property name="loginStrategies">
          <list>
            <bean class="org.dcache.services.login.RemoteLoginStrategy">
              <property name="cellStub" ref="gPlazma-stub" />
            </bean>
          </list>
        </property>
        <property name="anonymousAccess" value="${xrootd.authz.anonymous-operations}"/>
      </bean>
    </constructor-arg>
    <constructor-arg index="1" value="${xrootd.limits.login-cache.size}"/>
    <constructor-arg index="2" value="${xrootd.limits.login-cache.lifetime}"/>
    <constructor-arg index="3" value="${xrootd.limits.login-cache.lifetime.unit}"/>
  </bean>

  <bean id="lb" class="dmg.cells.services.login.LoginBrokerPublisher">
    <description>Notifies LoginBroker </description>
    <property name="executor" ref="scheduled-thread-pool"/>
    <property name="updateTime" value="${xrootd.loginbroker.update-period}"/>
    <property name="updateTimeUnit" value="${xrootd.loginbroker.update-period.unit}"/>
    <property name="updateThreshold" value="${xrootd.loginbroker.update-threshold}"/>
    <property name="protocolEngine" value="org.dcache.xrootd.door.XrootdDoor"/>
    <property name="protocolVersion" value="${xrootd.loginbroker.version}"/>
    <property name="protocolFamily" value="${xrootd.loginbroker.family}"/>
    <property name="port" value="${xrootd.loginbroker.port}"/>
    <property name="address" value="#{ T(com.google.common.base.Strings).emptyToNull('${xrootd.loginbroker.address}') }"/>
    <property name="topic" value="${xrootd.loginbroker.update-topic}"/>
    <property name="tags" value="#{ T(com.google.common.base.Splitter).on(',').omitEmptyStrings().splitToList('${xrootd.loginbroker.tags}') }"/>
    <property name="root" value="${xrootd.loginbroker.root}"/>
    <property name="readPaths" value="#{ T(com.google.common.base.Splitter).on(':').omitEmptyStrings().splitToList('${xrootd.authz.read-paths}') }"/>
    <property name="writePaths" value="#{ T(com.google.common.base.Splitter).on(':').omitEmptyStrings().splitToList('${xrootd.authz.write-paths}') }"/>
  </bean>

  <beans profile="kafka-true">


    <bean id="listener" class="org.dcache.kafka.LoggingProducerListener"/>

    <bean id="kafka-configs"
          class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
      <property name="prefix" value="xrootd.kafka.producer.configs"/>
      <property name="staticEnvironment" >
        <map>
          <entry key="bootstrap.servers" value="${xrootd.kafka.producer.bootstrap.servers}"/>
          <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>
          <entry key="value.serializer" value="org.dcache.notification.DoorRequestMessageSerializer"/>
          <entry key="client.id" value="${xrootd.cell.name}@${dcache.domain.name}"/>
        </map>
      </property>

    </bean>

    <bean id="billing-template" class="org.springframework.kafka.core.KafkaTemplate">
      <constructor-arg>
        <bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
            <constructor-arg name="configs" ref ="kafka-configs"/>
        </bean>
      </constructor-arg>
      <property name="defaultTopic" value="${xrootd.kafka.topic}"/>
      <property name="producerListener" ref="listener"/>
    </bean>
  </beans>
</beans>
