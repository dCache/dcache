<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ dCache - http://www.dcache.org/
  ~
  ~ Copyright (C) 2016 Deutsches Elektronen-Synchrotron
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:plugin="http://www.springframework.org/schema/plugin"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/plugin http://www.springframework.org/schema/plugin/spring-plugin.xsd">

  <context:property-placeholder/>
  <context:annotation-config/>

  <!-- Import additional configuration for spring-plugin -->
  <import resource="classpath*:org/dcache/frontend/**/event-plugins.xml" />

  <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

  <!-- Convert properties with multiple values separated by comma into an array of strings:
       key=value1,value2,value3 : String[] {value1, value2, value3}
  -->
  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
      <property name="customEditors">
          <map>
              <entry key="java.lang.String[]"
                     value="org.springframework.beans.propertyeditors.StringArrayPropertyEditor" />
          </map>
      </property>
  </bean>

  <bean id="pnfs-stub" class="org.dcache.cells.CellStub">
      <description>PnfsManager communication stub</description>
      <property name="destination" value="${frontend.service.pnfsmanager}"/>
      <property name="timeout" value="${frontend.service.pnfsmanager.timeout}"/>
      <property name="timeoutUnit" value="${frontend.service.pnfsmanager.timeout.unit}"/>
  </bean>

  <bean id="pool-manager-stub" class="org.dcache.cells.CellStub">
      <description>PoolManager communication stub</description>
      <property name="destination" value="${frontend.service.poolmanager}"/>
      <property name="timeout" value="${frontend.service.poolmanager.timeout}"/>
      <property name="timeoutUnit" value="${frontend.service.poolmanager.timeout.unit}"/>
  </bean>

  <bean id="pool-stub" class="org.dcache.cells.CellStub">
    <description>Pool communication stub</description>
    <property name="timeout" value="${frontend.service.pool.timeout}"/>
    <property name="timeoutUnit" value="${frontend.service.pool.timeout.unit}"/>
  </bean>

  <bean id="spacemanager-stub" class="org.dcache.cells.CellStub">
    <description>Spacemanager communication stub</description>
    <property name="destination" value="${frontend.service.spacemanager}"/>
    <property name="timeout" value="${frontend.service.spacemanager.timeout}"/>
    <property name="timeoutUnit" value="${frontend.service.spacemanager.timeout.unit}"/>
  </bean>

  <bean id="login-stub" class="org.dcache.cells.CellStub">
      <description>Login service communication stub</description>
      <property name="destination" value="${frontend.service.gplazma}"/>
      <property name="timeout" value="${frontend.service.gplazma.timeout}"/>
      <property name="timeoutUnit" value="${frontend.service.gplazma.timeout.unit}"/>
  </bean>

  <bean id="list-handler" class="org.dcache.util.list.ListDirectoryHandler">
      <description>Client stub for directory listing</description>
      <constructor-arg>
          <bean class="diskCacheV111.util.PnfsHandler">
              <constructor-arg ref="pnfs-stub"/>
          </bean>
      </constructor-arg>
  </bean>
    <bean id="path-mapper" class="org.dcache.http.PathMapper">
        <description>Mapping between request paths and dCache paths</description>
        <property name="rootPath" value="${frontend.root}"/>
    </bean>

  <bean id="login-strategy" class="org.dcache.webdav.AnonymousUserLoginStrategy">
      <description>Processes login for user 'anonymous'</description>
      <property name="anonymousAccess" value="${frontend.authz.anonymous-operations}"/>
      <property name="username" value="anonymous"/>
      <property name="nonAnonymousStrategy" ref="union-login-strategy"/>
  </bean>

  <bean id="cache-login-strategy" class="org.dcache.auth.CachingLoginStrategy">
      <description>Processes mapping requests</description>
      <constructor-arg index="0" ref="login-strategy" />
      <constructor-arg index="1" value="${frontend.service.gplazma.cache.size}" />
      <constructor-arg index="2" value="${frontend.service.gplazma.cache.timeout}" />
      <constructor-arg index="3" value="${frontend.service.gplazma.cache.timeout.unit}" />
  </bean>

  <bean id="pool-monitor" class="org.dcache.poolmanager.RemotePoolMonitor">
     <description>Maintains runtime information about all pools</description>
     <property name="poolManagerStub" ref="pool-manager-stub"/>
  </bean>

  <bean id="event-streams" class="org.dcache.restful.events.EventStreamRepository">
    <description>Dispatcher for incoming events</description>
    <property name="plugins">
      <plugin:list class="org.dcache.restful.events.spi.EventStream"/>
    </property>
  </bean>

  <bean id="geographic-placement" class="com.google.common.collect.ImmutableList"
	factory-method="copyOf">
    <description>ISO-3166 identifiers where data may be stored.</description>
    <constructor-arg value="#{ T(com.google.common.base.Splitter).on(',').trimResults().omitEmptyStrings().splitToList('${frontend.geographic-placement}') }"/>
  </bean>

  <bean id="event-registrar" class="org.dcache.restful.events.Registrar">
    <description>Registrar for clients</description>
    <property name="maximumChannelsPerUser"
            value="${frontend.limit.events.channels-per-user}"/>
    <property name="defaultDisconnectTimeout"
            value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                    ${frontend.limit.events.disconnect-timeout.default},
                    '${frontend.limit.events.disconnect-timeout.default.unit}')}" />
    <property name="eventBacklog"
              value="${frontend.limit.events.backlog}"/>
  </bean>

  <bean id="login-broker-source" class="dmg.cells.services.login.LoginBrokerSubscriber">
      <description>Maintains updated list of doors.</description>
      <property name="topic" value="${frontend.loginbroker.request-topic}"/>
  </bean>

  <bean id="scheduling-service"
        class="org.dcache.util.CDCScheduledExecutorServiceDecorator"
        destroy-method="shutdownNow">
      <description>Used to execute periodic data collection (admin services)</description>
      <constructor-arg>
          <bean class="java.util.concurrent.ScheduledThreadPoolExecutor">
              <constructor-arg value="5"/>
          </bean>
      </constructor-arg>
  </bean>

  <bean id="transfer-collector" class="org.dcache.restful.util.transfers.TransferCollector">
      <description>Collects active transfer info from from pools and doors.</description>
      <property name="loginBrokerSource" ref="login-broker-source"/>
  </bean>

  <bean id="transfer-info-service" class="org.dcache.restful.services.transfers.TransferInfoServiceImpl">
      <description>Caches and serves information on active transfers.</description>
      <property name="timeout" value="${frontend.service.transfers.timeout}"/>
      <property name="timeoutUnit" value="${frontend.service.transfers.timeout.unit}"/>
      <property name="collector" ref="transfer-collector"/>
      <property name="executorService" ref="scheduling-service"/>
  </bean>

  <bean id="alarms-collector" class="org.dcache.restful.util.alarms.AlarmsCollector">
      <description>Communicates with alarms backend.</description>
      <property name="alarmsPath" value="${frontend.service.alarms}"/>
  </bean>

  <bean id="alarms-info-service" class="org.dcache.restful.services.alarms.AlarmsInfoServiceImpl">
      <description>Collects, updates and deletes alarms.</description>
      <property name="collector" ref="alarms-collector"/>
      <property name="executorService" ref="scheduling-service"/>
      <property name="timeout" value="${frontend.service.alarms.timeout}"/>
      <property name="timeoutUnit" value="${frontend.service.alarms.timeout.unit}"/>
  </bean>

  <bean id="pool-history-service" class="org.dcache.cells.CellStub">
    <description>Pool History service cell stub</description>
    <property name="timeout" value="${frontend.service.pool-history.timeout}"/>
    <property name="timeoutUnit" value="${frontend.service.pool-history.timeout.unit}"/>
    <property name="destination" value="${frontend.service.pool-history}"/>
  </bean>

  <bean id="pool-update-executor" class="org.dcache.util.BoundedCachedExecutor"
        destroy-method="shutdownNow">
     <constructor-arg value="${frontend.service.pool-info.update-threads}"/>
  </bean>

  <bean id="pool-histories-handler" class="org.dcache.restful.util.pool.PoolHistoriesHandler">
    <property name="historyService" ref="pool-history-service"/>
    <property name="poolInfoService" ref="pool-info-service"/>
  </bean>

  <bean id="pool-info-collector" class="org.dcache.restful.util.pool.PoolDiagnosticInfoCollector">
        <description>Collects pool info from from pools.</description>
        <property name="service" ref="pool-info-service"/>
  </bean>

  <bean id="pool-info-processor" class="org.dcache.restful.util.pool.PoolDataRequestProcessor">
      <description>Handles update futures and processes them for persistence.</description>
      <property name="executor" ref="pool-update-executor"/>
      <property name="service" ref="pool-info-service"/>
      <property name="handler" ref="pool-histories-handler"/>
  </bean>

  <bean id="pool-info-service" class="org.dcache.restful.services.pool.PoolInfoServiceImpl">
        <description>Caches and serves information on pools and pool activity.</description>
        <property name="maxPoolActivityListSize" value="${frontend.service.pool-info.maxPoolActivityListSize}"/>
        <property name="timeout" value="${frontend.service.pool-info.timeout}"/>
        <property name="timeoutUnit" value="${frontend.service.pool-info.timeout.unit}"/>
        <property name="collector" ref="pool-info-collector"/>
        <property name="executorService" ref="scheduling-service"/>
        <property name="processor" ref="pool-info-processor"/>
        <property name="poolMonitor" ref="pool-monitor"/>
  </bean>

  <bean id="custom-headers"
        class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
    <property name="prefix" value="frontend.custom-response-header"/>
  </bean>

  <bean id="pinManagerStub" class="org.dcache.cells.CellStub">
    <description>Pin manager cell stub</description>
    <property name="timeout" value="${frontend.service.pinmanager.timeout}"/>
    <property name="timeoutUnit" value="${frontend.service.pinmanager.timeout.unit}"/>
    <property name="destination" value="${frontend.service.pinmanager}"/>
  </bean>

  <bean id="qos-engine" class="org.dcache.cells.CellStub">
    <description>QoS Engine cell stub</description>
    <property name="timeout" value="${frontend.service.qos.timeout}"/>
    <property name="timeoutUnit" value="${frontend.service.qos.timeout.unit}"/>
    <property name="destination" value="${frontend.service.qos}"/>
  </bean>

  <bean id="bulk-service" class="org.dcache.cells.CellStub">
    <description>Bulk request service cell stub</description>
    <property name="timeout" value="${frontend.service.bulk-service.timeout}"/>
    <property name="timeoutUnit" value="${frontend.service.bulk-service.timeout.unit}"/>
    <property name="destination" value="${frontend.service.bulk-service}"/>
  </bean>

  <bean id="billing-info-collector" class="org.dcache.restful.util.billing.BillingInfoCollector">
        <description>Collects information from billing backend (database).</description>
        <property name="billingPath">
            <bean class="dmg.cells.nucleus.CellPath">
                <constructor-arg value="${frontend.service.billing}"/>
            </bean>
        </property>
  </bean>

  <bean id="billing-info-service" class="org.dcache.restful.services.billing.BillingInfoServiceImpl">
        <description>Caches and serves billing records and histogram data.</description>
        <property name="collector" ref="billing-info-collector"/>
        <property name="timeout" value="${frontend.service.billing.collection.timeout}"/>
        <property name="timeoutUnit" value="${frontend.service.billing.collection.timeout.unit}"/>
        <property name="executorService" ref="scheduling-service"/>
  </bean>

  <bean id="cell-update-executor" class="org.dcache.util.BoundedCachedExecutor"
        destroy-method="shutdownNow">
    <constructor-arg value="${frontend.service.cell-info.update-threads}"/>
  </bean>

  <bean id="cell-info-collector" class="org.dcache.restful.util.cells.CellInfoCollector">
    <description>Collects cell info from from domains.</description>
  </bean>

  <bean id="cell-info-processor" class="org.dcache.restful.util.cells.CellInfoFutureProcessor">
    <description>Handles update futures and processes them for persistence.</description>
    <property name="executor" ref="cell-update-executor"/>
    <property name="service" ref="cell-info-service"/>
  </bean>

  <bean id="cell-info-service" class="org.dcache.restful.services.cells.CellInfoServiceImpl">
    <description>Caches and serves information on cell services.</description>
    <property name="timeout" value="${frontend.service.cell-info.timeout}"/>
    <property name="timeoutUnit" value="${frontend.service.cell-info.timeout.unit}"/>
    <property name="collector" ref="cell-info-collector"/>
    <property name="executorService" ref="scheduling-service"/>
    <property name="processor" ref="cell-info-processor"/>
  </bean>

  <bean id="restores-collector" class="org.dcache.restful.util.restores.RestoreCollector">
    <description>Collects staging request info from from pool manager.</description>
    <property name="pnfsStub" ref="pnfs-stub"/>
    <property name="receiver">
      <bean class="diskCacheV111.poolManager.RestoreRequestsReceiver" init-method="initialize">
        <property name="lifetime" value="${frontend.restore-requests.lifetime}"/>
        <property name="lifetimeUnit" value="${frontend.restore-requests.lifetime.unit}"/>
      </bean>
    </property>
  </bean>

  <bean id="archive-info-collector" class="org.dcache.restful.util.wlcg.ArchiveInfoCollector">
    <description>Collects file locality info from from pool manager.</description>
    <property name="poolMonitor" ref="pool-monitor"/>
    <property name="service">
      <bean class="org.dcache.util.BoundedCachedExecutor" destroy-method="shutdownNow">
        <constructor-arg value="${frontend.service.wlcg.file-locality-collector-threads}"/>
      </bean>
    </property>
    <property name="maxPaths" value="${frontend.service.wlcg.file-locality-max-files}"/>
  </bean>

  <bean id="restore-info-service" class="org.dcache.restful.services.restores.RestoresInfoServiceImpl">
    <description>Caches and serves information on staging requests.</description>
    <property name="timeout" value="${frontend.service.restores.timeout}"/>
    <property name="timeoutUnit" value="${frontend.service.restores.timeout.unit}"/>
    <property name="collector" ref="restores-collector"/>
    <property name="executorService" ref="scheduling-service"/>
  </bean>

  <bean id="bulk-service-communicator" class="org.dcache.restful.util.bulk.BulkServiceCommunicator">
    <property name="bulkService" ref="bulk-service"/>
  </bean>

    <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="request">
                    <bean class="org.springframework.web.context.request.RequestScope"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="jersey-servlet" class="org.eclipse.jetty.servlet.ServletHolder">
        <constructor-arg name="name" value="rest"/>
        <constructor-arg name="servlet">
            <bean class="org.glassfish.jersey.servlet.ServletContainer">
                <constructor-arg name="resourceConfig">
                    <bean class="org.dcache.restful.DcacheRestApplication"/>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="swagger-servlet" class="org.eclipse.jetty.servlet.ServletHolder">
        <constructor-arg name="name" value="Jersey2Config"/>
        <constructor-arg name="servlet">
            <bean class="io.swagger.jersey.config.JerseyJaxrsConfig"/>
        </constructor-arg>
        <property name="initParameters">
            <map>
                <entry key="swagger.api.basepath" value="/api/v1"/>
            </map>
        </property>
    </bean>

    <bean id="well-known-producer-factory-provider"
      class="org.dcache.services.httpd.wellknown.WellKnownProducerFactoryProvider"
      init-method="initialize">
      <description>Loads the factories for producers of well-known endpoint content.</description>
    </bean>

    <bean id="handlers" class="org.eclipse.jetty.server.handler.HandlerList">
        <description>List of handlers for HTTP requests</description>
        <property name="handlers">
            <list>
                <bean class="org.eclipse.jetty.server.handler.ContextHandler">
                    <description>Provide access to dcache-view</description>
                    <property name="contextPath" value="/"/>
                    <property name="allowNullPathInfo" value="true"/>
                    <property name="handler">
                        <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
                            <property name="directoriesListed" value="true"/>
                            <property name="redirectWelcome" value="false" />
                            <property name="resourceBase" value="${frontend.dcache-view.dir}"/>
                        </bean>
                    </property>
                </bean>
                <bean class="org.dcache.restful.util.StaticDataHandler">
                    <description>Provide dCache configuration as JSON or JavaScript</description>
                    <property name="path" value="${frontend.static.path}" />
                    <property name="data">
                        <bean class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
                            <property name="prefix" value="frontend.static"/>
                        </bean>
                    </property>
                </bean>
                <bean class="org.eclipse.jetty.server.handler.ContextHandler">
                    <description>Provide access to dCache customised swagger-ui</description>
                    <property name="contextPath" value="/api/v1"/>
                    <property name="handler">
                        <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
                            <property name="directoriesListed" value="true"/>
                            <property name="resourceBase" value="${dcache.paths.swagger-ui.html}"/>
                        </bean>
                    </property>
                </bean>
                <bean class="org.eclipse.jetty.server.handler.ContextHandler">
                  <description>Provide access to dcache-view-admin</description>
                  <property name="contextPath" value="/admin"/>
                  <property name="handler">
                    <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
                      <property name="directoriesListed" value="true"/>
                      <property name="resourceBase" value="${frontend.dcache-view-admin.dir}"/>
                    </bean>
                  </property>
                </bean>
                <bean class="org.eclipse.jetty.server.handler.ContextHandler">
                    <description>Provide access to standard swagger-ui library</description>
                    <property name="contextPath" value="/api/libraries/swagger-ui"/>
                    <property name="allowNullPathInfo" value="true"/>
                    <property name="handler">
                        <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
                            <property name="directoriesListed" value="true"/>
                            <property name="resourceBase" value="jar:file:${dcache.paths.swagger-ui.jar}!${dcache.paths.swagger-ui.jar.internal}"/>
                        </bean>
                    </property>
                </bean>
                <bean class="org.eclipse.jetty.server.handler.ContextHandler">
                  <property name="contextPath" value="/.well-known"/>
                  <property name="allowNullPathInfo" value="true"/>
                  <property name="handler">
                    <bean class="org.dcache.services.httpd.handlers.WellKnownHandler">
                      <property name="factoryProvider" ref="well-known-producer-factory-provider"/>
                    </bean>
                  </property>
                </bean>
                  <bean class="org.dcache.restful.LoggingHandler">
                    <property name="handler" ref="authentication-handler"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="authentication-handler" class="org.dcache.http.AuthenticationHandler">
        <description>Handler that authenticates a request</description>
        <property name="handler" ref="authorised-handlers"/>
        <property name="loginStrategy" ref="cache-login-strategy"/>
        <property name="readOnly" value="${frontend.authz.readonly}"/>
        <property name="enableBasicAuthentication" value="${frontend.authn.basic}"/>
        <property name="realm" value="${frontend.authn.realm}"/>
        <property name="acceptBearerTokenUnencrypted"
                  value="${frontend.macaroons.accept-over-unencrypted-channel}"/>
    </bean>

    <bean id="authorised-handlers" class="org.eclipse.jetty.server.handler.HandlerList">
        <description>All handlers that may require authentication.</description>
        <property name="handlers">
            <list>
                <bean class="org.eclipse.jetty.servlet.ServletContextHandler">
                    <property name="contextPath" value="/api"/>
                    <property name="eventListeners">
                        <list>
                            <bean class="org.springframework.web.context.request.RequestContextListener"/>
                        </list>
                    </property>
                    <property name="servletHandler">
                        <bean class="org.dcache.restful.util.SpringWebServletHandler">
                            <property name="servlets">
                                <list>
                                    <ref bean="swagger-servlet"/>
                                    <ref bean="jersey-servlet"/>
                                </list>
                            </property>
                            <property name="servletMappings">
                                <list>
                                    <bean class="org.eclipse.jetty.servlet.ServletMapping">
                                        <property name="servletName" value="rest"/>
                                        <property name="pathSpecs">
                                            <list>
                                                <value>/v1/*</value>
                                            </list>
                                        </property>
                                    </bean>
                                </list>
                            </property>
                        </bean>
                    </property>
                </bean>

                <bean class="org.eclipse.jetty.server.handler.DefaultHandler"/>
            </list>
        </property>
    </bean>

    <bean id="banned-ciphers" class="org.dcache.util.Crypto"
          factory-method="getBannedCipherSuitesFromConfigurationValue">
        <constructor-arg value="${frontend.authn.ciphers}"/>
    </bean>

    <bean id="thread-pool" class="org.eclipse.jetty.util.thread.QueuedThreadPool">
        <!-- Note that Jetty manages the lifecycle of this thread pool -->
        <description>Thread pool used by Jetty for request processing</description>

        <constructor-arg value="${frontend.limits.threads.max}"/>
        <constructor-arg value="${frontend.limits.threads.min}"/>
        <constructor-arg
                value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${frontend.limits.threads.idle-time},
                     '${frontend.limits.threads.idle-time.unit}')}" />
        <constructor-arg>
            <bean class="org.eclipse.jetty.util.BlockingArrayQueue">
                <constructor-arg value="${frontend.limits.queue-length}"/>
            </bean>
        </constructor-arg>

        <property name="name" value="jetty"/>
    </bean>

    <bean id="jetty" class="org.eclipse.jetty.server.Server"
          init-method="start" destroy-method="stop">
        <description>Embedded HTTP server</description>
        <constructor-arg ref="thread-pool"/>
        <property name="stopTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${frontend.limits.graceful-shutdown},
                     '${frontend.limits.graceful-shutdown.unit}')}"/>
        <property name="connectors">
            <list>
                <ref bean="server-connector"/>
            </list>
        </property>
        <property name="handler">
          <!--+
              |  The RewriteHandler allows modification of the
              |  HttpServletResponse headers.  This allows
              |  injection of the admin-supplied non-standard
              |  response headers.  Note that these header values
              |  are set before the request handler processes the
              |  request, allowing the handler to adjust any
              |  admin-supplied header.  While this weakens the
              |  feature, it also prevents the admin from
              |  mistakenly breaking the response.
              +-->
            <bean class="org.eclipse.jetty.rewrite.handler.RewriteHandler">
                <property name="rules">
                    <bean class="org.dcache.util.jetty.HeaderRewriteRuleContainerFactoryBean">
                        <property name="headers" ref="custom-headers"/>
                    </bean>
                </property>
                <property name="handler" ref="handlers"/>
            </bean>
        </property>

        <property name="beans">
            <list>
                <bean class="org.eclipse.jetty.server.LowResourceMonitor">
                    <constructor-arg ref="jetty"/>
                    <property name="lowResourcesIdleTimeout"
                              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                              ${frontend.limits.low-resource-idle-time},
                              '${frontend.limits.low-resource-idle-time.unit}')}" />
                    <property name="maxLowResourcesTime" value="180000"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="server-connector" class="org.dcache.util.jetty.ConnectorFactoryBean">
        <description>HTTPS connector supporting grid certificates</description>

        <property name="server" ref="jetty"/>

        <property name="host" value="#{ T(com.google.common.base.Strings).emptyToNull('${frontend.net.listen}') }"/>
        <property name="port" value="${frontend.net.port}"/>
        <property name="backlog" value="${frontend.limits.backlog}"/>
        <property name="idleTimeout" value="${frontend.limits.idle-time}"/>
        <property name="idleTimeoutUnit" value="${frontend.limits.idle-time.unit}"/>
        <property name="acceptors" value="${frontend.limits.acceptors}"/>

        <property name="protocol" value="${frontend.authn.connector}"/>

        <property name="wantClientAuth" value="${frontend.authn.accept-client-cert}"/>
        <property name="needClientAuth" value="${frontend.authn.require-client-cert}"/>
        <property name="excludedCipherSuites" ref="banned-ciphers"/>

        <property name="caPath" value="${frontend.authn.capath}"/>
        <property name="caPathTimeout" value="${frontend.authn.capath.refresh}"/>
        <property name="caPathTimeoutUnit" value="${frontend.authn.capath.refresh.unit}"/>

        <property name="serverCertificatePath" value="${frontend.authn.hostcert.cert}"/>
        <property name="serverKeyPath" value="${frontend.authn.hostcert.key}"/>
        <property name="serverCertificateTimeout" value="${frontend.authn.hostcert.refresh}"/>
        <property name="serverCertificateTimeoutUnit" value="${frontend.authn.hostcert.refresh.unit}"/>

        <property name="namespaceMode" value="${frontend.authn.namespace-mode}"/>
        <property name="crlCheckingMode" value="${frontend.authn.crl-mode}"/>
        <property name="ocspCheckingMode" value="${frontend.authn.ocsp-mode}"/>

        <property name="proxyConnectionEnabled" value="${frontend.enable.proxy-protocol}"/>
    </bean>


    <!-- Resource beans: JAX-RS objects that handle REST requests. -->
    <bean class="org.dcache.restful.qos.QosManagementNamespace" scope="request"/>
    <bean class="org.dcache.restful.qos.QosManagement" scope="request"/>
    <bean class="org.dcache.restful.resources.alarms.AlarmsResources" scope="request"/>
    <bean class="org.dcache.restful.resources.billing.BillingResources" scope="request">
      <property name="unlimitedOperationVisibility" value="${frontend.authz.unlimited-operation-visibility}"/>
    </bean>
    <bean class="org.dcache.restful.resources.bulk.BulkResources" scope="request"/>
    <bean class="org.dcache.restful.resources.cells.CellInfoResources" scope="request"/>
    <bean class="org.dcache.restful.resources.doors.DoorsResources" scope="request"/>
    <bean class="org.dcache.restful.resources.identity.UserResource" scope="request"/>
    <bean class="org.dcache.restful.resources.namespace.FileResources" scope="request">
      <property name="useQosService" value="${frontend.service.namespace.use-qos-service}"/>
    </bean>
    <bean class="org.dcache.restful.resources.labels.LabelsResources" scope="request"/>
    <bean class="org.dcache.restful.resources.namespace.IdResources" scope="request"/>
    <bean class="org.dcache.restful.resources.namespace.QosPolicyResource" scope="request"/>
    <bean class="org.dcache.restful.resources.pool.PoolGroupInfoResources" scope="request"/>
    <bean class="org.dcache.restful.resources.pool.PoolInfoResources" scope="request">
      <property name="unlimitedOperationVisibility" value="${frontend.authz.unlimited-operation-visibility}"/>
    </bean>
    <bean class="org.dcache.restful.resources.restores.RestoreResources" scope="request">
      <property name="unlimitedOperationVisibility" value="${frontend.authz.unlimited-operation-visibility}"/>
    </bean>
    <bean class="org.dcache.restful.resources.qos.QoSPolicyResource" scope="request"/>
    <bean class="org.dcache.restful.resources.quota.QuotaResources" scope="request"/>
    <bean class="org.dcache.restful.resources.selection.LinkResources" scope="request"/>
    <bean class="org.dcache.restful.resources.selection.UnitResources" scope="request"/>
    <bean class="org.dcache.restful.resources.selection.PartitionResources" scope="request"/>
    <bean class="org.dcache.restful.resources.selection.PoolPreferenceResources" scope="request"/>
    <bean class="org.dcache.restful.resources.space.SpaceManagerResources" scope="request">
        <property name="spaceReservationEnabled" value="${frontend.enable.space-reservation}"/>
    </bean>
    <bean class="org.dcache.restful.resources.transfers.TransferResources" scope="request">
        <property name="unlimitedOperationVisibility" value="${frontend.authz.unlimited-operation-visibility}"/>
    </bean>
    <bean class="org.dcache.restful.resources.tape.ArchiveInfoResources" scope="request"/>
    <bean class="org.dcache.restful.resources.tape.StageResources" scope="request">
      <property name="supportedSitenames" value="${frontend.stage.supported-sitenames"/>
    </bean>
    <bean class="org.dcache.restful.resources.tape.ReleaseResources" scope="request"/>
    <bean class="org.dcache.restful.resources.EventResources" scope="request">
        <property name="maximumDisconnectTimeout"
		  value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
			 ${frontend.limit.events.disconnect-timeout.maximum},
			 '${frontend.limit.events.disconnect-timeout.maximum.unit}')}" />
    </bean>
    <bean class="org.dcache.restful.resources.srr.SrrResource" scope="request">
        <property name="spaceReservationEnabled" value="${frontend.enable.space-reservation}"/>
        <property name="groupMapping" value="${frontend.srr.shares}" />
        <property name="id" value="${info-provider.se-unique-id}" />
        <property name="name" value="${info-provider.se-name}" />
        <property name="architecture" value="${info-provider.dcache-architecture}" />
        <property name="quality" value="${info-provider.dcache-quality-level}" />
        <property name="doorTag" value="${storage-descriptor.door.tag}" />
        <property name="isPublic" value="${frontend.srr.public}" />
    </bean>

    <beans profile="macaroons-true">
        <bean id="macaroon-processor" class="org.dcache.macaroons.MacaroonProcessor">
            <description>Facade for handling macaroon creation and verification</description>
            <property name="secretHandler">
                <bean class="org.dcache.macaroons.ZookeeperSecretHandler">
                    <description>Handle creation, distribution and disposal of secrets using zookeeper</description>
                    <property name="executor" ref="scheduling-service"/>
                    <property name="zookeeperSecretStorage">
                        <bean class="org.dcache.macaroons.ZookeeperSecretStorage"/>
                    </property>
                    <property name="expirationPeriod"
                              value="${frontend.macaroons.expired-removal-period}"/>
                    <property name="expirationPeriodUnit"
                              value="${frontend.macaroons.expired-removal-period.unit}"/>
                </bean>
            </property>
        </bean>

        <bean id="union-login-strategy" class="org.dcache.auth.UnionLoginStrategy">
            <description>Process anonymous login requests</description>
            <property name="loginStrategies">
                <list>
                    <bean class="org.dcache.auth.MacaroonLoginStrategy">
                        <constructor-arg index="0" ref="macaroon-processor"/>
                    </bean>
                    <bean class="org.dcache.services.login.RemoteLoginStrategy">
                        <property name="cellStub" ref="login-stub"/>
                    </bean>
                </list>
            </property>
            <property name="fallbackToAnonymous"
                      value="${webdav.enable.authn.anonymous-fallback-on-failed-login}"/>
            <property name="anonymousAccess" value="${frontend.authz.anonymous-operations}"/>
        </bean>
    </beans>

    <beans profile="macaroons-false">
        <bean id="union-login-strategy" class="org.dcache.auth.UnionLoginStrategy">
            <description>Process anonymous login requests</description>
            <property name="loginStrategies">
                <list>
                    <bean class="org.dcache.services.login.RemoteLoginStrategy">
                        <property name="cellStub" ref="login-stub"/>
                    </bean>
                </list>
            </property>
            <property name="fallbackToAnonymous"
                      value="${webdav.enable.authn.anonymous-fallback-on-failed-login}"/>
            <property name="anonymousAccess" value="${frontend.authz.anonymous-operations}"/>
        </bean>
    </beans>
</beans>
