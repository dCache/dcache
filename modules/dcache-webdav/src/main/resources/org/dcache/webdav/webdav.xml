<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

  <context:property-placeholder/>
  <context:annotation-config/>

  <!-- Convert properties with multiple values separated by comma into an array of strings:
       key=value1,value2,value3 : String[] {value1, value2, value3}
  -->
  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
      <property name="customEditors">
          <map>
              <entry key="java.lang.String[]"
                     value="org.springframework.beans.propertyeditors.StringArrayPropertyEditor" />
          </map>
      </property>
  </bean>

  <bean id="noroutetocell" class="org.dcache.cells.LogNoRouteToCellExceptionReceiver">
      <description>Undeliverable message logger</description>
      <property name="excludedDestinations" value="${webdav.loginbroker.update-topic},${webdav.credential-service.topic}"/>
  </bean>

  <bean id="pnfs-stub" class="org.dcache.cells.CellStub">
      <description>PnfsManager communication stub</description>
      <property name="destination" value="${webdav.service.pnfsmanager}"/>
      <property name="timeout" value="${webdav.service.pnfsmanager.timeout}"/>
      <property name="timeoutUnit" value="${webdav.service.pnfsmanager.timeout.unit}"/>
  </bean>

  <bean id="transfer-manager-stub" class="org.dcache.cells.CellStub">
      <description>TransferManager communication stub</description>

      <property name="destination" value="${webdav.service.transfermanager}"/>
      <property name="timeout" value="${webdav.service.transfermanager.timeout}"/>
      <property name="timeoutUnit" value="${webdav.service.transfermanager.timeout.unit}"/>
  </bean>


  <bean id="credential-service-stub" class="org.dcache.cells.CellStub">
      <description>Credential service communication stub</description>

      <property name="destination" value="${webdav.credential-service.topic}"/>
      <property name="timeout" value="${webdav.credential-service.timeout}"/>
      <property name="timeoutUnit" value="${webdav.credential-service.timeout.unit}"/>
  </bean>


  <bean id="pool-manager-stub" class="org.dcache.cells.CellStub">
      <description>PoolManager communication stub</description>
      <property name="destination" value="${webdav.service.poolmanager}"/>
      <property name="timeout" value="${webdav.service.poolmanager.timeout}"/>
      <property name="timeoutUnit" value="${webdav.service.poolmanager.timeout.unit}"/>
  </bean>


  <bean id="pool-stub" class="org.dcache.cells.CellStub">
      <description>Pool communication stub</description>
      <property name="timeout" value="${webdav.service.pool.timeout}"/>
      <property name="timeoutUnit" value="${webdav.service.pool.timeout.unit}"/>
  </bean>


  <bean id="login-stub" class="org.dcache.cells.CellStub">
      <description>Login serviceunication stub</description>
      <property name="destination" value="${webdav.service.gplazma}"/>
      <property name="timeout" value="${webdav.service.gplazma.timeout}"/>
      <property name="timeoutUnit" value="${webdav.service.gplazma.timeout.unit}"/>
  </bean>


  <bean id="billing-stub" class="org.dcache.cells.CellStub">
      <description>Billing communication stub</description>
      <property name="destination" value="${webdav.service.billing}"/>
  </bean>


  <bean id="list-handler" class="org.dcache.util.list.ListDirectoryHandler">
      <description>Client stub for directory listing</description>
      <constructor-arg>
	  <bean class="diskCacheV111.util.PnfsHandler">
	      <constructor-arg ref="pnfs-stub"/>
	  </bean>
      </constructor-arg>
  </bean>


  <bean id="scheduled-thread-pool" class="java.util.concurrent.Executors"
        factory-method="newScheduledThreadPool" destroy-method="shutdown">
      <description>Thread pool for scheduled activities</description>
      <constructor-arg value="2"/>
  </bean>


  <bean id="login-strategy" class="org.dcache.auth.UnionLoginStrategy">
      <description>Processes login requests</description>
      <property name="loginStrategies">
	  <list>
	      <bean class="org.dcache.services.login.RemoteLoginStrategy">
		  <property name="cellStub" ref="login-stub"/>
	      </bean>
	  </list>
      </property>
      <property name="anonymousAccess" value="${webdav.authz.anonymous-operations}"/>
  </bean>

  <bean id="pool-monitor" class="org.dcache.poolmanager.RemotePoolMonitorFactoryBean">
     <description>Maintains runtime information about all pools</description>
     <property name="poolManagerStub" ref="pool-manager-stub"/>
  </bean>

  <bean id="security-filter" class="org.dcache.webdav.SecurityFilter">
      <description>Handles authorization for the WebDAV door</description>
      <property name="loginStrategy" ref="login-strategy"/>
      <property name="readOnly" value="${webdav.authz.readonly}"/>
      <property name="enableBasicAuthentication" value="${webdav.authn.basic}"/>
      <property name="rootPath" value="${webdav.root}"/>
      <property name="uploadPath" value="${webdav.authz.upload-directory}"/>
  </bean>

  <bean id="credential-service-client" class="org.dcache.webdav.transfer.CredentialServiceClient">
      <description>Client for credential service</description>
      <property name="topicStub" ref="credential-service-stub"/>
  </bean>

  <bean id="remote-transfer-handler" class="org.dcache.webdav.transfer.RemoteTransferHandler">
      <description>Coordinate transfers</description>

      <property name="transferManagerStub" ref="transfer-manager-stub"/>
      <property name="performanceMarkerPeroid"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${webdav.third-party-transfers.performance-marker-period},
                     '${webdav.third-party-transfers.performance-marker-period.unit}')}" />
      <property name="defaultVerification" value="${webdav.enable.third-party.requiring-verification-by-default}"/>
  </bean>

  <bean id="3rd-party-copy-filter" class="org.dcache.webdav.transfer.CopyFilter">
      <description>Handles requests for 3rd-party copies</description>

      <property name="credentialServiceClient" ref="credential-service-client"/>
      <property name="pnfsStub" ref="pnfs-stub"/>
      <property name="remoteTransferHandler" ref="remote-transfer-handler"/>
      <property name="rootPath" value="${webdav.root}"/>
  </bean>


  <bean id="logging-filter" class="org.dcache.webdav.LoggingFilter">
      <description>Logs all requests</description>
  </bean>

  <bean id="dispatch-filter"
        class="org.dcache.webdav.DcacheStandardFilter">
     <description>Dispatches HTTP requests to handlers</description>
  </bean>

  <bean id="template-config"
	class="org.dcache.util.ConfigurationMapFactoryBean">
      <property name="prefix" value="webdav.templates.config"/>
  </bean>

  <bean id="custom-headers"
	class="org.dcache.util.ConfigurationMapFactoryBean">
      <property name="prefix" value="webdav.custom-response-header"/>
  </bean>

  <bean id="resource-factory" class="org.dcache.webdav.DcacheResourceFactory">
      <description>Exposes dCache resources to Milton WebDAV library</description>

      <property name="pnfsStub" ref="pnfs-stub"/>
      <property name="poolManagerStub" ref="pool-manager-stub"/>
      <property name="poolStub" ref="pool-stub"/>
      <property name="billingStub" ref="billing-stub"/>
      <property name="missingFileStrategy" ref="missing-file-strategy"/>
      <property name="listHandler" ref="list-handler"/>
      <property name="executor" ref="scheduled-thread-pool"/>
      <property name="rootPath" value="${webdav.root}"/>
      <property name="allowedPaths" value="${webdav.authz.allowed-paths}"/>
      <property name="anonymousListing" value="${webdav.authz.anonymous-listing}"/>
      <property name="ioQueue" value="${webdav.mover.queue}"/>
      <property name="moverTimeout" value="${webdav.mover.timeout}"/>
      <property name="moverTimeoutUnit" value="${webdav.mover.timeout.unit}"/>
      <property name="killTimeout" value="${webdav.mover.kill-timeout}"/>
      <property name="killTimeoutUnit" value="${webdav.mover.kill-timeout.unit}"/>
      <property name="transferConfirmationTimeout" value="${webdav.mover.transfer-confirmation-timeout}"/>
      <property name="transferConfirmationTimeoutUnit" value="${webdav.mover.transfer-confirmation-timeout.unit}"/>
      <property name="internalAddress" value="${webdav.net.internal}"/>
      <property name="templateResource" value="${webdav.templates.html}"/>
      <property name="templateConfig" ref="template-config"/>
      <property name="staticContentPath" value="${webdav.static-content.uri}"/>
      <property name="redirectOnReadEnabled" value="${webdav.redirect.on-read}"/>
      <property name="redirectOnWriteEnabled" value="${webdav.redirect.on-write}"/>
      <property name="overwriteAllowed" value="${webdav.enable.overwrite}"/>
      <property name="poolMonitor" ref="pool-monitor"/>
  </bean>

    <bean id="http-manager" class="org.dcache.webdav.HttpManagerFactory">
        <description>Milton WebDAV library</description>
        <property name="filters">
            <list>
                <ref bean="logging-filter"/>
                <ref bean="security-filter"/>
                <ref bean="3rd-party-copy-filter"/>
            </list>
        </property>
        <property name="defaultStandardFilter" ref="dispatch-filter"/>
        <property name="enableDigestAuth" value="false"/>

	<!-- Always enable BASIC auth support in Milton; it is never used for actual
	     authentication, but we identify logged in users by simulating that a BASIC
	     authentication has happened -->
        <property name="enableBasicAuth" value="true"/>
        <property name="enableExpectContinue" value="false"/>
        <property name="enableCompression" value="false"/>
        <property name="enableFormAuth" value="false"/>
        <property name="enableCookieAuth" value="false"/>
        <property name="resourceFactory" ref="resource-factory"/>
        <property name="buffering" value="never"/>
        <property name="staticContentPath" value="${webdav.static-content.uri}"/>
        <property name="templateResource" value="${webdav.templates.html}"/>
	<property name="templateConfig" ref="template-config"/>
    </bean>

    <bean id="handlers" class="org.eclipse.jetty.server.handler.HandlerList">
      <description>List of handlers for HTTP requests</description>
      <property name="handlers">
          <list>
              <bean class="org.eclipse.jetty.server.handler.ContextHandler">
                  <property name="contextPath" value="${webdav.static-content.location}"/>
                  <property name="handler">
                      <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
                          <property name="directoriesListed" value="true"/>
                          <property name="resourceBase" value="${webdav.static-content.dir.local}"/>
                      </bean>
                  </property>
              </bean>
              <bean class="org.eclipse.jetty.server.handler.ContextHandler">
                  <property name="contextPath" value="${webdav.static-content.location}"/>
                  <property name="handler">
                      <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
                          <property name="directoriesListed" value="true"/>
                          <property name="resourceBase" value="${webdav.static-content.dir.default}"/>
                      </bean>
                  </property>
              </bean>
              <bean class="org.eclipse.jetty.server.handler.ContextHandler">
                  <property name="contextPath" value="/robots.txt"/>
                  <property name="allowNullPathInfo" value="true"/>
                  <property name="handler">
                      <bean class="org.dcache.services.httpd.handlers.ContextHandler">
                          <constructor-arg value="robots.txt"/>
                      </bean>
                  </property>
              </bean>
              <bean class="org.dcache.webdav.MiltonHandler">
                  <property name="httpManager" ref="http-manager"/>
              </bean>
              <bean class="org.eclipse.jetty.server.handler.DefaultHandler"/>
          </list>
      </property>
  </bean>


  <bean id="lb" class="dmg.cells.services.login.LoginBrokerPublisher">
      <description>Registers the door with a LoginBroker</description>

      <property name="executor" ref="scheduled-thread-pool"/>
      <property name="updateTime" value="${webdav.loginbroker.update-period}"/>
      <property name="updateTimeUnit" value="${webdav.loginbroker.update-period.unit}"/>
      <property name="updateThreshold" value="${webdav.loginbroker.update-threshold}"/>
      <property name="protocolEngine" value="org.dcache.webdav.DcacheResourceFactory"/>
      <property name="protocolVersion" value="${webdav.loginbroker.version}"/>
      <property name="protocolFamily" value="${webdav.loginbroker.family}"/>
      <property name="address" value="#{ '${webdav.net.listen}'.equals('any') ? null : '${webdav.net.listen}' }"/>
      <property name="port" value="${webdav.net.port}"/>
      <property name="topic" value="${webdav.loginbroker.update-topic}"/>
      <property name="tags" value="#{ T(com.google.common.base.Splitter).on(',').omitEmptyStrings().splitToList('${webdav.loginbroker.tags}') }"/>
      <property name="root" value="${webdav.root}"/>
      <property name="readPaths" value="#{ T(java.util.Arrays).asList('/') }"/>
      <property name="writePaths" value="#{ '${webdav.authz.readonly}'.equals('true') ? T(java.util.Collections).emptyList() : T(java.util.Arrays).asList('/') }"/>
  </bean>

    <bean id="banned-ciphers" class="org.dcache.util.Crypto"
          factory-method="getBannedCipherSuitesFromConfigurationValue">
        <constructor-arg value="${webdav.authn.ciphers}"/>
    </bean>

    <bean id="thread-pool" class="org.eclipse.jetty.util.thread.QueuedThreadPool">
        <!-- Note that Jetty manages the lifecycle of this thread pool -->
        <description>Thread pool used by Jetty for request processing</description>

        <constructor-arg value="${webdav.limits.threads.max}"/>
        <constructor-arg value="${webdav.limits.threads.min}"/>
        <constructor-arg
                value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${webdav.limits.threads.idle-time},
                     '${webdav.limits.threads.idle-time.unit}')}" />
        <constructor-arg>
            <bean class="org.eclipse.jetty.util.BlockingArrayQueue">
                <constructor-arg value="${webdav.limits.queue-length}"/>
            </bean>
        </constructor-arg>

        <property name="name" value="jetty"/>
    </bean>

    <bean id="jetty" class="org.eclipse.jetty.server.Server"
          init-method="start" destroy-method="stop">
        <description>Embedded HTTP server</description>
        <constructor-arg ref="thread-pool"/>
        <property name="stopTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${webdav.limits.graceful-shutdown},
                     '${webdav.limits.graceful-shutdown.unit}')}"/>
        <property name="connectors">
            <list>
                <ref bean="server-connector"/>
            </list>
        </property>
        <property name="handler">
	  <!--+
              |  The RewriteHandler allows modification of the
              |  HttpServletResponse headers.  This allows
              |  injection of the admin-supplied non-standard
              |  response headers.  Note that these header values
              |  are set before the request handler processes the
              |  request, allowing the handler to adjust any
              |  admin-supplied header.  While this weakens the
              |  feature, it also prevents the admin from
              |  mistakenly breaking the response.
	      +-->
            <bean class="org.eclipse.jetty.rewrite.handler.RewriteHandler">
                <property name="rules">
                    <bean class="org.dcache.util.jetty.HeaderRewriteRuleContainerFactoryBean">
                        <property name="headers" ref="custom-headers"/>
                    </bean>
                </property>
                <property name="handler" ref="handlers"/>
            </bean>
        </property>

        <property name="beans">
            <list>
                <bean class="org.eclipse.jetty.server.LowResourceMonitor">
                    <constructor-arg ref="jetty"/>
                    <property name="lowResourcesIdleTimeout"
                              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                              ${webdav.limits.low-resource-idle-time},
                              '${webdav.limits.low-resource-idle-time.unit}')}" />
                    <property name="maxLowResourcesTime" value="180000"/>
                </bean>
            </list>
        </property>
    </bean>

    <beans profile="connector-http">
        <bean id="server-connector" class="org.eclipse.jetty.server.ServerConnector">
            <description>HTTP connector</description>
            <constructor-arg ref="jetty"/>
            <constructor-arg value="${webdav.limits.acceptors}"/>
            <constructor-arg value="-1"/>

            <property name="host" value="#{ '${webdav.net.listen}'.equals('any') ? null : '${webdav.net.listen}' }"/>
            <property name="port" value="${webdav.net.port}"/>
            <property name="acceptQueueSize" value="${webdav.limits.backlog}"/>
            <property name="idleTimeout"
                      value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                                  ${webdav.limits.idle-time},
                                  '${webdav.limits.idle-time.unit}')}" />
        </bean>
    </beans>

    <beans profile="connector-https">
        <bean id="server-connector" class="org.dcache.util.jetty.CanlConnectorFactoryBean">
            <description>HTTPS connector supporting grid certificates</description>

            <property name="server" ref="jetty"/>

            <property name="host" value="#{ '${webdav.net.listen}'.equals('any') ? null : '${webdav.net.listen}' }"/>
            <property name="port" value="${webdav.net.port}"/>
            <property name="backlog" value="${webdav.limits.backlog}"/>
            <property name="idleTimeout" value="${webdav.limits.idle-time}"/>
            <property name="idleTimeoutUnit" value="${webdav.limits.idle-time.unit}"/>
            <property name="acceptors" value="${webdav.limits.acceptors}"/>

            <property name="wantClientAuth" value="${webdav.authn.accept-client-cert}"/>
            <property name="needClientAuth" value="${webdav.authn.require-client-cert}"/>
            <property name="excludedCipherSuites" ref="banned-ciphers"/>

            <property name="caPath" value="${webdav.authn.capath}"/>
            <property name="caPathTimeout" value="${webdav.authn.capath.refresh}"/>
            <property name="caPathTimeoutUnit" value="${webdav.authn.capath.refresh.unit}"/>

            <property name="serverCertificatePath" value="${webdav.authn.hostcert.cert}"/>
            <property name="serverKeyPath" value="${webdav.authn.hostcert.key}"/>
            <property name="serverCertificateTimeout" value="${webdav.authn.hostcert.refresh}"/>
            <property name="serverCertificateTimeoutUnit" value="${webdav.authn.hostcert.refresh.unit}"/>

            <property name="namespaceMode" value="${webdav.authn.namespace-mode}"/>
            <property name="crlCheckingMode" value="${webdav.authn.crl-mode}"/>
            <property name="ocspCheckingMode" value="${webdav.authn.ocsp-mode}"/>
        </bean>
    </beans>

    <beans profile="missing-files-false">
        <bean id="missing-file-strategy"
             class="org.dcache.missingfiles.AlwaysFailMissingFileStrategy">
            <description>configured behaviour to always fail missing-files</description>
        </bean>
    </beans>


    <beans profile="missing-files-true">
        <bean id="missing-files-stub" class="org.dcache.cells.CellStub">
            <description>missing-files service communication stub</description>
            <property name="destination" value="${webdav.service.missing-files}"/>
            <property name="timeout" value="${webdav.service.missing-files.timeout}"/>
            <property name="timeoutUnit" value="${webdav.service.missing-files.timeout.unit}"/>
        </bean>


        <bean id="missing-file-strategy"
              class="org.dcache.missingfiles.RemoteMissingFileStrategy">
            <description>door-side component for querying missing-files service</description>
            <property name="missingFilesCellStub" ref="missing-files-stub"/>
        </bean>
    </beans>
</beans>
