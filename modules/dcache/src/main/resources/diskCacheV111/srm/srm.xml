<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/util
              http://www.springframework.org/schema/util/spring-util.xsd">

  <context:property-placeholder/>
  <context:annotation-config/>

  <!-- Convert properties with multiple values separated by comma into an array of strings:
       key=value1,value2,value3 : String[] {value1, value2, value3}
    -->
  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
    <property name="customEditors">
      <map>
        <entry key="java.lang.String[]"
               value="org.springframework.beans.propertyeditors.StringArrayPropertyEditor"/>
      </map>
    </property>
  </bean>

  <bean id="pool-manager-stub" class="org.dcache.cells.CellStub">
    <description>Pool manager communication stub</description>
    <property name="destination" value="${srm.service.poolmanager}"/>
    <property name="timeout" value="${srm.service.poolmanager.timeout}"/>
    <property name="timeoutUnit" value="${srm.service.poolmanager.timeout.unit}"/>
    <property name="retryOnNoRouteToCell" value="true"/>
  </bean>

  <bean id="gplazma-stub" class="org.dcache.cells.CellStub">
    <description>gPlazma communication stub</description>
    <property name="destination" value="${srm.service.gplazma}"/>
    <property name="timeout" value="${srm.service.gplazma.timeout}" />
    <property name="timeoutUnit" value="${srm.service.gplazma.timeout.unit}" />
  </bean>

  <bean id="billing-stub" class="org.dcache.cells.CellStub">
    <description>Billing communication stub</description>
    <property name="destination" value="${srm.service.billing}"/>
  </bean>

  <bean id="space-manager-stub" class="org.dcache.cells.CellStub">
    <description>Space manager communication stub</description>
    <property name="destination" value="${srm.service.spacemanager}" />
    <property name="timeout" value="${srm.service.spacemanager.timeout}"  />
    <property name="timeoutUnit" value="${srm.service.spacemanager.timeout.unit}"  />
  </bean>

  <bean id="transfer-manager-stub" class="org.dcache.cells.CellStub">
    <description>Transfer manager communication stub</description>
    <property name="destination" value="${srm.service.transfermanager}" />
    <property name="timeout" value="${srm.service.transfermanager.timeout}" />
    <property name="timeoutUnit" value="${srm.service.transfermanager.timeout.unit}" />
  </bean>

  <bean id="copy-manager-stub" class="org.dcache.cells.CellStub">
    <description>Copy manager communication stub</description>
    <property name="destination" value="${srm.service.copymanager}" />
    <property name="timeout" value="${srm.service.copymanager.timeout}" />
    <property name="timeoutUnit" value="${srm.service.copymanager.timeout.unit}" />
  </bean>

  <bean id="pin-manager-stub" class="org.dcache.cells.CellStub">
    <description>Pin manager communication stub</description>
    <property name="destination" value="${srm.service.pinmanager}" />
    <property name="timeout" value="${srm.service.pinmanager.timeout}" />
    <property name="timeoutUnit" value="${srm.service.pinmanager.timeout.unit}" />
  </bean>

  <bean id="login-broker-stub" class="org.dcache.cells.CellStub">
    <description>Login broker communication stub</description>
    <property name="destination" value="${srm.protocols.loginbroker}"/>
    <property name="timeout" value="${srm.protocols.loginbroker.timeout}" />
    <property name="timeoutUnit" value="${srm.protocols.loginbroker.timeout.unit}" />
  </bean>

  <bean id="pnfs-stub" class="org.dcache.cells.CellStub">
    <description>PNFS manager communication stub</description>
    <property name="destination" value="${srm.service.pnfsmanager}"/>
    <property name="timeout" value="${srm.service.pnfsmanager.timeout}"/>
    <property name="timeoutUnit" value="${srm.service.pnfsmanager.timeout.unit}"/>
    <property name="retryOnNoRouteToCell" value="true"/>
  </bean>

  <bean id="pnfs" class="diskCacheV111.util.PnfsHandler">
    <description>PNFS manager client module</description>
    <constructor-arg ref="pnfs-stub"/>
  </bean>

  <bean id="list-handler" class="org.dcache.util.list.ListDirectoryHandler">
    <description>Client stub for directory listing</description>
    <constructor-arg ref="pnfs"/>
  </bean>

  <bean id="messageExecutor"
        class="java.util.concurrent.ThreadPoolExecutor"
        destroy-method="shutdown">
      <description>Thread pool for message processing</description>
      <constructor-arg value="${srm.cell.limits.message.threads.min}"/>
      <constructor-arg value="${srm.cell.limits.message.threads.max}"/>
      <constructor-arg value="${srm.cell.limits.message.threads.max-idle-time}"/>
      <constructor-arg value="${srm.cell.limits.message.threads.max-idle-time.unit}"/>
      <constructor-arg>
          <bean class="java.util.concurrent.ArrayBlockingQueue">
              <constructor-arg value="${srm.cell.limits.message.queue.max}"/>
          </bean>
      </constructor-arg>
  </bean>

  <bean id="lb" class="diskCacheV111.srm.dcache.SrmLoginBrokerHandler"
        init-method="start"
        destroy-method="stop">
    <description>Registers the door with a LoginBroker</description>
    <property name="executor">
      <bean class="java.util.concurrent.Executors"
            factory-method="newSingleThreadScheduledExecutor"
            destroy-method="shutdown">
        <description>Thread pool for scheduled activities</description>
      </bean>
    </property>
    <property name="updateTime" value="${srm.service.loginbroker.update-period}"/>
    <property name="updateTimeUnit" value="${srm.service.loginbroker.update-period.unit}"/>
    <property name="updateThreshold" value="${srm.service.loginbroker.update-threshold}"/>
    <property name="protocolEngine" value="diskCacheV111.srm.dcache.Storage"/>
    <property name="protocolVersion" value="${srm.service.loginbroker.version}"/>
    <property name="protocolFamily" value="${srm.service.loginbroker.family}"/>
    <property name="address" value="#{ '${srm.net.listen}'.equals('any') ? null : '${srm.net.listen}' }"/>
    <property name="port" value="${srm.net.port}"/>
    <property name="loginBrokers" value="${srm.service.loginbroker}"/>
    <property name="root" value="${srm.root}"/>
    <property name="srm" ref="srm"/>
    <property name="httpsPort" value="${srm.net.ssl-port}"/>
    <property name="host" value="${srm.net.host}"/>
  </bean>

  <bean id="auth-persistence-manager" class="diskCacheV111.srm.dcache.DcacheUserPersistenceManager">
    <description>Persistence manager for authentication</description>
    <constructor-arg>
      <bean class="org.dcache.auth.persistence.AuthRecordPersistenceManager">
        <constructor-arg>
          <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
            <property name="dataSource" ref="data-source"/>
            <property name="persistenceUnitName" value="AuthRecordPersistenceUnit"/>
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
  </bean>

  <bean id="login-strategy" class="org.dcache.services.login.CachingLoginStrategy">
    <description>Caching gPlazma client</description>
    <constructor-arg>
      <bean class="org.dcache.services.login.RemoteLoginStrategy">
        <property name="cellStub" ref="gplazma-stub"/>
      </bean>
    </constructor-arg>
    <constructor-arg value="${srm.service.gplazma.cache.size}"/> <!-- Cache size -->
    <constructor-arg value="${srm.service.gplazma.cache.timeout}"/>
    <constructor-arg value="${srm.service.gplazma.cache.timeout.unit}"/>
  </bean>

  <bean id="authorization" class="diskCacheV111.srm.dcache.DCacheAuthorization">
    <description>gPlazma plugin for SRM</description>
    <constructor-arg ref="login-strategy"/>
    <constructor-arg ref="auth-persistence-manager"/>
  </bean>

    <bean id="pool-monitor" class="org.dcache.poolmanager.RemotePoolMonitorFactoryBean">
        <description>Maintains runtime information about all pools</description>
        <property name="poolManagerStub" ref="pool-manager-stub"/>
    </bean>

  <bean id="storage" class="diskCacheV111.srm.dcache.Storage">
    <description>dCache plugin for SRM</description>
    <property name="executor">
        <bean class="java.util.concurrent.Executors"
              factory-method="newCachedThreadPool"
              destroy-method="shutdown"/>
    </property>
    <property name="directoryListSource" ref="list-handler"/>
    <property name="loginBrokerStub" ref="login-broker-stub"/>
    <property name="pnfsStub" ref="pnfs-stub"/>
    <property name="pnfsHandler" ref="pnfs"/>
    <property name="poolManagerStub" ref="pool-manager-stub"/>
    <property name="poolMonitor" ref="pool-monitor"/>
    <property name="spaceManagerStub" ref="space-manager-stub"/>
    <property name="transferManagerStub" ref="transfer-manager-stub"/>
    <property name="copyManagerStub" ref="copy-manager-stub"/>
    <property name="pinManagerStub" ref="pin-manager-stub"/>
    <property name="billingStub" ref="billing-stub"/>
    <property name="isSpaceManagerEnabled"
              value="${srm.enable.space-reservation}"/>
    <property name="loginBrokerUpdatePeriod"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.protocols.loginbroker.period},
                     '${srm.protocols.loginbroker.period.unit}')}" />
    <property name="numberOfDoorsInRandomSelection"
              value="${srm.protocols.population-size}"/>
    <property name="useCustomGetHostByAddress"
              value="${srm.enable.custom-get-host-by-address}"/>
    <property name="configuration" ref="config"/>
    <property name="pinOnlineFiles" value="${srm.enable.pin-online-files}"/>
    <property name="srmPutNotSupportedProtocols" value="${srm.protocols.disallowed.put}"/>
    <property name="srmGetNotSupportedProtocols" value="${srm.protocols.disallowed.get}"/>
    <property name="srmPreferredProtocols" value="${srm.protocols.preferred}"/>
    <property name="credentialStore" ref="gridsite-credential-store"/>
    <property name="verificationRequired" value="${srm.enable.third-party.requiring-verification-by-default}"/>
  </bean>

  <bean id="config" class="diskCacheV111.srm.dcache.Configuration">
    <description>SRM configuration</description>
    <property name="port" value="${srm.net.port}"/>
    <property name="timeout"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.limits.external-copy-script.timeout},
                     '${srm.limits.external-copy-script.timeout.unit}')}" />
    <property name="srmHost" value="${srm.net.host}"/>
    <property name="srmHostsAsArray" value="${srm.net.local-hosts}"/>
    <property name="caCertificatePath" value="${srm.authn.capath}"/>
    <property name="vomsdir" value="${srm.authn.vomsdir}"/>
    <property name="sizeOfSingleRemoveBatch"
              value="${srm.limits.remove-batch-size}"/>
    <property name="maxNumberOfLsEntries"
              value="#{T(org.dcache.commons.util.Strings).parseInt('${srm.limits.ls.entries}')}"/>
    <property name="maxNumberOfLsLevels"
              value="#{T(org.dcache.commons.util.Strings).parseInt('${srm.limits.ls.levels}')}"/>
    <property name="authzCacheLifetime"
              value="#{T(java.util.concurrent.TimeUnit).
                     SECONDS.convert(
                     ${srm.service.gplazma.cache.timeout},
                     '${srm.service.gplazma.cache.timeout.unit}')}" />
    <property name="srm_root" value="${srm.root}"/>
    <property name="buffer_size" value="${srm.limits.transfer-buffer.size}"/>
    <property name="tcp_buffer_size" value="${srm.limits.transfer-tcp-buffer.size}"/>
    <property name="parallel_streams" value="${srm.limits.parallel-streams}"/>
    <property name="debug" value="${srm.enable.external-copy-script.debug}"/>
    <property name="gsiftpclinet" value="globus-url-copy"/>
    <property name="getLifetime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.get.lifetime},
                     '${srm.request.get.lifetime.unit}')}" />
    <property name="bringOnlineLifetime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.bring-online.lifetime},
                     '${srm.request.bring-online.lifetime.unit}')}" />
    <property name="putLifetime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.put.lifetime},
                     '${srm.request.put.lifetime.unit}')}" />
    <property name="copyLifetime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.copy.lifetime},
                     '${srm.request.copy.lifetime.unit}')}" />
    <property name="recursiveDirectoryCreation"
              value="${srm.enable.recursive-directory-creation}"/>
    <property name="advisoryDelete" value="${srm.enable.advisory-delete}"/>

    <property name="getMaxNumOfRetries"
              value="${srm.request.get.retries}"/>
    <property name="getRetryTimeout"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.get.retry-timeout},
                     '${srm.request.get.retry-timeout.unit}')}" />
    <property name="getSwitchToAsynchronousModeDelay"
              value="#{T(org.dcache.commons.util.Strings).parseTime(
                     '${srm.request.get.switch-to-async-mode-delay}',
                     '${srm.request.get.switch-to-async-mode-delay.unit}')}"/>
    <property name="bringOnlineMaxNumOfRetries"
              value="${srm.request.bring-online.retries}"/>
    <property name="bringOnlineRetryTimeout"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.bring-online.retry-timeout},
                     '${srm.request.bring-online.retry-timeout.unit}')}" />
    <property name="bringOnlineSwitchToAsynchronousModeDelay"
              value="#{T(org.dcache.commons.util.Strings).parseTime(
                     '${srm.request.bring-online.switch-to-async-mode-delay}',
                     '${srm.request.bring-online.switch-to-async-mode-delay.unit}')}"/>
    <property name="lsMaxNumOfRetries"
              value="${srm.request.ls.retries}"/>
    <property name="lsRetryTimeout"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.ls.retry-timeout},
                     '${srm.request.ls.retry-timeout.unit}')}" />
    <property name="lsSwitchToAsynchronousModeDelay"
              value="#{T(org.dcache.commons.util.Strings).parseTime(
                     '${srm.request.ls.switch-to-async-mode-delay}',
                     '${srm.request.ls.switch-to-async-mode-delay.unit}')}"/>
    <property name="putMaxNumOfRetries" value="${srm.request.put.retries}"/>
    <property name="putRetryTimeout"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.put.retry-timeout},
                     '${srm.request.put.retry-timeout.unit}')}" />
    <property name="putSwitchToAsynchronousModeDelay"
              value="#{T(org.dcache.commons.util.Strings).parseTime(
                     '${srm.request.put.switch-to-async-mode-delay}',
                     '${srm.request.put.switch-to-async-mode-delay.unit}')}"/>
    <property name="copyMaxNumOfRetries" value="${srm.request.copy.retries}"/>
    <property name="copyRetryTimeout"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.copy.retry-timeout},
                     '${srm.request.copy.retry-timeout.unit}')}" />
    <property name="reserveSpaceMaxNumOfRetries" value="${srm.request.reserve-space.retries}"/>
    <property name="reserveSpaceRetryTimeout"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.reserve-space.retry-timeout},
                     '${srm.request.reserve-space.retry-timeout.unit}')}" />

    <property name="maxQueuedJdbcTasksNum"
              value="${srm.limits.db.queue}"/>
    <property name="jdbcExecutionThreadNum"
              value="${srm.limits.db.threads}"/>
    <property name="credentialsDirectory"
              value="${srm.user.credentials.directory}"/>
    <property name="overwrite" value="${srm.enable.overwrite}"/>
    <property name="overwrite_by_default" value="${srm.enable.overwrite-by-default}"/>
    <property name="clientDNSLookup" value="${srm.enable.client-dns-lookup}"/>
    <property name="gsissl" value="true"/>
    <property name="clientTransportByName" value="${srm.client-transport}"/>
    <property name="qosPluginClass" value="${srm.plugins.qos.class}"/>
    <property name="qosConfigFile" value="${srm.plugins.qos.config.file}"/>

    <property name="srmUserPersistenceManager" ref="auth-persistence-manager"/>
    <property name="authorization" ref="authorization"/>
    <property name="dataSource" ref="data-source"/>
    <property name="transactionManager" ref="tx-manager"/>

    <property name="databaseParametersForList.databaseEnabled"
              value="${srm.persistence.ls.enable}"/>
    <property name="databaseParametersForList.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.ls.remove-expired-period},
                     '${srm.persistence.ls.remove-expired-period.unit}')}" />
    <property name="databaseParametersForList.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.ls.keep-history-period},
                     '${srm.persistence.ls.keep-history-period.unit}')}" />
    <property name="databaseParametersForList.requestHistoryDatabaseEnabled"
              value="${srm.persistence.ls.enable.history}"/>
    <property name="databaseParametersForList.cleanPendingRequestsOnRestart"
              value="${srm.persistence.ls.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForList.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.ls.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForGet.databaseEnabled"
              value="${srm.persistence.get.enable}"/>
    <property name="databaseParametersForGet.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.get.remove-expired-period},
                     '${srm.persistence.get.remove-expired-period.unit}')}" />
    <property name="databaseParametersForGet.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.get.keep-history-period},
                     '${srm.persistence.get.keep-history-period.unit}')}" />
    <property name="databaseParametersForGet.requestHistoryDatabaseEnabled"
              value="${srm.persistence.get.enable.history}"/>
    <property name="databaseParametersForGet.cleanPendingRequestsOnRestart"
              value="${srm.persistence.get.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForGet.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.get.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForPut.databaseEnabled"
              value="${srm.persistence.put.enable}"/>
    <property name="databaseParametersForPut.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.put.remove-expired-period},
                     '${srm.persistence.put.remove-expired-period.unit}')}" />
    <property name="databaseParametersForPut.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.put.keep-history-period},
                     '${srm.persistence.put.keep-history-period.unit}')}" />
    <property name="databaseParametersForPut.requestHistoryDatabaseEnabled"
              value="${srm.persistence.put.enable.history}"/>
    <property name="databaseParametersForPut.cleanPendingRequestsOnRestart"
              value="${srm.persistence.put.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForPut.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.put.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForCopy.databaseEnabled"
              value="${srm.persistence.copy.enable}"/>
    <property name="databaseParametersForCopy.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.copy.remove-expired-period},
                     '${srm.persistence.copy.remove-expired-period.unit}')}" />
    <property name="databaseParametersForCopy.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.copy.keep-history-period},
                     '${srm.persistence.copy.keep-history-period.unit}')}" />
    <property name="databaseParametersForCopy.requestHistoryDatabaseEnabled"
              value="${srm.persistence.copy.enable.history}"/>
    <property name="databaseParametersForCopy.cleanPendingRequestsOnRestart"
              value="${srm.persistence.copy.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForCopy.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.copy.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForBringOnline.databaseEnabled"
              value="${srm.persistence.bring-online.enable}"/>
    <property name="databaseParametersForBringOnline.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.bring-online.remove-expired-period},
                     '${srm.persistence.bring-online.remove-expired-period.unit}')}"/>
    <property name="databaseParametersForBringOnline.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.bring-online.keep-history-period},
                     '${srm.persistence.bring-online.keep-history-period.unit}')}" />
    <property name="databaseParametersForBringOnline.requestHistoryDatabaseEnabled"
              value="${srm.persistence.bring-online.enable.history}"/>
    <property name="databaseParametersForBringOnline.cleanPendingRequestsOnRestart"
              value="${srm.persistence.bring-online.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForBringOnline.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.bring-online.enable.store-transient-state}'.equals('false') ? true : false }"/>

    <property name="databaseParametersForReserve.databaseEnabled"
              value="${srm.persistence.reserve-space.enable}"/>
    <property name="databaseParametersForReserve.expiredRequestRemovalPeriod"
              value="#{T(java.util.concurrent.TimeUnit).SECONDS.convert(
                     ${srm.persistence.reserve-space.remove-expired-period},
                     '${srm.persistence.reserve-space.remove-expired-period.unit}')}" />
    <property name="databaseParametersForReserve.keepRequestHistoryPeriod"
              value="#{T(java.util.concurrent.TimeUnit).DAYS.convert(
                     ${srm.persistence.reserve-space.keep-history-period},
                     '${srm.persistence.reserve-space.keep-history-period.unit}')}" />
    <property name="databaseParametersForReserve.requestHistoryDatabaseEnabled"
              value="${srm.persistence.reserve-space.enable.history}"/>
    <property name="databaseParametersForReserve.cleanPendingRequestsOnRestart"
              value="${srm.persistence.reserve-space.enable.clean-pending-on-restart}"/>
    <property name="databaseParametersForReserve.storeCompletedRequestsOnly"
              value="#{ '${srm.persistence.reserve-space.enable.store-transient-state}'.equals('false') ? true : false }"/>
  </bean>

    <bean id="data-source" class="com.zaxxer.hikari.HikariDataSource"
          destroy-method="shutdown">
        <description>Database connection pool</description>
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <constructor-arg type="java.util.Properties">
                    <value>
                        minimumIdle = ${srm.db.connections.idle}
                        maximumPoolSize = ${srm.db.connections.max}
                        autoCommit = true
                        transactionIsolation = TRANSACTION_READ_COMMITTED
                    </value>
                </constructor-arg>
                <property name="dataSource">
                    <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource">
                        <property name="url" value="${srm.db.url}"/>
                        <property name="username" value="${srm.db.user}"/>
                        <property name="password" value="#{ T(diskCacheV111.util.Pgpass).getPassword('${srm.db.password.file}', '${srm.db.url}', '${srm.db.user}', '${srm.db.password}') }"/>
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

  <bean id="tx-manager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <description>Database transaction manager</description>
    <property name="dataSource" ref="data-source"/>
  </bean>

  <bean id="scheduler-get" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for GET operations</description>

      <constructor-arg value="get_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.GetFileRequest"/>

      <property name="threadPoolSize" value="${srm.request.get.threads}"/>
      <property name="maxRequests" value="${srm.request.get.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.get.max-inprogress}"/>
      <property name="maxReadyJobs" value="${srm.request.get.max-transfers}"/>
      <property name="maxNumberOfRetries" value="${srm.request.get.retries}"/>
      <property name="retryTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.get.retry-timeout},
                     '${srm.request.get.retry-timeout.unit}')}" />
      <property name="maxRunningByOwner" value="${srm.request.get.max-by-same-user}"/>
      <property name="priorityPolicyPlugin" value="DefaultJobAppraiser"/>
  </bean>


  <bean id="scheduler-ls" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for LS operations</description>

      <constructor-arg value="ls_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.LsFileRequest"/>

      <property name="threadPoolSize" value="${srm.request.ls.threads}"/>
      <property name="maxRequests" value="${srm.request.ls.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.ls.max-inprogress}"/>
      <property name="maxNumberOfRetries" value="${srm.request.ls.retries}"/>
      <property name="retryTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.ls.retry-timeout},
                     '${srm.request.ls.retry-timeout.unit}')}" />
      <property name="maxRunningByOwner" value="${srm.request.ls.max-by-same-user}"/>
      <property name="priorityPolicyPlugin" value="DefaultJobAppraiser"/>
  </bean>


  <bean id="scheduler-bringonline" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for BRING-ONLINE operations</description>

      <constructor-arg value="bring_online_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.BringOnlineFileRequest"/>

      <property name="threadPoolSize" value="${srm.request.bring-online.threads}"/>
      <property name="maxRequests" value="${srm.request.bring-online.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.bring-online.max-inprogress}"/>
      <property name="maxNumberOfRetries" value="${srm.request.bring-online.retries}"/>
      <property name="retryTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.bring-online.retry-timeout},
                     '${srm.request.bring-online.retry-timeout.unit}')}" />
      <property name="maxRunningByOwner" value="${srm.request.bring-online.max-by-same-user}"/>
      <property name="priorityPolicyPlugin" value="DefaultJobAppraiser"/>
  </bean>


  <bean id="scheduler-put" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for PUT operations</description>

      <constructor-arg value="put_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.PutFileRequest"/>

      <property name="threadPoolSize" value="${srm.request.put.threads}"/>
      <property name="maxRequests" value="${srm.request.put.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.put.max-inprogress}"/>
      <property name="maxReadyJobs" value="${srm.request.put.max-transfers}"/>
      <property name="maxNumberOfRetries" value="${srm.request.put.retries}"/>
      <property name="retryTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.put.retry-timeout},
                     '${srm.request.put.retry-timeout.unit}')}" />
      <property name="maxRunningByOwner" value="${srm.request.put.max-by-same-user}"/>
      <property name="priorityPolicyPlugin" value="DefaultJobAppraiser"/>
  </bean>

  <bean id="scheduler-copy" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for COPY operations</description>

      <constructor-arg value="copy_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.Job"/>

      <property name="threadPoolSize" value="${srm.request.copy.threads}"/>
      <property name="maxRequests" value="${srm.request.copy.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.copy.max-inprogress}"/>
      <property name="maxNumberOfRetries" value="${srm.request.copy.retries}"/>
      <property name="retryTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.copy.retry-timeout},
                     '${srm.request.copy.retry-timeout.unit}')}" />
      <property name="maxRunningByOwner" value="${srm.request.copy.max-by-same-user}"/>
      <property name="priorityPolicyPlugin" value="DefaultJobAppraiser"/>
  </bean>

  <bean id="scheduler-reserve-space" class="diskCacheV111.srm.dcache.Scheduler"
	init-method="start" destroy-method="stop">
      <description>Scheduler for RESERVE-SPACE operations</description>

      <constructor-arg value="reserve_space_${srm.cell.name}"/>
      <constructor-arg value="org.dcache.srm.request.ReserveSpaceRequest"/>

      <property name="threadPoolSize" value="${srm.request.reserve-space.threads}"/>
      <property name="maxRequests" value="${srm.request.reserve-space.max-requests}"/>
      <property name="maxInprogress" value="${srm.request.reserve-space.max-inprogress}"/>
      <property name="maxNumberOfRetries" value="${srm.request.reserve-space.retries}"/>
      <property name="retryTimeout" value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.request.reserve-space.retry-timeout},
                     '${srm.request.reserve-space.retry-timeout.unit}')}" />
      <property name="maxRunningByOwner" value="${srm.request.reserve-space.max-by-same-user}"/>
      <property name="priorityPolicyPlugin" value="DefaultJobAppraiser"/>
  </bean>


  <bean id="schedulers" class="org.dcache.srm.scheduler.SchedulerContainer">
      <description>Collection of schedulers</description>

      <property name="schedulers">
	  <list>
	      <ref bean="scheduler-get"/>
	      <ref bean="scheduler-ls"/>
	      <ref bean="scheduler-put"/>
	      <ref bean="scheduler-bringonline"/>
	      <ref bean="scheduler-reserve-space"/>
	      <!-- COPY scheduler must be last in list as it has type Job.class -->
	      <ref bean="scheduler-copy"/>
	  </list>
      </property>
  </bean>

  <bean id="srm" class="org.dcache.srm.SRM" init-method="start" destroy-method="stop">
    <description>SRM engine</description>
    <constructor-arg ref="config"/>
    <constructor-arg ref="storage"/>
    <property name="schedulers" ref="schedulers"/>
    <property name="requestCredentialStorage" ref="srm-credential-store"/>
  </bean>

  <bean id="srm-cli" class="diskCacheV111.srm.dcache.SrmCommandLineInterface">
    <property name="configuration" ref="config"/>
    <property name="srm" ref="srm"/>
  </bean>

  <bean id="thread-pool" class="org.eclipse.jetty.util.thread.QueuedThreadPool"
        init-method="start" destroy-method="stop">
    <description>Thread pool used by Jetty for request processing</description>
    <property name="maxIdleTimeMs"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.limits.jetty.threads.idle-time.max},
                     '${srm.limits.jetty.threads.idle-time.max.unit}')}" />
    <property name="maxThreads" value="${srm.limits.jetty.threads.max}"/>
    <property name="minThreads" value="${srm.limits.jetty.threads.min}"/>
    <property name="name" value="jetty-srm"/>
    <property name="maxQueued" value="${srm.limits.jetty.threads.queued.max}"/>
  </bean>

  <bean id="banned-ciphers" class="org.dcache.util.Crypto"
        factory-method="getBannedCipherSuitesFromConfigurationValue">
    <description>Banned authentication ciphers</description>
    <constructor-arg value="${srm.authn.ciphers}"/>
  </bean>

  <bean id="srm-credential-store"
        class="org.dcache.srm.request.sql.DatabaseRequestCredentialStorage">
      <description>SRM credential store</description>

      <constructor-arg ref="config"/>
  </bean>

  <bean id="gridsite-credential-delegation-store"
	class="org.dcache.gridsite.InMemoryCredentialDelegationStore"
	init-method="start">
      <description>Store for on-going GridSite delegations</description>

      <property name="expireAfter"
		value="#{T(java.util.concurrent.TimeUnit).MINUTES.toMillis(10)}"/>
      <property name="maxOngoing"
		value="10000"/>
  </bean>

  <bean id="gridsite-credential-store"
        class="org.dcache.gridsite.SrmCredentialStore">
      <description>Bridge between GridSite- and SRM- credential storage</description>

      <property name="requestCredentialStorage"
              ref="srm-credential-store"/>
      <property name="caCertificatePath" value="${srm.authn.capath}"/>
      <property name="vomsdir" value="${srm.authn.vomsdir}"/>
  </bean>

  <bean id="gridsite-credential-delegation-factory"
	class="org.dcache.gridsite.BouncyCastleCredentialDelegationFactory">
      <description>Generation of GridSite delegated credentials that uses BouncyCastle</description>

      <property name="keyPairCache" ref="keypair-cache"/>
  </bean>

  <bean id="keypair-cache"
	class="org.dcache.gridsite.KeyPairCache">
      <description>Cache of key-pairs to reduce delegation overhead</description>

      <constructor-arg value="3600"/> <!-- key-pair regeneration, in seconds -->
  </bean>

  <util:map id="gridsite-service-metadata">
      <description>Static key-value pairs provided through GridSite interface</description>

      <entry key="implementation" value="dCache"/>
  </util:map>

  <bean id="server" class="org.eclipse.jetty.server.Server"
        init-method="start" destroy-method="stop">
    <description>Jetty server hosting the SRM web application</description>

    <property name="gracefulShutdown" value="${srm.limits.jetty.graceful-shutdown}"/>
    <property name="threadPool" ref="thread-pool"/>

    <property name="connectors">
      <list>
        <ref bean="gsi-connector"/>
        <ref bean="ssl-connector"/>
      </list>
    </property>

    <property name="handler">
      <bean class="org.eclipse.jetty.server.handler.HandlerList">
        <property name="handlers">
          <list>
            <bean class="org.eclipse.jetty.webapp.WebAppContext">
              <property name="contextPath" value="/srm"/>
              <property name="war" value="${dcache.paths.share}/srm-webapp"/>
              <property name="configurationClasses">
                <list>
                  <value>org.eclipse.jetty.webapp.WebInfConfiguration</value>
                  <value>org.eclipse.jetty.plus.webapp.EnvConfiguration</value>
                  <value>org.eclipse.jetty.plus.webapp.PlusConfiguration</value>
                  <value>org.eclipse.jetty.webapp.WebXmlConfiguration</value>
                  <value>org.eclipse.jetty.webapp.TagLibConfiguration</value>
                </list>
              </property>
              <property name="attributes">
                <bean class="org.eclipse.jetty.util.AttributesMap">
                  <constructor-arg>
                    <map>
                      <entry key="#{ T(org.dcache.srm.util.Axis).ATTRIBUTE_NAME_CONFIG }"
                             value-ref="config"/>
                      <entry key="#{ T(org.dcache.srm.util.Axis).ATTRIBUTE_NAME_STORAGE }"
                             value-ref="storage"/>
                      <entry key="#{ T(org.dcache.srm.util.Axis).ATTRIBUTE_NAME_SRM }"
                             value-ref="srm"/>
                      <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_CREDENTIAL_STORE }"
			     value-ref="gridsite-credential-store"/>
                      <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_CREDENTIAL_DELEGATION_STORE }"
			     value-ref="gridsite-credential-delegation-store"/>
                      <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_CREDENTIAL_DELEGATION_FACTORY }"
			     value-ref="gridsite-credential-delegation-factory"/>
                      <entry key="#{ T(org.dcache.gridsite.ServletDelegation).ATTRIBUTE_NAME_SERVICE_METADATA }"
			     value-ref="gridsite-service-metadata"/>
                    </map>
                  </constructor-arg>
                </bean>
              </property>
            </bean>

            <bean class="org.eclipse.jetty.server.handler.DefaultHandler"/>
          </list>
        </property>
      </bean>
    </property>
  </bean>

  <bean id="gsi-connector"
        class="org.dcache.util.JettyGSIConnector">
    <description>synchronous GSI connector</description>
    <property name="port" value="${srm.net.port}"/>
    <property name="host" value="#{ '${srm.net.listen}'.equals('any') ? null : '${srm.net.listen}' }"/>
    <property name="acceptors" value="${srm.limits.jetty-connector.acceptors}"/>
    <property name="maxIdleTime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.limits.jetty-connector.idle-time.max},
                     '${srm.limits.jetty-connector.idle-time.max.unit}')}" />
    <property name="lowResourceMaxIdleTime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.limits.jetty-connector.low-resource.max.idle-time},
                     '${srm.limits.jetty-connector.low-resource.max.idle-time.unit}')}" />
    <property name="acceptQueueSize" value="${srm.limits.jetty-connector.backlog}"/>
    <property name="hostCertificatePath" value="${srm.authn.hostcert.cert}"/>
    <property name="hostKeyPath" value="${srm.authn.hostcert.key}"/>
    <property name="caCertificatePath" value="${srm.authn.capath}"/>
    <property name="autoFlush" value="true"/>
    <property name="encrypt" value="true"/>
    <property name="requireClientAuth" value="true"/>
    <property name="acceptNoClientCerts" value="false"/>
    <property name="gssMode" value="gsi"/>
    <property name="handshakeTimeout"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.limits.jetty-connector.handshake.timeout},
                     '${srm.limits.jetty-connector.handshake.timeout.unit}')}" />
    <property name="hostCertRefreshInterval" value="${srm.authn.hostcert.refresh}" />
    <property name="hostCertRefreshIntervalUnit" value="${srm.authn.hostcert.refresh.unit}" />
    <property name="trustAnchorRefreshInterval" value="${srm.authn.capath.refresh}" />
    <property name="trustAnchorRefreshIntervalUnit" value="${srm.authn.capath.refresh.unit}" />
    <property name="excludeCipherSuites" ref="banned-ciphers"/>
  </bean>

  <bean id="ssl-connector"
        class="org.dcache.util.JettyGSIConnector">
    <description>synchronous SSL connector</description>
    <property name="port" value="${srm.net.ssl-port}"/>
    <property name="host" value="#{ '${srm.net.listen}'.equals('any') ? null : '${srm.net.listen}' }"/>
    <property name="acceptors" value="${srm.limits.jetty-connector.acceptors}"/>
    <property name="maxIdleTime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.limits.jetty-connector.idle-time.max},
                     '${srm.limits.jetty-connector.idle-time.max.unit}')}" />
    <property name="lowResourceMaxIdleTime"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.limits.jetty-connector.low-resource.max.idle-time},
                     '${srm.limits.jetty-connector.low-resource.max.idle-time.unit}')}" />
    <property name="acceptQueueSize" value="${srm.limits.jetty-connector.backlog}"/>
    <property name="hostCertificatePath" value="${srm.authn.hostcert.cert}"/>
    <property name="hostKeyPath" value="${srm.authn.hostcert.key}"/>
    <property name="caCertificatePath" value="${srm.authn.capath}"/>
    <property name="autoFlush" value="true"/>
    <property name="encrypt" value="true"/>
    <property name="requireClientAuth" value="true"/>
    <property name="acceptNoClientCerts" value="false"/>
    <property name="gssMode" value="ssl"/>
    <property name="handshakeTimeout"
              value="#{T(java.util.concurrent.TimeUnit).MILLISECONDS.convert(
                     ${srm.limits.jetty-connector.handshake.timeout},
                     '${srm.limits.jetty-connector.handshake.timeout.unit}')}" />
    <property name="hostCertRefreshInterval" value="${srm.authn.hostcert.refresh}" />
    <property name="hostCertRefreshIntervalUnit" value="${srm.authn.hostcert.refresh.unit}" />
    <property name="trustAnchorRefreshInterval" value="${srm.authn.capath.refresh}" />
    <property name="trustAnchorRefreshIntervalUnit" value="${srm.authn.capath.refresh.unit}" />
    <property name="excludeCipherSuites" ref="banned-ciphers"/>
  </bean>
</beans>
