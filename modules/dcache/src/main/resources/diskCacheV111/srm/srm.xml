<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

  <bean id="properties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <description>Imported configuration data</description>
    <property name="location" value="arguments:"/>
  </bean>

  <bean id="required" class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>

  <bean id="pool-manager-stub" class="org.dcache.cells.CellStub">
    <description>Pool manager communication stub</description>
    <property name="destination" value="${srmPoolManager}"/>
    <property name="timeout" value="#{ ${srmPoolManagerTimeout} * 1000}"/>
  </bean>

  <bean id="pool-stub" class="org.dcache.cells.CellStub">
    <description>Pool communication stub</description>
    <property name="timeout" value="#{ ${srmPoolManagerTimeout} * 1000}"/>
  </bean>

  <bean id="space-manager-stub" class="org.dcache.cells.CellStub">
    <description>Space manager communication stub</description>
    <property name="destination" value="SrmSpaceManager"/>
    <property name="timeout" value="#{ 3 * 60 * 1000 }"/>
  </bean>

  <bean id="transfer-manager-stub" class="org.dcache.cells.CellStub">
    <description>Transfer manager communication stub</description>
    <property name="destination" value="RemoteTransferManager"/>
    <property name="timeout" value="#{ 24 * 60 * 60 * 1000}"/>
  </bean>

  <bean id="copy-manager-stub" class="org.dcache.cells.CellStub">
    <description>Copy manager communication stub</description>
    <property name="destination" value="CopyManager"/>
    <property name="timeout" value="#{ 24 * 60 * 60 * 1000}"/>
  </bean>

  <bean id="pin-manager-stub" class="org.dcache.cells.CellStub">
    <description>Pin manager communication stub</description>
    <property name="destination" value="PinManager"/>
    <property name="timeout" value="#{ 60 * 60 * 1000}"/>
  </bean>

  <bean id="login-broker-stub" class="org.dcache.cells.CellStub">
    <description>Login broker communication stub</description>
    <property name="destination" value="LoginBroker"/>
    <property name="timeout" value="#{ ${srmPnfsTimeout} * 1000 }"/>
  </bean>

  <bean id="pnfs-stub" class="org.dcache.cells.CellStub">
    <description>PNFS manager communication stub</description>
    <property name="destination" value="${srmPnfsManager}"/>
    <property name="timeout" value="#{ ${srmPnfsTimeout} * 1000 }"/>
    <property name="retryOnNoRouteToCell" value="true"/>
  </bean>

  <bean id="pnfs" class="diskCacheV111.util.PnfsHandler">
    <description>PNFS manager client module</description>
    <constructor-arg ref="pnfs-stub"/>
  </bean>

  <bean id="list-handler" class="org.dcache.util.list.ListDirectoryHandler">
    <description>Client stub for directory listing</description>
    <constructor-arg ref="pnfs"/>
  </bean>

  <bean id="lb" class="org.dcache.util.LoginBrokerHandler"
        init-method="start"
        destroy-method="stop">
    <description>Registers the door with a LoginBroker</description>
    <property name="executor">
      <bean class="java.util.concurrent.Executors"
            factory-method="newSingleThreadScheduledExecutor"
            destroy-method="shutdown">
        <description>Thread pool for scheduled activities</description>
      </bean>
    </property>
    <property name="updateTime" value="${loginBrokerUpdateTime}"/>
    <property name="updateThreshold" value="${loginBrokerUpdateThreshold}"/>
    <property name="protocolEngine" value="diskCacheV111.srm.dcache.Storage"/>
    <property name="protocolVersion" value="${protocolVersion}"/>
    <property name="protocolFamily" value="${protocolFamily}"/>
    <property name="port" value="${srmPort}"/>
    <property name="loginBroker">
      <bean class="dmg.cells.nucleus.CellPath">
        <constructor-arg value="${srmLoginBroker}"/>
      </bean>
    </property>
  </bean>

  <bean id="auth-persistence-manager"
        class="org.dcache.auth.persistence.AuthRecordPersistenceManager">
    <description>Persistence manager for authentication</description>
    <constructor-arg value="${jdbcUrl}"/>
    <constructor-arg value="${jdbcDriver}"/>
    <constructor-arg value="${srmDbUser}"/>
    <constructor-arg value="${srmDbPassword}"/>
  </bean>

  <bean id="srm" class="diskCacheV111.srm.dcache.Storage"
        init-method="start" destroy-method="stop">
    <description>dCache plugin for SRM</description>
    <property name="directoryListSource" ref="list-handler"/>
    <property name="loginBrokerHandler" ref="lb"/>
    <property name="loginBrokerStub" ref="login-broker-stub"/>
    <property name="pnfsStub" ref="pnfs-stub"/>
    <property name="pnfsHandler" ref="pnfs"/>
    <property name="poolStub" ref="pool-stub"/>
    <property name="poolManagerStub" ref="pool-manager-stub"/>
    <property name="spaceManagerStub" ref="space-manager-stub"/>
    <property name="transferManagerStub" ref="transfer-manager-stub"/>
    <property name="copyManagerStub" ref="copy-manager-stub"/>
    <property name="pinManagerStub" ref="pin-manager-stub"/>
    <property name="loginBrokerUpdatePeriod"
              value="${srmLoginBrokerUpdatePeriod}"/>
    <property name="numberOfDoorsInRandomSelection"
              value="${srmNumberOfDoorsInRandomSelection}"/>
    <property name="useCustomGetHostByAddress"
              value="${srmCustomGetHostByAddr}"/>
    <property name="ignoreClientProtocolOrder"
              value="${srmIgnoreClientProtocolOrder}"/>
    <property name="httpRootPath" value="${httpRootPath}"/>
    <property name="xrootdRootPath"  value="${xrootdRootPath}"/>
    <property name="configuration" ref="config"/>
    <property name="pinOnlineFiles" value="${srmPinOnlineFiles}"/>
  </bean>

  <bean id="config" class="org.dcache.srm.util.Configuration">
    <description>SRM configuration</description>
    <property name="port" value="${srmPort}"/>
    <property name="timeout" value="${srmTimeout}"/>
    <property name="srmHost" value="${srmHost}"/>
    <property name="srmHostsAsArray" value="${localSrmHosts}"/>
    <property name="sizeOfSingleRemoveBatch"
              value="${srmSizeOfSingleRemoveBatch}"/>
    <property name="maxNumberOfLsEntries"
              value="${srmLsMaxNumberOfEntries}"/>
    <property name="maxNumberOfLsLevels"
              value="${srmLsMaxNumberOfLevels}"/>
    <property name="authzCacheLifetime" value="${srmAuthzCacheLifetime}"/>
    <property name="srm_root" value="${pnfsSrmPath}"/>
    <property name="buffer_size" value="${srmBufferSize}"/>
    <property name="tcp_buffer_size" value="${srmTcpBufferSize}"/>
    <property name="parallel_streams" value="${parallelStreams}"/>
    <property name="debug" value="${srmDebug}"/>
    <property name="gsiftpclinet" value="globus-url-copy"/>
    <property name="getLifetime" value="${srmGetLifeTime}"/>
    <property name="bringOnlineLifetime" value="${srmBringOnlineLifeTime}"/>
    <property name="lsLifetime" value="${srmLsRequestLifetime}"/>
    <property name="putLifetime" value="${srmPutLifeTime}"/>
    <property name="copyLifetime" value="${srmCopyLifeTime}"/>
    <property name="recursiveDirectoryCreation"
              value="${RecursiveDirectoryCreation}"/>
    <property name="advisoryDelete" value="${AdvisoryDelete}"/>
    <property name="reserve_space_implicitely"
              value="${srmImplicitSpaceManagerEnabled}"/>
    <property name="space_reservation_strict"
              value="${srmSpaceReservationStrict}"/>

    <property name="jdbcUrl" value="${jdbcUrl}"/>
    <property name="jdbcClass" value="${jdbcDriver}"/>
    <property name="jdbcUser" value="${srmDbUser}"/>
    <property name="jdbcPass" value="${srmDbPassword}"/>
    <property name="jdbcPwdfile" value="${srmPasswordFile}"/>

    <property name="getReqTQueueSize" value="${srmGetReqThreadQueueSize}"/>
    <property name="getThreadPoolSize" value="${srmGetReqThreadPoolSize}"/>
    <property name="getMaxWaitingRequests" value="${srmGetReqMaxWaitingRequests}"/>
    <property name="getReadyQueueSize" value="${srmGetReqReadyQueueSize}"/>
    <property name="getMaxReadyJobs" value="${srmGetReqMaxReadyRequests}"/>
    <property name="getMaxNumOfRetries"
              value="${srmGetReqMaxNumberOfRetries}"/>
    <property name="getRetryTimeout" value="${srmGetReqRetryTimeout}"/>
    <property name="getMaxRunningBySameOwner"
              value="${srmGetReqMaxNumOfRunningBySameOwner}"/>
    <property name="getSwitchToAsynchronousModeDelay"
              value="#{T(diskCacheV111.srm.dcache.Storage).parseTime('${srmGetReqSwitchToAsynchronousModeDelay}')}"/>

    <property name="bringOnlineReqTQueueSize"
              value="${srmBringOnlineReqThreadQueueSize}"/>
    <property name="bringOnlineThreadPoolSize"
              value="${srmBringOnlineReqThreadPoolSize}"/>
    <property name="bringOnlineMaxWaitingRequests"
              value="${srmBringOnlineReqMaxWaitingRequests}"/>
    <property name="bringOnlineReadyQueueSize"
              value="${srmBringOnlineReqReadyQueueSize}"/>
    <property name="bringOnlineMaxReadyJobs"
              value="${srmBringOnlineReqMaxReadyRequests}"/>
    <property name="bringOnlineMaxNumOfRetries"
              value="${srmBringOnlineReqMaxNumberOfRetries}"/>
    <property name="bringOnlineRetryTimeout"
              value="${srmBringOnlineReqRetryTimeout}"/>
    <property name="bringOnlineMaxRunningBySameOwner"
              value="${srmBringOnlineReqMaxNumOfRunningBySameOwner}"/>
    <property name="bringOnlineSwitchToAsynchronousModeDelay"
              value="#{T(diskCacheV111.srm.dcache.Storage).parseTime('${srmBringOnlineReqSwitchToAsynchronousModeDelay}')}"/>

    <property name="lsReqTQueueSize" value="${srmLsRequestThreadQueueSize}"/>
    <property name="lsThreadPoolSize" value="${srmLsRequestThreadPoolSize}"/>
    <property name="lsMaxWaitingRequests" value="${srmLsRequestMaxWaitingRequests}"/>
    <property name="lsMaxNumOfRetries"
              value="${srmLsRequestMaxNumberOfRetries}"/>
    <property name="lsRetryTimeout"
              value="${srmLsRequestRetryTimeout}"/>
    <property name="lsMaxRunningBySameOwner"
              value="${srmLsRequestMaxNumberOfRunningBySameOwner}"/>
    <property name="lsSwitchToAsynchronousModeDelay"
              value="#{T(diskCacheV111.srm.dcache.Storage).parseTime('${srmLsRequestSwitchToAsynchronousModeDelay}')}"/>

    <property name="putReqTQueueSize" value="${srmPutReqThreadQueueSize}"/>
    <property name="putThreadPoolSize" value="${srmPutReqThreadPoolSize}"/>
    <property name="putMaxWaitingRequests" value="${srmPutReqMaxWaitingRequests}"/>
    <property name="putReadyQueueSize" value="${srmPutReqReadyQueueSize}"/>
    <property name="putMaxReadyJobs" value="${srmPutReqMaxReadyRequests}"/>
    <property name="putMaxNumOfRetries" value="${srmPutReqMaxNumberOfRetries}"/>
    <property name="putRetryTimeout" value="${srmPutReqRetryTimeout}"/>
    <property name="putMaxRunningBySameOwner" value="${srmPutReqMaxNumOfRunningBySameOwner}"/>
    <property name="putSwitchToAsynchronousModeDelay"
              value="#{T(diskCacheV111.srm.dcache.Storage).parseTime('${srmPutReqSwitchToAsynchronousModeDelay}')}"/>

    <property name="copyReqTQueueSize" value="${srmCopyReqThreadQueueSize}"/>
    <property name="copyThreadPoolSize" value="${srmCopyReqThreadPoolSize}"/>
    <property name="copyMaxWaitingRequests" value="${srmCopyReqMaxWaitingRequests}"/>
    <property name="copyMaxNumOfRetries" value="${srmCopyReqMaxNumberOfRetries}"/>
    <property name="copyRetryTimeout" value="${srmCopyReqRetryTimeout}"/>
    <property name="copyMaxRunningBySameOwner"
              value="${srmCopyReqMaxNumOfRunningBySameOwner}"/>

    <property name="maxQueuedJdbcTasksNum"
              value="${srmMaxNumberOfJdbcTasksInQueue}"/>
    <property name="jdbcExecutionThreadNum"
              value="${srmJdbcExecutionThreadNum}"/>
    <property name="credentialsDirectory"
              value="${srmUserCredentialsDirectory}"/>
    <property name="overwrite" value="${overwriteEnabled}"/>
    <property name="overwrite_by_default" value="${srmOverwriteByDefault}"/>
    <property name="clientDNSLookup" value="${srmClientDNSLookup}"/>
    <property name="gsissl" value="true"/>
    <property name="clientTransportByName" value="${srmClientTransport}"/>
    <property name="qosPluginClass" value="${qosPluginClass}"/>
    <property name="qosConfigFile" value="${qosConfigFile}"/>

    <property name="storage" ref="srm"/>
    <property name="srmUserPersistenceManager" ref="auth-persistence-manager"/>

    <property name="databaseParametersForList.databaseEnabled"
              value="${srmLsDatabaseEnabled}"/>
    <property name="databaseParametersForList.expiredRequestRemovalPeriod"
              value="${srmLsExpiredRequestRemovalPeriod}"/>
    <property name="databaseParametersForList.keepRequestHistoryPeriod"
              value="${srmLsKeepRequestHistoryPeriod}"/>
    <property name="databaseParametersForList.requestHistoryDatabaseEnabled"
              value="${srmLsRequestHistoryDatabaseEnabled}"/>
    <property name="databaseParametersForList.cleanPendingRequestsOnRestart"
              value="${srmLsCleanPendingRequestsOnRestart}"/>
    <property name="databaseParametersForList.storeCompletedRequestsOnly"
              value="${srmLsStoreCompletedRequestsOnly}"/>

    <property name="databaseParametersForGet.databaseEnabled"
              value="${srmGetDatabaseEnabled}"/>
    <property name="databaseParametersForGet.expiredRequestRemovalPeriod"
              value="${srmGetExpiredRequestRemovalPeriod}"/>
    <property name="databaseParametersForGet.keepRequestHistoryPeriod"
              value="${srmGetKeepRequestHistoryPeriod}"/>
    <property name="databaseParametersForGet.requestHistoryDatabaseEnabled"
              value="${srmGetRequestHistoryDatabaseEnabled}"/>
    <property name="databaseParametersForGet.cleanPendingRequestsOnRestart"
              value="${srmGetCleanPendingRequestsOnRestart}"/>
    <property name="databaseParametersForGet.storeCompletedRequestsOnly"
              value="${srmGetStoreCompletedRequestsOnly}"/>

    <property name="databaseParametersForPut.databaseEnabled"
              value="${srmPutDatabaseEnabled}"/>
    <property name="databaseParametersForPut.expiredRequestRemovalPeriod"
              value="${srmPutExpiredRequestRemovalPeriod}"/>
    <property name="databaseParametersForPut.keepRequestHistoryPeriod"
              value="${srmPutKeepRequestHistoryPeriod}"/>
    <property name="databaseParametersForPut.requestHistoryDatabaseEnabled"
              value="${srmPutRequestHistoryDatabaseEnabled}"/>
    <property name="databaseParametersForPut.cleanPendingRequestsOnRestart"
              value="${srmPutCleanPendingRequestsOnRestart}"/>
    <property name="databaseParametersForPut.storeCompletedRequestsOnly"
              value="${srmPutStoreCompletedRequestsOnly}"/>

    <property name="databaseParametersForCopy.databaseEnabled"
              value="${srmCopyDatabaseEnabled}"/>
    <property name="databaseParametersForCopy.expiredRequestRemovalPeriod"
              value="${srmCopyExpiredRequestRemovalPeriod}"/>
    <property name="databaseParametersForCopy.keepRequestHistoryPeriod"
              value="${srmCopyKeepRequestHistoryPeriod}"/>
    <property name="databaseParametersForCopy.requestHistoryDatabaseEnabled"
              value="${srmCopyRequestHistoryDatabaseEnabled}"/>
    <property name="databaseParametersForCopy.cleanPendingRequestsOnRestart"
              value="${srmCopyCleanPendingRequestsOnRestart}"/>
    <property name="databaseParametersForCopy.storeCompletedRequestsOnly"
              value="${srmCopyStoreCompletedRequestsOnly}"/>

    <property name="databaseParametersForBringOnline.databaseEnabled"
              value="${srmBringOnlineDatabaseEnabled}"/>
    <property name="databaseParametersForBringOnline.expiredRequestRemovalPeriod"
              value="${srmBringOnlineExpiredRequestRemovalPeriod}"/>
    <property name="databaseParametersForBringOnline.keepRequestHistoryPeriod"
              value="${srmBringOnlineKeepRequestHistoryPeriod}"/>
    <property name="databaseParametersForBringOnline.requestHistoryDatabaseEnabled"
              value="${srmBringOnlineRequestHistoryDatabaseEnabled}"/>
    <property name="databaseParametersForBringOnline.cleanPendingRequestsOnRestart"
              value="${srmBringOnlineCleanPendingRequestsOnRestart}"/>
    <property name="databaseParametersForBringOnline.storeCompletedRequestsOnly"
              value="${srmBringOnlineStoreCompletedRequestsOnly}"/>

    <property name="databaseParametersForReserve.databaseEnabled"
              value="${srmReserveDatabaseEnabled}"/>
    <property name="databaseParametersForReserve.expiredRequestRemovalPeriod"
              value="${srmReserveExpiredRequestRemovalPeriod}"/>
    <property name="databaseParametersForReserve.keepRequestHistoryPeriod"
              value="${srmReserveKeepRequestHistoryPeriod}"/>
    <property name="databaseParametersForReserve.requestHistoryDatabaseEnabled"
              value="${srmReserveRequestHistoryDatabaseEnabled}"/>
    <property name="databaseParametersForReserve.cleanPendingRequestsOnRestart"
              value="${srmReserveCleanPendingRequestsOnRestart}"/>
    <property name="databaseParametersForReserve.storeCompletedRequestsOnly"
              value="${srmReserveStoreCompletedRequestsOnly}"/>

    <property name="x509ServiceKey"
              value="${service-key}"/>
    <property name="x509ServiceCert"
              value="${service-cert}"/>
    <property name="x509TrastedCACerts"
              value="${service-trusted-certs}"/>
  </bean>

  <bean id="thread-pool" class="org.eclipse.jetty.util.thread.QueuedThreadPool"
        init-method="start" destroy-method="stop">
    <description>Thread pool used by Jetty for request processing</description>
    <property name="maxIdleTimeMs" value="${srmJettyThreadsMaxIdleTime}"/>
    <property name="maxThreads" value="${srmJettyThreadsMax}"/>
    <property name="minThreads" value="${srmJettyThreadsMin}"/>
    <property name="name" value="jetty-srm"/>
    <property name="maxQueued" value="${srmJettyThreadsMaxQueued}"/>
  </bean>

  <bean id="config-file" class="org.eclipse.jetty.plus.jndi.EnvEntry">
    <description>SRM config file</description>
    <constructor-arg><null/></constructor-arg>
    <constructor-arg value="srmConfigFile"/>
    <constructor-arg value="${dcache.paths.share}/srm-webapp/WEB-INF/srmConfigFile.xml"/>
    <constructor-arg value="true"/>
  </bean>

  <bean id="banned-ciphers" class="org.dcache.util.Crypto"
        factory-method="getBannedCipherSuitesFromConfigurationValue">
      <constructor-arg value="${srm.security.ciphers}"/>
  </bean>

  <bean id="server" class="org.eclipse.jetty.server.Server"
        init-method="start" destroy-method="stop">
    <description>Jetty server hosting the SRM web application</description>

    <property name="gracefulShutdown" value="${srmGracefulShutdown}"/>
    <property name="threadPool" ref="thread-pool"/>

    <property name="connectors">
    <list>
      <ref bean="gsi-connector" />
      <ref bean="ssl-connector" />
    </list>
    </property>

    <property name="handler">
      <bean class="org.eclipse.jetty.server.handler.HandlerList">
        <property name="handlers">
          <list>
            <bean class="org.eclipse.jetty.webapp.WebAppContext" depends-on="srm">
              <property name="contextPath" value="/srm"/>
              <property name="war" value="${dcache.paths.share}/srm-webapp"/>
              <property name="configurationClasses">
                <list>
                  <value>org.eclipse.jetty.webapp.WebInfConfiguration</value>
                  <value>org.eclipse.jetty.plus.webapp.EnvConfiguration</value>
                  <value>org.eclipse.jetty.plus.webapp.PlusConfiguration</value>
                  <value>org.eclipse.jetty.webapp.WebXmlConfiguration</value>
                  <value>org.eclipse.jetty.webapp.TagLibConfiguration</value>
                </list>
              </property>
            </bean>

            <bean class="org.eclipse.jetty.server.handler.DefaultHandler"/>
          </list>
        </property>
      </bean>
    </property>
  </bean>


  <beans profile="connector-async">
    <bean id="gsi-connector"
	  class="org.dcache.util.JettyAsyncGSIConnector">
      <description>asynchronous GSI connector</description>
      <property name="port" value="${srmPort}"/>
      <property name="host" value="#{ T(com.google.common.base.Strings).emptyToNull( '${listen}' ) }"/>

      <property name="acceptors" value="${srmJettyConnectorAcceptors}"/>
      <property name="maxIdleTime" value="${srmJettyConnectorMaxIdleTime}"/>
      <property name="lowResourceMaxIdleTime"
		value="${srmJettyConnectorLowResourceMaxIdleTime}"/>
      <property name="acceptQueueSize" value="${srmJettyConnectorBackLog}"/>

      <property name="hostCertificatePath" value="${service-cert}"/>
      <property name="hostKeyPath" value="${service-key}"/>
      <property name="caCertificatePath" value="${service-trusted-certs}"/>
      <property name="autoFlush" value="true"/>
      <property name="encrypt" value="true"/>
      <property name="requireClientAuth" value="true"/>
      <property name="acceptNoClientCerts" value="false"/>
      <property name="gssMode" value="gsi"/>
      <property name="millisecBetweenHostCertRefresh" value="#{ ${hostCertificateRefreshPeriod} * 1000 }" />
      <property name="millisecBetweenTrustAnchorRefresh" value="#{ ${trustAnchorRefreshPeriod} * 1000 }" />
    </bean>

    <bean id="ssl-connector"
	  class="org.dcache.util.JettyAsyncGSIConnector">
      <description>asynchronous SSL connector</description>
      <property name="port" value="${srmSslPort}"/>
      <property name="host" value="#{ T(com.google.common.base.Strings).emptyToNull( '${listen}' ) }"/>

      <property name="acceptors" value="${srmJettyConnectorAcceptors}"/>
      <property name="maxIdleTime" value="${srmJettyConnectorMaxIdleTime}"/>
      <property name="lowResourceMaxIdleTime"
		value="${srmJettyConnectorLowResourceMaxIdleTime}"/>
      <property name="acceptQueueSize" value="${srmJettyConnectorBackLog}"/>

      <property name="hostCertificatePath" value="${service-cert}"/>
      <property name="hostKeyPath" value="${service-key}"/>
      <property name="caCertificatePath" value="${service-trusted-certs}"/>
      <property name="autoFlush" value="true"/>
      <property name="encrypt" value="true"/>
      <property name="requireClientAuth" value="true"/>
      <property name="acceptNoClientCerts" value="false"/>
      <property name="gssMode" value="ssl"/>
      <property name="millisecBetweenHostCertRefresh" value="#{ ${hostCertificateRefreshPeriod} * 1000 }" />
      <property name="millisecBetweenTrustAnchorRefresh" value="#{ ${trustAnchorRefreshPeriod} * 1000 }" />
    </bean>
  </beans>


  <beans profile="connector-sync">
    <bean id="gsi-connector"
	  class="org.dcache.util.JettyGSIConnector">
      <description>synchronous GSI connector</description>
      <property name="port" value="${srmPort}"/>
      <property name="host" value="#{ T(com.google.common.base.Strings).emptyToNull( '${listen}' ) }"/>

      <property name="acceptors" value="${srmJettyConnectorAcceptors}"/>
      <property name="maxIdleTime" value="${srmJettyConnectorMaxIdleTime}"/>
      <property name="lowResourceMaxIdleTime"
		value="${srmJettyConnectorLowResourceMaxIdleTime}"/>
      <property name="acceptQueueSize" value="${srmJettyConnectorBackLog}"/>

      <property name="hostCertificatePath" value="${service-cert}"/>
      <property name="hostKeyPath" value="${service-key}"/>
      <property name="caCertificatePath" value="${service-trusted-certs}"/>
      <property name="autoFlush" value="true"/>
      <property name="encrypt" value="true"/>
      <property name="requireClientAuth" value="true"/>
      <property name="acceptNoClientCerts" value="false"/>
      <property name="gssMode" value="gsi"/>
      <property name="handshakeTimeout" value="10000" />
      <property name="millisecBetweenHostCertRefresh" value="#{ ${hostCertificateRefreshPeriod} * 1000 }" />
      <property name="millisecBetweenTrustAnchorRefresh" value="#{ ${trustAnchorRefreshPeriod} * 1000 }" />
        <property name="excludeCipherSuites" ref="banned-ciphers"/>
    </bean>

    <bean id="ssl-connector"
	  class="org.dcache.util.JettyGSIConnector">
      <description>synchronous SSL connector</description>
      <property name="port" value="${srmSslPort}"/>
      <property name="host" value="#{ T(com.google.common.base.Strings).emptyToNull( '${listen}' ) }"/>

      <property name="acceptors" value="${srmJettyConnectorAcceptors}"/>
      <property name="maxIdleTime" value="${srmJettyConnectorMaxIdleTime}"/>
      <property name="lowResourceMaxIdleTime"
		value="${srmJettyConnectorLowResourceMaxIdleTime}"/>
      <property name="acceptQueueSize" value="${srmJettyConnectorBackLog}"/>

      <property name="hostCertificatePath" value="${service-cert}"/>
      <property name="hostKeyPath" value="${service-key}"/>
      <property name="caCertificatePath" value="${service-trusted-certs}"/>
      <property name="autoFlush" value="true"/>
      <property name="encrypt" value="true"/>
      <property name="requireClientAuth" value="true"/>
      <property name="acceptNoClientCerts" value="false"/>
      <property name="gssMode" value="ssl"/>
      <property name="handshakeTimeout" value="10000" />
      <property name="millisecBetweenHostCertRefresh" value="#{ ${hostCertificateRefreshPeriod} * 1000 }" />
      <property name="millisecBetweenTrustAnchorRefresh" value="#{ ${trustAnchorRefreshPeriod} * 1000 }" />
        <property name="excludeCipherSuites" ref="banned-ciphers"/>
    </bean>
  </beans>

</beans>
