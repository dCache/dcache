<?xml version="1.0" encoding="UTF-8"?>

<!--+
    |  The billing components that are common between dCache instances that make
    |  use of database storage and those that don't.
    +-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/jee
                        http://www.springframework.org/schema/jee/spring-jee.xsd
                        http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/task
			http://www.springframework.org/schema/task/spring-task.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util.xsd">

  <context:property-placeholder/>
  <context:annotation-config/>

  <bean id="noroutetocell" class="org.dcache.cells.LogNoRouteToCellExceptionReceiver">
    <description>Undeliverable message logger</description>
  </bean>

  <bean id="poolmanager-stub" class="org.dcache.cells.CellStub">
    <description>Pool manager communication stub</description>
    <property name="destination" value="${billing.service.poolmanager}"/>
    <property name="timeout" value="${billing.service.poolmanager.timeout}"/>
    <property name="timeoutUnit" value="${billing.service.poolmanager.timeout.unit}"/>
  </bean>

  <bean id="billingcell"
    class="org.dcache.services.billing.cells.BillingCell">
    <property name="logsDir" value="${billing.text.dir}"/>
    <property name="enableTxt" value="${billing.enable.text}"/>
    <property name="jsonFormat" value="${billing.format.json}"/>
    <property name="flatTextDir" value="${billing.text.flat-dir}"/>
    <property name="poolManagerStub" ref="poolmanager-stub"/>
  </bean>

  <beans profile="db-false">
    <bean id="billing-record-request-receiver" class="org.dcache.services.billing.cells.receivers.BillingRecordRequestReceiver">
        <!-- no connection to database; returns failure on request -->
    </bean>
    <bean id="billing-data-request-receiver" class="org.dcache.services.billing.cells.receivers.BillingDataRequestReceiver">
      <!-- no connection to database; returns failure on request -->
    </bean>
  </beans>

  <!-- Set of beans instantiated if database is enabled -->
  <beans profile="db-true">
    <bean id="data-source" class="org.dcache.db.AlarmEnabledDataSource" destroy-method="close">
      <description>Database connection pool</description>
      <constructor-arg value="${billing.db.url}"/>
      <constructor-arg value="BillingCell"/>
      <constructor-arg>
        <bean class="com.zaxxer.hikari.HikariDataSource">
          <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
              <constructor-arg>
                <bean class="org.dcache.util.configuration.ConfigurationPropertiesFactoryBean">
                  <property name="prefix" value="billing.db.hikari-properties"/>
                  <property name="staticEnvironment">
                    <map>
		      <entry key="jdbcUrl" value="${billing.db.url}"/>
		      <entry key="username" value="${billing.db.user}"/>
		      <entry key="password" value="#{ T(diskCacheV111.util.Pgpass).getPassword('${billing.db.password.file}', '${billing.db.url}', '${billing.db.user}', '${billing.db.password}') }"/>
		      <entry key="autoCommit" value="true"/>
		      <entry key="transactionIsolation" value="TRANSACTION_READ_COMMITTED"/>
		      <entry key="minimumIdle" value="${billing.db.connections.idle}"/>
		      <entry key="maximumPoolSize" value="${billing.db.connections.max}"/>
                    </map>
                  </property>
                </bean>
              </constructor-arg>
            </bean>
          </constructor-arg>
        </bean>
      </constructor-arg>
    </bean>

    <bean id="pmf" class="org.datanucleus.api.jdo.JDOPersistenceManagerFactory"
            depends-on="liquibase" destroy-method="close">
          <description>Database persistence manager</description>
          <constructor-arg>
              <map>
                  <entry key="datanucleus.persistenceunitname" value="Billing"/>
              </map>
          </constructor-arg>
          <property name="connectionFactory" ref="data-source"/>
      </bean>


    <bean id="jdbc-billing-info-access" class="org.dcache.services.billing.db.impl.datanucleus.DataNucleusBillingInfo"
          init-method="initialize" destroy-method="close">
      <property name="maxQueueSize" value="${billing.db.inserts.max-queue-size}"/>
      <property name="maxBatchSize" value="${billing.db.inserts.max-batch-size}"/>
      <property name="dropMessagesAtLimit" value="${billing.db.inserts.drop-messages-at-limit}"/>
      <property name="persistenceManagerFactory" ref="pmf"/>
      <property name="numberOfConsumers" value="${billing.db.consumers}"/>
      <property name="truncationCutoff" value="${billing.db.fine-grained-truncate-before}"/>
      <property name="truncationCutoffUnit" value="${billing.db.fine-grained-truncate-before.unit}"/>
    </bean>

    <bean id="hourly-aggregata-data-handler" class="org.dcache.services.billing.db.impl.HourlyAggregateDataHandler" init-method="initialize">
      <property name="access" ref="jdbc-billing-info-access"/>
    </bean>

    <bean id="billing-record-request-receiver" class="org.dcache.services.billing.cells.receivers.BillingRecordRequestReceiver">
      <property name="access" ref="jdbc-billing-info-access"/>
    </bean>

    <bean id="data-request-executor" class="org.dcache.util.CDCExecutorServiceDecorator">
      <description>Thread pool service for executing operation submissions</description>
      <constructor-arg>
        <bean class="org.dcache.util.BoundedCachedExecutor"
              destroy-method="shutdownNow">
          <constructor-arg value="${billing.limits.data-request-threads}"/>
        </bean>
      </constructor-arg>
    </bean>

    <bean id="billing-data-request-receiver" class="org.dcache.services.billing.cells.receivers.BillingDataRequestReceiver">
      <property name="access" ref="jdbc-billing-info-access"/>
      <property name="executionService" ref="data-request-executor"/>
      <property name="hourlyAggregateDataHandler" ref="hourly-aggregata-data-handler"/>
    </bean>

    <bean id="billing-info-message-receiver" class="org.dcache.services.billing.cells.receivers.BillingInfoMessageReceiver">
      <property name="access" ref="jdbc-billing-info-access"/>
      <property name="hourlyAggregateDataHandler" ref="hourly-aggregata-data-handler"/>
    </bean>

    <bean id="liquibase" class="org.dcache.util.SpringLiquibase">
      <description>Database schema manager</description>
      <property name="dataSource" ref="data-source"/>
      <property name="changeLog" value="classpath:${billing.db.schema.changelog}"/>
      <property name="shouldUpdate" value="${billing.db.schema.auto}"/>
    </bean>

    <task:scheduled-tasks scheduler="aggregation-scheduler">
      <task:scheduled ref="jdbc-billing-info-access" method="aggregateDaily"
                      initial-delay="10000"
                      fixed-delay="#{ T(java.util.concurrent.TimeUnit).DAYS.toMillis(1) }"/>
    </task:scheduled-tasks>

    <task:scheduler id="aggregation-scheduler" pool-size="1"/>

    <beans profile="db-truncate-true">
      <task:scheduler id="truncation-scheduler" pool-size="1"/>

      <task:scheduled-tasks scheduler="truncation-scheduler">
        <task:scheduled ref="jdbc-billing-info-access" method="truncateFineGrained"
                      initial-delay="#{ T(java.util.concurrent.TimeUnit).DAYS.toMillis(1) }"
                      fixed-delay="#{ T(java.util.concurrent.TimeUnit).DAYS.toMillis(1) }"/>
      </task:scheduled-tasks>
    </beans>

  </beans>

</beans>
