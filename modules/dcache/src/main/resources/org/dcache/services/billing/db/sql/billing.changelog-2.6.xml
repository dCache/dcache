<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
				       http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
    <preConditions>
        <dbms type="postgresql"/>
    </preConditions>

    <changeSet id="6.0.0.1" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="billinginfo_client_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY billinginfo_client_idx on billinginfo(client);
        </sql>
    </changeSet>
     <changeSet id="6.0.0.2" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="billinginfo_initiator_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY billinginfo_initiator_idx on billinginfo(initiator);
        </sql>
    </changeSet>
     <changeSet id="6.0.0.3" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="billinginfo_pnfsid_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY billinginfo_pnfsid_idx on billinginfo(pnfsid);
        </sql>
    </changeSet>
     <changeSet id="6.0.0.4" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="billinginfo_storageclass_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY billinginfo_storageclass_date_idx on billinginfo(storageclass);
        </sql>
    </changeSet>
     <changeSet id="6.0.0.5" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="billinginfo_transaction_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY billinginfo_transaction_date_idx on billinginfo(transaction);
        </sql>
    </changeSet>
    <changeSet id="6.0.1.1" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="doorinfo_owner_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY doorinfo_owner_idx on doorinfo(owner);
        </sql>
    </changeSet>
    <changeSet id="6.0.1.2" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="doorinfo_pnfsid_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY doorinfo_pnfsid_idx on doorinfo(pnfsid);
        </sql>
    </changeSet>
    <changeSet id="6.0.1.3" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="doorinfo_transaction_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY doorinfo_transaction_idx on doorinfo(transaction);
        </sql>
    </changeSet>
    <changeSet id="6.0.2.1" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="storageinfo_pnfsid_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY storageinfo_pnfsid_idx on storageinfo(pnfsid);
        </sql>
    </changeSet>
    <changeSet id="6.0.2.2" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="storageinfo_transaction_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY storageinfo_transaction_idx on storageinfo(transaction);
        </sql>
    </changeSet>
    <changeSet id="6.0.2.3" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="storageinfo_storageclass_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY storageinfo_storageclass_idx on storageinfo(storageclass);
        </sql>
    </changeSet>
    <changeSet id="6.0.3.1" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="hitinfo_pnfsid_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY hitinfo_pnfsid_idx on hitinfo(pnfsid);
        </sql>
    </changeSet>
        <changeSet id="6.0.3.2" author="litvinse" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <and>
                <not>
                    <indexExists indexName="hitinfo_transaction_idx"/>
                </not>
            </and>
        </preConditions>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY hitinfo_transaction_idx on hitinfo(transaction);
        </sql>
    </changeSet>
    <changeSet id="6.1.0" author="arossi" context="billing">
        <preConditions onFail="MARK_RAN">
            <not>
                <columnExists columnName="p2p" tableName="billinginfo"/>
            </not>
        </preConditions>
        <comment>add p2p column to billinginfo</comment>
        <addColumn tableName="billinginfo"><column name="p2p" type="boolean"/></addColumn>
    </changeSet>
    <changeSet id="6.1.1-v2" author="arossi" context="billing" runInTransaction="false">
        <preConditions onFail="MARK_RAN">
            <not>
                <indexExists indexName="billinginfo_p2p_idx"/>
            </not>
        </preConditions>
        <comment>read optimization</comment>
        <sql splitStatements="false">
            CREATE INDEX CONCURRENTLY billinginfo_p2p_idx on billinginfo(p2p);
        </sql>
    </changeSet>
    <changeSet id="6.1.2" author="arossi" context="billing">
        <preConditions onError="WARN" onFail="WARN">
            <sqlCheck expectedResult="CREATE LANGUAGE">CREATE LANGUAGE plpgsql</sqlCheck>
        </preConditions>
        <comment>
            modify the billinginfo aggregate read/write trigger functions
            to filter out pool-to-pool transfers
        </comment>
        <sql splitStatements="false">
            DROP TRIGGER tgr_update_billinginfo_rd_daily ON billinginfo;
        </sql>
        <sql splitStatements="false">
            DROP TRIGGER tgr_update_billinginfo_wr_daily ON billinginfo;
        </sql>
        <sql splitStatements="false">
            DROP FUNCTION f_update_billinginfo_rd_daily();
        </sql>
        <sql splitStatements="false">
            DROP FUNCTION f_update_billinginfo_wr_daily();
        </sql>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION f_update_billinginfo_rd_daily()
                RETURNS TRIGGER AS $$
                BEGIN
                IF (NEW.isNew = 'f'
                    AND (NEW.p2p = 'f' OR NEW.p2p is null)
                    AND NEW.errorcode = 0) THEN
                    UPDATE billinginfo_rd_daily
                    SET count=count+1,size=size+NEW.fullsize,
                        transferred=transferred+NEW.transfersize
                    WHERE date(date) = date(NEW.datestamp);
                    IF NOT FOUND THEN
                        INSERT INTO billinginfo_rd_daily
                                    (date,count,size,transferred)
                             VALUES (date(NEW.datestamp),
                                    1,
                                    NEW.fullsize, NEW.transfersize);
                    END IF;
                END IF;
                RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION f_update_billinginfo_wr_daily()
                RETURNS TRIGGER AS $$
                BEGIN
                IF (NEW.isNew = 't'
                    AND (NEW.p2p = 'f' OR NEW.p2p is null)
                    AND NEW.errorcode = 0) THEN
                    UPDATE billinginfo_wr_daily
                    SET count=count+1,
                        size=size+NEW.fullsize,
                        transferred=transferred+NEW.transfersize
                    WHERE date(date) = date(NEW.datestamp);
                    IF NOT FOUND THEN
                        INSERT INTO billinginfo_wr_daily
                                    (date,count,size,transferred)
                             VALUES (date(NEW.datestamp),
                                    1,
                                    NEW.fullsize, NEW.transfersize);
                    END IF;
                END IF;
                RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
    </changeSet>
    <changeSet id="6.1.3" author="arossi" context="billing">
        <comment>trigger to populate daily tables</comment>
        <sql splitStatements="false">
            CREATE TRIGGER tgr_update_billinginfo_rd_daily AFTER
            INSERT ON billinginfo FOR EACH ROW EXECUTE
            PROCEDURE f_update_billinginfo_rd_daily();
        </sql>
    </changeSet>
    <changeSet id="6.1.4" author="arossi" context="billing">
        <comment>trigger to populate daily tables</comment>
        <sql splitStatements="false">
            CREATE TRIGGER tgr_update_billinginfo_wr_daily AFTER
            INSERT ON billinginfo FOR EACH ROW EXECUTE
            PROCEDURE f_update_billinginfo_wr_daily();
        </sql>
    </changeSet>
    <changeSet id="6.2.0" author="arossi" context="billing">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="billinginfo_p2p_daily"/>
            </not>
        </preConditions>
        <comment>
            create new aggregate table for pool-to-pool transfers
        </comment>
        <comment>coarse-grained aggregate table populated by by trigger</comment>
        <createTable tableName="billinginfo_p2p_daily">
            <column name="date" type="timestamp"/>
            <column name="count" type="bigint"/>
            <column name="size" type="bigint"/>
            <column name="transferred" type="bigint"/>
        </createTable>
    </changeSet>
    <changeSet id="6.2.1" author="arossi" context="billing">
        <preConditions onFail="MARK_RAN">
            <not>
                <indexExists indexName="billinginfo_p2p_daily_date_idx"/>
            </not>
        </preConditions>
        <comment>read optimization</comment>
        <createIndex indexName="billinginfo_p2p_daily_date_idx"
            tableName="billinginfo_p2p_daily">
            <column name="date"/>
        </createIndex>
    </changeSet>
    <changeSet id="6.2.2" author="arossi" context="billing">
        <preConditions onError="WARN" onFail="WARN">
            <sqlCheck expectedResult="CREATE LANGUAGE">CREATE LANGUAGE plpgsql</sqlCheck>
        </preConditions>
        <comment>trigger function to populate daily tables</comment>
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION f_update_billinginfo_p2p_daily()
                RETURNS TRIGGER AS $$
                BEGIN
                IF (NEW.p2p = 't'
                    AND NEW.errorcode = 0) THEN
                    UPDATE billinginfo_p2p_daily
                    SET count=count+1,
                        size=size+NEW.fullsize,
                        transferred=transferred+NEW.transfersize
                    WHERE date(date) = date(NEW.datestamp);
                    IF NOT FOUND THEN
                        INSERT INTO billinginfo_p2p_daily
                                    (date,count,size,transferred)
                             VALUES (date(NEW.datestamp),
                                    1,
                                    NEW.fullsize, NEW.transfersize);
                    END IF;
                END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
    </changeSet>
    <changeSet id="6.2.3" author="arossi" context="billing">
        <preConditions onError="CONTINUE" onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                select count(*) from pg_trigger where tgname='tgr_update_billinginfo_p2p_daily'
            </sqlCheck>
        </preConditions>
        <comment>trigger to populate daily tables</comment>
        <sql splitStatements="false">
            CREATE TRIGGER tgr_update_billinginfo_p2p_daily AFTER
            INSERT ON billinginfo FOR EACH ROW EXECUTE
            PROCEDURE f_update_billinginfo_p2p_daily();
        </sql>
    </changeSet>
    <changeSet id="6.3" author="arossi" context="billing">
        <comment>daily views (for scalability) modified to take into account p2p</comment>
        <sql splitStatements="false">
            CREATE OR REPLACE VIEW billinginfo_rd_hourly
            AS
            SELECT date_trunc('hour', datestamp) AS date,
                   count(*) AS count,
                   sum(fullsize) AS size,
                   sum(transfersize) AS transferred
            FROM billinginfo
            WHERE errorcode = 0::numeric
                AND isnew = 'f'
                AND (p2p = 'f' OR p2p is NULL)
                AND datestamp > current_timestamp - interval '24 hours'
            GROUP BY date_trunc('hour', datestamp)
            ORDER BY date_trunc('hour', datestamp);
        </sql>
        <sql splitStatements="false">
            CREATE OR REPLACE VIEW billinginfo_wr_hourly
            AS
            SELECT date_trunc('hour', datestamp) AS date,
                   count(*) AS count,
                   sum(fullsize) AS size,
                   sum(transfersize) AS transferred
            FROM billinginfo
            WHERE errorcode = 0::numeric
                AND isnew = 't'
                AND (p2p = 'f' OR p2p is NULL)
                AND datestamp > current_timestamp - interval '24 hours'
            GROUP BY date_trunc('hour', datestamp)
            ORDER BY date_trunc('hour', datestamp);
        </sql>
        <sql splitStatements="false">
            CREATE OR REPLACE VIEW billinginfo_p2p_hourly
            AS
            SELECT date_trunc('hour', datestamp) AS date,
                   count(*) AS count,
                   sum(fullsize) AS size,
                   sum(transfersize) AS transferred
            FROM billinginfo
            WHERE errorcode = 0::numeric
                AND p2p = 't'
                AND datestamp > current_timestamp - interval '24 hours'
            GROUP BY date_trunc('hour', datestamp)
            ORDER BY date_trunc('hour', datestamp);
        </sql>
    </changeSet>
    <changeSet id="6.4.0" author="arossi" context="billing">
        <preConditions onFail="MARK_RAN">
            <columnExists tableName="billinginfo_tm_daily"
                          columnName="totaltime"
                          schemaName="public"/>
        </preConditions>
        <sql splitStatements="false">
            UPDATE billinginfo_tm_daily SET totaltime = totaltime/count
            WHERE count > 1;
        </sql>
        <renameColumn newColumnName="average"
                      oldColumnName="totaltime"
                      tableName="billinginfo_tm_daily"/>
    </changeSet>
    <changeSet id="6.4.1.1" author="litvinse">
        <preConditions onError="WARN" onFail="WARN">
            <sqlCheck expectedResult="CREATE LANGUAGE">CREATE LANGUAGE plpgsql</sqlCheck>
        </preConditions>
        <comment>change updates in triggers to select and single insert every 24 hours</comment>
        <sql splitStatements="false">CREATE OR REPLACE FUNCTION f_update_billinginfo_wr_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_wr_daily;
            IF max_date IS NULL THEN
                INSERT INTO
                billinginfo_wr_daily (date,count,size,transferred) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0),
                coalesce(sum(transfersize),0)
                from billinginfo where datestamp between curr_date-interval'24 hours' and curr_date
                and isnew='t' and errorcode=0 and (p2p='f' or p2p is null) group by d;
            ELSIF curr_date - max_date > interval'1 days' THEN
                INSERT INTO
                billinginfo_wr_daily (date,count,size,transferred) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0),
                coalesce(sum(transfersize),0)
                from billinginfo where datestamp between max_date+interval'1 day' and curr_date
                and isnew='t' and errorcode=0 and p2p != 't' group by d RETURNING count INTO counter;
	        IF counter is NULL THEN
		     INSERT INTO billinginfo_wr_daily (date,count,size,transferred)
	             VALUES (curr_date,0,0,0);
		END IF;
            END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">CREATE OR REPLACE FUNCTION f_update_billinginfo_rd_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_rd_daily;
            IF max_date IS NULL THEN
                INSERT INTO
                billinginfo_rd_daily (date,count,size,transferred) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0),
                coalesce(sum(transfersize),0)
                from billinginfo where datestamp between curr_date-interval'24 hours' and curr_date
                and isnew='f' and errorcode=0 and (p2p='f' or p2p is null) group by d;
            ELSIF curr_date - max_date > interval'1 days' THEN
                INSERT INTO
                billinginfo_rd_daily (date,count,size,transferred) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0),
                coalesce(sum(transfersize),0)
                from billinginfo where datestamp between max_date+interval'1 day' and curr_date
                and isnew='f' and errorcode=0 and p2p != 't' group by d RETURNING count INTO counter;
	        IF counter is NULL THEN
		     INSERT INTO billinginfo_rd_daily (date,count,size,transferred)
	             VALUES (curr_date,0,0,0);
		END IF;
            END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">CREATE OR REPLACE FUNCTION f_update_billinginfo_p2p_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_p2p_daily;
            IF max_date IS NULL THEN
                INSERT INTO
                billinginfo_p2p_daily (date,count,size,transferred) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0),
                coalesce(sum(transfersize),0)
                from billinginfo where datestamp between curr_date-interval'24 hours' and curr_date
                and errorcode=0 and p2p='t' group by d;
            ELSIF curr_date - max_date > interval'1 days' THEN
                INSERT INTO
                billinginfo_p2p_daily (date,count,size,transferred) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0),
                coalesce(sum(transfersize),0)
                from billinginfo where datestamp between max_date+interval'1 day' and curr_date
                and errorcode=0 and p2p='t' group by d RETURNING count INTO counter;
	        IF counter is NULL THEN
		     INSERT INTO billinginfo_p2p_daily (date,count,size,transferred)
	             VALUES (curr_date,0,0,0);
		END IF;
            END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">CREATE OR REPLACE FUNCTION f_update_billinginfo_tm_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM billinginfo_tm_daily;
            IF max_date IS NULL THEN
                INSERT INTO
                billinginfo_tm_daily (date,count,minimum,maximum,average) select date(datestamp) as d,
                count(*),
                min(connectiontime),max(connectiontime), avg(connectiontime)
                from billinginfo where datestamp between curr_date-interval'24 hours' and curr_date
                and errorcode=0 group by d;
            ELSIF curr_date - max_date > interval'1 days' THEN
                INSERT INTO
                billinginfo_tm_daily (date,count,minimum,maximum,average) select date(datestamp) as d,
                count(*),
                min(connectiontime),max(connectiontime), avg(connectiontime)
                from billinginfo where datestamp between max_date+interval'1 day' and curr_date
                and errorcode=0 group by d RETURNING count INTO counter;
	        IF counter is NULL THEN
		     INSERT INTO billinginfo_tm_daily (date,count,minimum,maximum,average)
	             VALUES (curr_date,0,0,0,0);
		END IF;
            END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE
            plpgsql;
        </sql>
        <sql splitStatements="false">CREATE OR REPLACE FUNCTION f_update_storageinfo_rd_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM storageinfo_rd_daily;
            IF max_date IS NULL THEN
                INSERT INTO storageinfo_rd_daily (date,count,size) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0)
                from storageinfo where datestamp between curr_date-interval'24 hours' and curr_date
                and action='restore' and errorcode=0 group by d;
            ELSIF curr_date - max_date > interval'1 days' THEN
                INSERT INTO storageinfo_rd_daily (date,count,size) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0)
                from storageinfo where datestamp between max_date+interval'1 day' and curr_date
                and action='restore' and errorcode=0 group by d RETURNING count INTO counter;
	        IF counter is NULL THEN
		     INSERT INTO storageinfo_rd_daily (date,count,size)
	             VALUES (curr_date,0,0);
		END IF;
            END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">CREATE OR REPLACE FUNCTION f_update_storageinfo_wr_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM storageinfo_wr_daily;
            IF max_date IS NULL THEN
                INSERT INTO storageinfo_wr_daily (date,count,size) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0)
                from storageinfo where datestamp between curr_date-interval'24 hours' and curr_date
                and action='store' and errorcode=0 group by d;
            ELSIF curr_date - max_date > interval'1 days' THEN
                INSERT INTO storageinfo_wr_daily (date,count,size) select date(datestamp) as d,
                count(*), coalesce(sum(fullsize),0)
                from storageinfo where datestamp between max_date+interval'1 day' and curr_date
                and action='store' and errorcode=0 group by d RETURNING count INTO counter;
	        IF counter is NULL THEN
		     INSERT INTO storageinfo_wr_daily (date,count,size)
                     VALUES (curr_date,0,0);
		END IF;
            END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
        <sql splitStatements="false">CREATE OR REPLACE FUNCTION f_update_hitinfo_daily() RETURNS TRIGGER
            AS $$
            DECLARE
            max_date timestamp;
            curr_date timestamp;
	    counter bigint;
            BEGIN
            curr_date := current_date;
            SELECT max(date) into max_date FROM hitinfo_daily;
            IF max_date IS NULL THEN
                INSERT INTO hitinfo_daily(date, count, notcached, cached) select date(datestamp) as d,
                count(*),
                count(nullif(filecached, 't')) as notcached, count(nullif(filecached,'f')) as cached
                from hitinfo where datestamp
                between curr_date-interval'24 hours' and curr_date
                and errorcode=0 group by d;
            ELSIF curr_date - max_date > interval'1 days' THEN
                INSERT INTO hitinfo_daily(date, count, notcached, cached) select date(datestamp) as d,
                count(*),
                count(nullif(filecached, 't')) as notcached, count(nullif(filecached, 'f')) as cached
                from hitinfo where datestamp
                between max_date+interval'1 day' and curr_date
                and errorcode=0 group by d RETURNING count INTO counter;
	        IF counter is NULL THEN
		     INSERT INTO hitinfo_daily(date, count, notcached, cached)
		     VALUES (curr_date,0,0,0);
		END IF;
            END IF;
            RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;
        </sql>
    </changeSet>
</databaseChangeLog>
