<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task.xsd">


    <context:property-placeholder/>
  <context:annotation-config/>

    <!--
        Convert protperies with multiple values separated by comma into an array of strings:
        key=value1,value2,value3 : String[] {value1, value2, value3}
    -->
    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <entry key="java.lang.String[]"
                    value="org.springframework.beans.propertyeditors.StringArrayPropertyEditor" />
            </map>
        </property>
    </bean>

  <bean id="noroutetocell" class="org.dcache.cells.LogNoRouteToCellExceptionReceiver">
      <description>Undeliverable message logger</description>
      <property name="excludedDestinations" value="${pool.destination.heartbeat},${pool.destination.corrupt-file}"/>
      <property name="excludedMessages" value="diskCacheV111.vehicles.DoorTransferFinishedMessage"/>
  </bean>

  <!-- The lock protects the pool from being accessed by multiple
       instances. If the lock cannot be acquired, pool creation will
       fail with an exception. Although the wrapper script will
       immediately restart the pool, the pool is protected from
       corruption.
  -->
  <bean id="lock" class="org.dcache.util.LockFile"
        init-method="acquire" destroy-method="release">
    <description>Pool lock</description>
    <constructor-arg value="${pool.path}/lock"/>
  </bean>

  <bean id="replica-state-policy"
        class="org.dcache.pool.classic.LFSReplicaStatePolicyFactory"
        factory-method="createInstance">
    <description>Defines the state of new replicas</description>
    <constructor-arg value="${pool.lfs}"/>
  </bean>

  <bean id="pool-mode" class="diskCacheV111.pools.PoolV2Mode">
      <description>Pool mode</description>
  </bean>

  <bean id="pool" class="org.dcache.pool.classic.PoolV4"
        init-method="init">
    <description>Main pool component</description>
    <property name="poolName" value="${pool.name}"/>

    <property name="baseDir"
              value="${pool.path}"/>
    <property name="version"
              value="4"/>
    <property name="poolUpDestination"
              value="${pool.destination.heartbeat}"/>
    <property name="allowCleaningPreciousFiles"
              value="${pool.enable.remove-precious-files-on-delete}"/>
    <property name="replicationNotificationDestination"
              value="${pool.destination.replicate}"/>
    <property name="replicationIp"
              value="${pool.destination.replicate.ip}"/>
    <property name="tags"
              value="${pool.tags}"/>
    <property name="pnfsHandler" ref="pnfs"/>
    <property name="repository" ref="rep"/>
    <property name="checksumModule" ref="csm"/>
    <property name="storageQueue" ref="queue"/>
    <property name="storageHandler" ref="storagehandler"/>
    <property name="HSMSet" ref="hsmset"/>
    <property name="flushController" ref="flush"/>
    <property name="PPClient" ref="pp"/>
    <property name="account" ref="account"/>
    <property name="replicaStatePolicy" ref="replica-state-policy"/>
    <property name="volatile"
              value="#{ '${pool.lfs}' == 'volatile' or '${pool.lfs}' == 'transient' }"/>
    <property name="hasTapeBackend"
              value="#{ '${pool.lfs}' == 'none' }"/>
    <property name="transferServices" ref="transfer-services" />
    <property name="ioQueueManager" ref="io-queue-manager" />
    <property name="poolMode" ref="pool-mode"/>
    <property name="billingStub" ref="billing-stub"/>
    <property name="executor" ref="workerThreadPool"/>
    <property name="enableHsmFlag" value="${pool.enable.hsm-flag}"/>
  </bean>

  <bean id="pnfs" class="diskCacheV111.util.PnfsHandler">
    <description>PNFS manager client module</description>
    <constructor-arg ref="pnfsStub"/>
    <constructor-arg value="${pool.name}"/>
  </bean>

  <bean id="checksum-replica-store"
        class="org.dcache.pool.repository.checksums.ChecksumReplicaStore">
      <constructor-arg>
          <bean class="org.dcache.pool.statistics.IoStatisticsReplicaStore">
              <constructor-arg>
                  <bean class="org.dcache.pool.repository.ConsistentReplicaStore" init-method="init">
                      <constructor-arg ref="csm"/>
                      <constructor-arg ref="pnfs"/>
                      <constructor-arg>
                          <bean class="${pool.plugins.meta}" init-method="init">
                              <description>Store for pool meta data</description>
                              <constructor-arg ref="file-store"/>
                              <constructor-arg value="#{ T(java.nio.file.FileSystems).getDefault().getPath('${pool.path}') }"/>
                              <constructor-arg value="${pool.name}"/>
                          </bean>
                      </constructor-arg>

                      <constructor-arg ref="replica-state-policy"/>
                      <property name="poolName" value="${pool.name}"/>
                  </bean>
              </constructor-arg>
          </bean>
      </constructor-arg>
      <constructor-arg ref="csm"/>
  </bean>

  <bean id="sweeper" class="${pool.plugins.sweeper}"
          init-method="start" destroy-method="stop">
    <description>Pool garbage collector</description>
    <property name="repository" ref="rep"/>
    <property name="account" ref="account"/>
  </bean>

  <bean id="rep"
        class="org.dcache.pool.repository.v5.ReplicaRepository"
        destroy-method="shutdown">
    <description>Repository manager</description>
    <property name="executor" ref="workerThreadPool"/>
    <property name="pnfsHandler" ref="pnfs"/>
    <property name="account" ref="account"/>
    <property name="spaceSweeperPolicy" ref="sweeper"/>
    <property name="volatile"
              value="#{ '${pool.lfs}' == 'volatile' or '${pool.lfs}' == 'transient' }"/>
    <property name="maxDiskSpaceString" value="${pool.size}"/>
    <property name="replicaStore" ref="replica-store"/>
  </bean>

  <bean id="repository-interpreter" class="org.dcache.pool.repository.RepositoryInterpreter">
    <description>Repository user interface</description>
    <property name="repository" ref="rep"/>
  </bean>

  <bean id="scanner" class="org.dcache.pool.classic.ChecksumScanner">
    <description>Implements background checksum verification</description>
    <property name="poolName" value="${pool.name}"/>
    <property name="repository" ref="rep"/>
    <property name="checksumModule" ref="csm"/>
    <property name="scrubberStateFile" value="${pool.path}/scrubber.state"/>
  </bean>

  <bean id="csm" class="org.dcache.pool.classic.ChecksumModuleV1">
    <description>Checksum module</description>
  </bean>

  <bean id="queue" class="org.dcache.pool.classic.StorageClassContainer">
      <description>HSM flush queue manager</description>
      <property name="repository" ref="rep"/>
      <property name="nearlineStorageHandler" ref="storagehandler"/>
  </bean>

  <bean id="storagehandler" class="org.dcache.pool.nearline.NearlineStorageHandler">
      <description>Nearline storage manager</description>
      <property name="scheduledExecutor" ref="workerThreadPool"/>
      <property name="executor">
          <bean class="org.dcache.util.CDCListeningExecutorServiceDecorator"
                destroy-method="shutdown">
              <constructor-arg>
                  <bean class="org.dcache.util.BoundedCachedExecutor">
                      <constructor-arg value="${pool.limits.nearline-threads}"/>
                  </bean>
              </constructor-arg>
          </bean>
      </property>
      <property name="repository" ref="rep"/>
      <property name="checksumModule" ref="csm"/>
      <property name="pnfsHandler" ref="pnfs"/>
      <property name="billingStub" ref="billing-stub"/>
      <property name="hsmSet" ref="hsmset"/>
      <property name="allocator" ref="allocator" />
  </bean>

  <bean id="hsmset" class="org.dcache.pool.nearline.HsmSet">
    <description>HSM backend manager</description>
  </bean>

  <bean id="jtm" class="org.dcache.pool.classic.JobTimeoutManager"
          init-method="start" destroy-method="stop">
      <description>Job timeout manager</description>
      <property name="ioQueueManager" ref="io-queue-manager"/>
  </bean>

  <bean id="flush" class="org.dcache.pool.classic.HsmFlushController">
      <description>Controller for centralising flushing</description>
      <property name="storageClassContainer" ref="queue"/>
      <property name="poolMode" ref="pool-mode"/>
  </bean>

  <bean id="billing-stub" class="org.dcache.cells.CellStub">
      <description>Billing communication stub</description>
      <property name="destination" value="${pool.service.billing}"/>
  </bean>

  <bean id="corrupt-file-topic" class="org.dcache.cells.CellStub">
        <description>Topic communication stub</description>
        <property name="destination" value="${pool.destination.corrupt-file}"/>
  </bean>

  <bean id="pnfsStub" class="org.dcache.cells.CellStub">
    <description>PNFS manager cell stub</description>
      <property name="destination" value="${pool.service.pnfsmanager}"/>
      <property name="timeout" value="${pool.service.pnfsmanager.timeout}"/>
      <property name="timeoutUnit" value="${pool.service.pnfsmanager.timeout.unit}"/>
      <property name="rate" value="${pool.service.pnfsmanager.rate}"/>
  </bean>

  <bean id="poolStub" class="org.dcache.cells.CellStub">
    <description>Pool cell stub</description>
    <property name="timeout" value="${pool.service.pool.timeout}"/>
    <property name="timeoutUnit" value="${pool.service.pool.timeout.unit}"/>
  </bean>

  <bean id="poolManagerStub" class="org.dcache.cells.CellStub">
    <description>Pool manager cell stub</description>
      <property name="destination" value="${pool.service.poolmanager}"/>
      <property name="timeout" value="${pool.service.poolmanager.timeout}"/>
      <property name="timeoutUnit" value="${pool.service.poolmanager.timeout.unit}"/>
  </bean>

  <bean id="doorStub" class="org.dcache.cells.CellStub">
      <description>Door cell stub</description>
      <property name="timeout" value="${pool.service.door.timeout}"/>
      <property name="timeoutUnit" value="${pool.service.door.timeout.unit}"/>
  </bean>

  <bean id="workerThreadPool"
        class="org.dcache.util.CDCScheduledExecutorServiceDecorator">
      <description>Thread pool for background tasks</description>
      <constructor-arg>
          <bean class="java.util.concurrent.Executors"
                factory-method="newScheduledThreadPool"
                 destroy-method="shutdown">
              <constructor-arg value="${pool.limits.worker-threads}"/>
              <property name="executeExistingDelayedTasksAfterShutdownPolicy"
                        value="false"/>
              <property name="continueExistingPeriodicTasksAfterShutdownPolicy"
                        value="false"/>
          </bean>
      </constructor-arg>
  </bean>

  <bean id="pinManagerStub" class="org.dcache.cells.CellStub">
    <description>Pin manager cell stub</description>
      <property name="destination" value="${pool.service.pinmanager}"/>
      <property name="timeout" value="${pool.service.pinmanager.timeout}"/>
      <property name="timeoutUnit" value="${pool.service.pinmanager.timeout.unit}"/>
  </bean>


  <bean id="pp" class="org.dcache.pool.p2p.P2PClient"
        destroy-method="shutdown">
    <description>Pool to pool transfer manager</description>
    <property name="repository" ref="rep"/>
    <property name="checksumModule" ref="csm"/>
    <property name="pnfs" ref="pnfsStub"/>
    <property name="pool" ref="poolStub"/>
    <property name="executor" ref="workerThreadPool"/>
  </bean>

  <bean id="migration" class="org.dcache.pool.migration.MigrationModule"
        destroy-method="cancelAll">
    <description>Replica migration module client</description>
    <constructor-arg>
        <bean class="org.dcache.pool.migration.MigrationContextImpl">
            <property name="repository" ref="rep"/>
            <property name="executor" ref="workerThreadPool"/>
            <property name="pnfsStub" ref="pnfsStub"/>
            <property name="poolStub" ref="poolStub"/>
            <property name="poolManagerStub" ref="poolManagerStub"/>
            <property name="pinManagerStub" ref="pinManagerStub"/>
        </bean>
    </constructor-arg>
  </bean>

  <bean id="migration-server"
        class="org.dcache.pool.migration.MigrationModuleServer">
    <description>Replica migration module backend</description>
    <property name="repository" ref="rep"/>
    <property name="migrationModule" ref="migration"/>
    <property name="PPClient" ref="pp"/>
    <property name="executor" ref="workerThreadPool"/>
    <property name="checksumModule" ref="csm"/>
    <property name="poolMode" ref="pool-mode"/>
  </bean>

  <bean id="account"
        class="org.dcache.pool.repository.Account">
    <description>Repository space accounting</description>
  </bean>

  <bean id="allocator" class="org.dcache.pool.classic.FairQueueAllocator">
    <description>Space allocation policy for nearline storage</description>
    <constructor-arg>
      <bean class="org.dcache.pool.classic.BlockingAllocator">
	<constructor-arg ref="account"/>
      </bean>
    </constructor-arg>
  </bean>

  <bean id="io-queue-manager" class="org.dcache.pool.classic.IoQueueManager"
          destroy-method="shutdown" depends-on="transfer-services">
    <description>Requests IO manager</description>
    <property name="queues" value="${pool.queues}"/>
  </bean>

  <bean id="default-transfer-service" class="org.dcache.pool.classic.MoverMapTransferService"
          destroy-method="shutdown" depends-on="rep">
      <description>Generic transfer service</description>
      <property name="checksumModule" ref="csm"/>
      <property name="postTransferService" ref="post-transfer-service"/>
  </bean>

  <bean id="nfs-transfer-service" class="org.dcache.chimera.nfsv41.mover.NfsTransferService"
        init-method="init" destroy-method="shutdown" depends-on="rep">
      <description>NFSv4.1 transfer service</description>
      <property name="enableGss" value="${pool.mover.nfs.rpcsec_gss}" />
      <property name="postTransferService" ref="post-transfer-service"/>
      <property name="pnfsHandler" ref="pnfs"/>
      <property name="doorStub" ref="doorStub"/>
      <property name="checksumModule" ref="csm"/>
      <property name="minTcpPort" value="${pool.mover.nfs.port.min}"/>
      <property name="maxTcpPort" value="${pool.mover.nfs.port.max}"/>
      <property name="tcpPortFile" value="${pool.path}/mover-tcp-port.nfs"/>
      <property name="ioStrategy" value="${pool.mover.nfs.thread-policy}" />

  </bean>

  <bean id="signing-policy"
        class="org.dcache.xrootd.security.SigningPolicy">
    <constructor-arg name="secLvl" value="${pool.mover.xrootd.security.level}"/>
    <constructor-arg name="force" value="${pool.mover.xrootd.security.force-signing}"/>
  </bean>

  <bean id="xrootd-transfer-service" class="org.dcache.xrootd.pool.XrootdTransferService"
          depends-on="rep">
      <description>Xrootd transfer service</description>
      <property name="postTransferService" ref="post-transfer-service"/>
      <property name="checksumModule" ref="csm"/>
      <property name="threads" value="${pool.mover.xrootd.threads}"/>
      <property name="clientIdleTimeout" value="${pool.mover.xrootd.timeout.idle}"/>
      <property name="clientIdleTimeoutUnit" value="${pool.mover.xrootd.timeout.idle.unit}"/>
      <property name="connectTimeout" value="${pool.mover.xrootd.timeout.connect}"/>
      <property name="connectTimeoutUnit" value="${pool.mover.xrootd.timeout.connect.unit}"/>
      <property name="maxFrameSize" value="${pool.mover.xrootd.frame-size}"/>
      <property name="accessLogPlugins">
        <bean class="org.dcache.xrootd.spring.ChannelHandlerFactoryFactoryBean">
          <property name="plugins" value="access-log"/>
        </bean>
      </property>
      <property name="plugins">
          <bean class="org.dcache.xrootd.spring.ChannelHandlerFactoryFactoryBean">
              <property name="plugins" value="${pool.mover.xrootd.plugins}"/>
          </bean>
      </property>
      <property name="doorStub" ref="doorStub"/>
      <property name="portRange">
          <bean class="org.dcache.util.NettyPortRange">
              <constructor-arg value="${pool.mover.xrootd.port.min}"/>
              <constructor-arg value="${pool.mover.xrootd.port.max}"/>
          </bean>
      </property>
      <property name="queryConfig">
          <bean class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
              <property name="prefix" value="pool.mover.xrootd.query-config"/>
          </bean>
      </property>
      <property name="tpcClientPlugins">
          <bean class="org.dcache.xrootd.spring.ChannelHandlerFactoryFactoryBean">
            <property name="plugins" value="${pool.mover.xrootd.tpc-authn-plugins}"/>
          </bean>
      </property>
      <property name="thirdPartyShutdownExecutor" ref="workerThreadPool"/>
      <property name="signingPolicy" ref="signing-policy"/>
      <property name="tpcServerResponseTimeout" value="${pool.mover.xrootd.tpc-server-response-timeout}"/>
      <property name="tpcServerResponseTimeoutUnit" value="${pool.mover.xrootd.tpc-server-response-timeout.unit}"/>
  </bean>

  <bean id="http-transfer-service-parent" class="org.dcache.http.HttpTransferService"
          depends-on="rep">
        <description>HTTP transfer service</description>
        <property name="postTransferService" ref="post-transfer-service"/>
        <property name="checksumModule" ref="csm"/>
        <property name="threads" value="${pool.mover.http.threads}"/>
        <property name="chunkSize" value="${pool.mover.http.chunk-size}"/>
        <property name="clientIdleTimeout" value="${pool.mover.http.timeout.idle}"/>
        <property name="clientIdleTimeoutUnit" value="${pool.mover.http.timeout.idle.unit}"/>
        <property name="connectTimeout" value="${pool.mover.http.timeout.connect}"/>
        <property name="connectTimeoutUnit" value="${pool.mover.http.timeout.connect.unit}"/>
        <property name="doorStub" ref="doorStub"/>
        <property name="portRange">
            <bean class="org.dcache.util.NettyPortRange">
                <constructor-arg value="${pool.mover.http.port.min}"/>
                <constructor-arg value="${pool.mover.http.port.max}"/>
            </bean>
        </property>
        <property name="customHeaders" ref="custom-headers"/>
    </bean>

    <bean id="http-transfer-service"  parent="http-transfer-service-parent"/>

  <bean id="remote-http-transfer-service" class="org.dcache.pool.classic.RemoteHttpTransferService"
          depends-on="rep" destroy-method="shutdown">
      <property name="checksumModule" ref="csm"/>
      <property name="postTransferService" ref="post-transfer-service"/>
      <property name="certificateAuthorityPath" value="${pool.authn.capath}"/>
      <property name="certificateAuthorityUpdateInterval" value="${pool.authn.capath.refresh}"/>
      <property name="certificateAuthorityUpdateIntervalUnit" value="${pool.authn.capath.refresh.unit}"/>
      <property name="namespaceMode" value="${pool.authn.namespace-mode}"/>
      <property name="crlCheckingMode" value="${pool.authn.crl-mode}"/>
      <property name="ocspCheckingMode" value="${pool.authn.ocsp-mode}"/>
  </bean>

  <bean id="banned-ciphers" class="org.dcache.util.Crypto"
        factory-method="getBannedCipherSuitesFromConfigurationValue">
      <constructor-arg value="${pool.authn.ciphers}"/>
  </bean>

  <bean id="remote-gsiftp-transfer-service" class="org.dcache.pool.classic.RemoteGsiftpTransferService"
          depends-on="rep" destroy-method="shutdown">
      <property name="checksumModule" ref="csm"/>
      <property name="postTransferService" ref="post-transfer-service"/>
      <property name="certificateAuthorityPath" value="${pool.authn.capath}"/>
      <property name="certificateAuthorityUpdateInterval" value="${pool.authn.capath.refresh}"/>
      <property name="certificateAuthorityUpdateIntervalUnit" value="${pool.authn.capath.refresh.unit}"/>
      <property name="namespaceMode" value="${pool.authn.namespace-mode}"/>
      <property name="crlCheckingMode" value="${pool.authn.crl-mode}"/>
      <property name="ocspCheckingMode" value="${pool.authn.ocsp-mode}"/>
      <property name="bannedCiphers" ref="banned-ciphers"/>
      <property name="portRange">
          <bean class="org.dcache.util.PortRange">
              <constructor-arg value="${pool.mover.ftp.port.min}"/>
              <constructor-arg value="${pool.mover.ftp.port.max}"/>
          </bean>
      </property>
  </bean>

  <bean id="post-transfer-service"  class="org.dcache.pool.classic.DefaultPostTransferService"
          init-method="init" destroy-method="shutdown" depends-on="rep">
       <description>Post processing execution service</description>
       <property name="billingStub" ref="billing-stub"/>
       <property name="poolName" value="${pool.name}"/>
       <property name="checksumModule" ref="csm"/>
  </bean>


  <bean id="abstract-transfer-service" abstract="true" class="org.dcache.pool.classic.TransferServices">
      <description>Collection of transfer services</description>
      <property name="defaultFactory" ref="default-transfer-service"/>
      <property name="factories">
        <map>
            <entry key="NFS4-4" value-ref="nfs-transfer-service" />
            <entry key="Xrootd-2" value-ref="xrootd-transfer-service"/>
            <entry key="Http-1" value-ref="http-transfer-service"/>
            <entry key="RemoteHttpDataTransfer-1" value-ref="remote-http-transfer-service"/>
            <entry key="RemoteHttpsDataTransfer-1" value-ref="remote-http-transfer-service"/>
            <entry key="RemoteGsiftpTransfer-1" value-ref="remote-gsiftp-transfer-service"/>
        </map>
      </property>
  </bean>

  <bean id="custom-headers"
	class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
      <property name="prefix" value="pool.mover.http.custom-response-header"/>
  </bean>

  <bean id="resilience-message-handler" class="org.dcache.pool.resilience.ResilienceMessageHandler"
    init-method="initialize">
    <description>For communication with the replica manager</description>
    <property name="executionService">
      <bean class="org.dcache.util.CDCExecutorServiceDecorator">
        <constructor-arg>
          <bean class="java.util.concurrent.Executors" factory-method="newFixedThreadPool"
                destroy-method="shutdownNow">
            <constructor-arg value="${pool.resilience.request-threads}"/>
          </bean>
        </constructor-arg>
      </bean>
    </property>
    <property name="repository" ref="rep"/>
    <property name="poolName" value="${pool.name}"/>
    <property name="listener">
      <bean class="org.dcache.pool.resilience.BrokenFileListener">
        <constructor-arg ref="corrupt-file-topic"/>
        <constructor-arg value="${pool.name}"/>
      </bean>
    </property>
  </bean>

  <bean id="pool-info-request-handler" class="org.dcache.pool.PoolInfoRequestHandler">
    <description>Handles requests from frontend services for pool data.</description>
    <property name="executor">
      <bean class="java.util.concurrent.Executors" factory-method="newFixedThreadPool"
            destroy-method="shutdownNow">
        <constructor-arg value="${pool.info-request-handler.threads}"/>
      </bean>
    </property>
    <property name="pool" ref="pool"/>
    <property name="checksumModule" ref="csm"/>
    <property name="flushController" ref="flush"/>
    <property name="hsmFlushQueueManager" ref="queue"/>
    <property name="jobTimeoutManager" ref="jtm"/>
    <property name="migrationClient" ref="migration"/>
    <property name="migrationServer" ref="migration-server"/>
    <property name="p2pClient" ref="pp"/>
    <property name="queueManager" ref="io-queue-manager"/>
    <property name="repositoryDataProvider" ref="rep"/>
    <property name="repository" ref="rep"/>
    <property name="storageHandler" ref="storagehandler"/>
    <property name="sweeper" ref="sweeper"/>
    <property name="transferServices" ref="transfer-services"/>
  </bean>

  <beans profile="healthcheck-true">
    <bean id="healthcheck" class="org.dcache.pool.repository.v5.CheckHealthTask">
      <description>Periodic task for checking pool health</description>
      <property name="repository" ref="rep"/>
      <property name="account" ref="account"/>
      <property name="replicaStore" ref="replica-store"/>
      <property name="command" value="${pool.check-health-command}"/>
    </bean>

    <task:scheduled-tasks scheduler="healthcheck-scheduler">
      <task:scheduled ref="healthcheck" method="run" fixed-delay="60000"/>
    </task:scheduled-tasks>

    <!-- Instead of <task:scheduler id="healthcheck-scheduler"/> -->
    <bean id="healthcheck-scheduler" class="org.dcache.util.CDCThreadPoolTaskScheduler"/>
  </beans>

  <beans profile="backend-ceph">
      <bean id="file-store" class="org.dcache.pool.repository.ceph.CephFileStore"
        destroy-method="shutdown">
          <description>Ceph-based back-end store for pool</description>
          <constructor-arg index="0" value="${pool.backend.ceph.pool-name}"/>
          <constructor-arg index="1" value="${pool.backend.ceph.cluster}"/>
          <constructor-arg index="2" value="${pool.backend.ceph.config}"/>
      </bean>
  </beans>

  <beans profile="backend-posix">
      <bean id="file-store" class="org.dcache.pool.repository.FlatFileStore">
          <description>Store for pool files</description>
          <constructor-arg value="#{ T(java.nio.file.FileSystems).getDefault().getPath('${pool.path}') }"/>
      </bean>
  </beans>

    <beans profile="kafka-true">

       <bean id="listener" class="org.dcache.kafka.LoggingProducerListener"/>


        <bean id="kafka-configs-remove" class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
            <property name="prefix" value="pool.kafka.producer.configs"/>
            <property name="staticEnvironment">
                <map>
                    <entry key="bootstrap.servers" value="${pool.kafka.producer.bootstrap.servers}"/>
                    <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>
                    <entry key="value.serializer" value="org.dcache.notification.RemoveFileInfoMessageSerializer"/>
                    <entry key="client.id" value="${pool.cell.name}@${dcache.domain.name}-remove"/>
                </map>
            </property>
        </bean>



        <bean id="billing-template-remove"  class="org.springframework.kafka.core.KafkaTemplate">
            <qualifier value="remove"/>
            <constructor-arg>
                <bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
                    <constructor-arg name="configs" ref ="kafka-configs-remove"/>
                </bean>
            </constructor-arg>
            <property name="defaultTopic" value="${pool.kafka.topic}"/>
            <property name="producerListener" ref="listener"/>
        </bean>


        <bean id="kafka-configs-hsm" class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
            <property name="prefix" value="pool.kafka.producer.configs"/>
            <property name="staticEnvironment">
                <map>
                    <entry key="bootstrap.servers" value="${pool.kafka.producer.bootstrap.servers}"/>
                    <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>
                    <entry key="value.serializer" value="org.dcache.notification.StorageInfoMessageSerializer"/>
                    <entry key="client.id" value="${pool.cell.name}@${dcache.domain.name}-hsm"/>
                </map>
            </property>
        </bean>



        <bean id="billing-template-hsm"  class="org.springframework.kafka.core.KafkaTemplate">
            <qualifier value="hsm"/>
            <constructor-arg>
                <bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
                    <constructor-arg name="configs" ref ="kafka-configs-hsm"/>
                </bean>
            </constructor-arg>
            <property name="defaultTopic" value="${pool.kafka.topic}"/>
            <property name="producerListener" ref="listener"/>
        </bean>


        <bean id="kafka-configs-transfer" class="org.dcache.util.configuration.ConfigurationMapFactoryBean">
            <property name="prefix" value="pool.kafka.producer.configs"/>
            <property name="staticEnvironment">
                <map>
                    <entry key="bootstrap.servers" value="${pool.kafka.producer.bootstrap.servers}"/>
                    <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>
                    <entry key="value.serializer" value="org.dcache.notification.BillingMessageSerializer"/>
                    <entry key="client.id" value="${pool.cell.name}@${dcache.domain.name}-transfer"/>
                </map>
            </property>
        </bean>



        <bean id="billing-template-transfer"  class="org.springframework.kafka.core.KafkaTemplate">
            <qualifier value="transfer"/>
            <constructor-arg>
                <bean class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
                    <constructor-arg name="configs" ref ="kafka-configs-transfer"/>
                </bean>
            </constructor-arg>
            <constructor-arg name="autoFlush" value="false" />
            <property name="defaultTopic" value="${pool.kafka.topic}"/>
            <property name="producerListener" ref="listener"/>
        </bean>

    </beans>

    <beans profile="httpsredirect-false">
        <bean id="transfer-services" parent="abstract-transfer-service">
            <description>Collection of transfer services</description>
        </bean>
    </beans>

    <beans profile="httpsredirect-true">
        <bean id="transfer-services" parent="abstract-transfer-service">
            <description>Collection of transfer services with https</description>
            <property name="factories">
                <map merge="true">
                    <entry key="Https-1" value-ref="https-transfer-service"/>
                </map>
            </property>
        </bean>

        <bean id="https-transfer-service" parent="http-transfer-service-parent" class="org.dcache.http.HttpsTransferService">
            <property name="serverCertificatePath" value="${pool.mover.https.hostcert.cert}"/>
            <property name="serverKeyPath" value="${pool.mover.https.hostcert.key}"/>
            <property name="serverCaPath" value="${pool.mover.https.capath}"/>
            <property name="crlCheckingMode" value="${pool.authn.crl-mode}"/>
            <property name="ocspCheckingMode" value="${pool.authn.ocsp-mode}"/>
        </bean>
    </beans>

    <beans profile="inotify-true">
        <bean id="event-notifier" class="diskCacheV111.namespace.EventNotifier">
            <description>Service allowing other dCache components to be notified of namespace events</description>
            <property name="cellStub">
                <bean class="org.dcache.cells.CellStub">
                    <property name="timeout" value="10"/>
                    <property name="timeoutUnit" value="SECONDS"/>
                </bean>
            </property>

            <property name="dispatchExecutor">
                <bean class="org.dcache.util.BoundedCachedExecutor"
                      destroy-method="shutdownNow">
                    <constructor-arg value="1"/>  <!-- Only a single thread -->
                    <constructor-arg value="${pool.inotify-generation.backlog.initial}"/>
                </bean>
            </property>

            <property name="senderExecutor">
                <bean class="java.util.concurrent.Executors"
                      factory-method="newSingleThreadExecutor"
                      destroy-method="shutdownNow"/>
            </property>
            <property name="eventBatchSize"
                      value="${pool.inotify-generation.message-batch-size}"/>
            <property name="maximumQueuedEvents"
                      value="${pool.inotify-generation.backlog.per-door}"/>
        </bean>

	<bean id="notification-amplifier"
	      class="org.dcache.pool.repository.inotify.NotificationAmplifier">
	    <constructor-arg ref="event-notifier"/>
	</bean>

	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="targetObject" ref="rep"/>
	    <property name="targetMethod" value="addListener"/>
	    <property name="arguments" ref="notification-amplifier"/>
	</bean>

	<bean id="replica-store"
	      class="org.dcache.pool.repository.inotify.InotifyReplicaStore">
	    <constructor-arg ref="checksum-replica-store"/>
	    <constructor-arg ref="notification-amplifier"/>
	    <constructor-arg value="#{ T(org.dcache.util.TimeUtils).durationOf('${pool.inotify-generation.io-suppression}', '${pool.inotify-generation.io-suppression.unit}') }"/>
	</bean>
    </beans>

    <beans profile="inotify-false">
        <bean id="replica-store" parent="checksum-replica-store"/>
    </beans>
</beans>
