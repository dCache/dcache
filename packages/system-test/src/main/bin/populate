#!/bin/sh

set -e

uid=$(id -u)
gid=1000
username=$(id -u -n)
adminRoleGid=0

ln -sf services-daemon.sh @TARGET@/dcache/share/lib/services.sh

@DCACHE_LOAD_CONFIG@
lib="$(getProperty dcache.paths.share.lib)"
. ${lib}/utils.sh
. ${lib}/database.sh

@TARGET@/bin/ctlcluster stop

cd @TARGET@/dcache

extract_dn() {
  openssl x509 -in $1 -noout -subject -nameopt compat | sed -E -e 's:subject= */?:/:;s:, :/:g;s: = :=:g'
}

build_ca() {
    local host_cert_hash old_dn ca_key ca_cert ca_index trust_store ca_serial

    ca_key="$ca_dir/ca-key.pem"
    ca_cert="$ca_dir/ca-cert.pem"
    ca_index="$ca_dir/index.txt"
    ca_serial="$ca_dir/serial"

    cat > $ca_config <<EOF
RANDFILE = $ca_dir/rand
CN       = Disposable CA $(date "+%Y-%m-%d %H:%M:%S")

##  USED WHEN GENERATING CA (SELF-SIGNED) CERTIFICATE + PRIVATE KEY

[req]
default_bits       = 2048
encrypt_key        = no
default_md         = sha256
distinguished_name = CA_distinguished_name
x509_extensions    = CA_x509_extensions
prompt             = no

[CA_distinguished_name]
1.DC = org
2.DC = dCache
CN   = \$ENV::CN

[CA_x509_extensions]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical,CA:true
subjectAltName         = email:support@dcache.org,URI:http://www.dcache.org/
nsComment              = "dCache.org disposable CA, generated $(date "+%Y-%m-%d %H:%M:%S")"
keyUsage               = critical,keyCertSign

##
##  USED WHEN PROCESSING CERTIFICATE SIGNING REQUEST:
##

[ca]
default_ca = CA_default

[CA_default]
certs            = $ca_dir
crl_dir          = $ca_dir
database         = $ca_index
new_certs_dir    = $ca_dir
certificate      = $ca_cert
private_key      = $ca_key
serial           = $ca_serial
crlnumber        = $ca_dir/crlnumber
crl              = $ca_dir/crl.pem
RANDFILE         = $ca_dir/rand
name_opt         = ca_default
cert_opt         = ca_default
default_days     = 365
default_crl_days = 30
default_md       = sha256
preserve         = no
policy           = policy_any
email_in_dn      = no

[host_cert]
basicConstraints       = critical,CA:FALSE
keyUsage               = critical,digitalSignature,keyEncipherment,dataEncipherment
nsComment              = "dCache.org disposable CA generated host certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
subjectAltName         = @host_alt_names
extendedKeyUsage       = serverAuth,clientAuth
issuerAltName          = issuer:copy
certificatePolicies    = 2.5.29.32.0

[user_cert]
basicConstraints       = critical,CA:FALSE
keyUsage               = critical,digitalSignature,keyEncipherment,dataEncipherment
nsComment              = "dCache.org disposable CA generated user certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
subjectAltName         = @user_alt_names
extendedKeyUsage       = serverAuth,clientAuth
issuerAltName          = issuer:copy
certificatePolicies    = 2.5.29.32.0

[policy_any]
DC = match
DC = match
CN = supplied
EOF
    i=1
    echo "" >> $ca_config
    echo "[host_alt_names]" >> $ca_config
    for fqdn in $(list_potential_subjaltname | sort | uniq); do
        echo "DNS.$i = $fqdn" >> $ca_config
        i=$(( $i + 1 ))
    done

    # If the email address can be found from git. continue
    # or else it will use a dummy email address. We need the section to be defined with an email address.
    # Alternatively we can not define the section but we would need to start handling this case earlier (remove subjectAltName).
    email_address=$(git config user.email) || email_address="$USER@dcache.example.org"
    cat >> $ca_config <<EOF

[user_alt_names]
email = $email_address
EOF

    touch $ca_index
    echo 01 > $ca_serial
    openssl req -batch -new -x509 -config "$ca_config" -days 365 -keyout "$ca_key" -out "$ca_cert" >/dev/null 2>&1

    #  Add our certificate authority to our trust store
    trust_store=etc/grid-security/certificates
    host_cert_hash=$(openssl x509 -in $ca_cert -noout -subject_hash)
    cp "$ca_cert" "$trust_store/$host_cert_hash.0"

    old_dn=$(extract_dn "$ca_cert")

    cat > "$trust_store/$host_cert_hash.signing_policy" <<EOF
access_id_CA    X509    '$old_dn'
pos_rights      globus  CA:sign
cond_subjects   globus  '"/DC=org/DC=dCache/*"'
EOF
    cat > "$trust_store/$host_cert_hash.namespaces" <<EOF
TO Issuer "$old_dn" \\
  PERMIT Subject "/DC=org/DC=dCache/.*"
EOF
}

build_host_credentials() {
    local ca_host_req ca_hostkey
    local target_hostkey target_hostcert

    ca_host_req="$ca_dir/hostcert.req"
    ca_hostkey="$ca_dir/hostkey.pem"
    target_hostkey=etc/grid-security/hostkey.pem
    target_hostcert=etc/grid-security/hostcert.pem

    CN=$(uname -n) openssl req -new -config "$ca_config" -keyout "$ca_hostkey" -out "$ca_host_req" >/dev/null 2>&1
    openssl ca -batch -config "$ca_config" -extensions host_cert -out "$target_hostcert" -infiles "$ca_host_req" >/dev/null  2>&1
    openssl rsa -in "$ca_hostkey" -out "$target_hostkey" >/dev/null 2>&1
}

build_user_credentials() {
    local ca_user_req target_userkey target_usercert

    ca_user_req="$ca_dir/usercert.req"
    target_userkey="userkey.pem"
    target_usercert="usercert.pem"

    CN=$username openssl req -new -config "$ca_config" -keyout "$target_userkey" -out "$ca_user_req" >/dev/null 2>&1

    openssl ca -batch -config "$ca_config" -extensions user_cert -out "$target_usercert" -infiles "$ca_user_req" >/dev/null 2>&1

    chmod 400 "$target_userkey"
}

build_x509_credentials() {
    local ca_dir ca_config

    mkdir -p etc/grid-security/certificates

    mkdir -p "@TARGET@/ca"
    ca_dir="$(cd @TARGET@/ca; pwd)"
    ca_config="$ca_dir/openssl.config"

    if [ ! -f "$ca_config" ]; then
	build_ca
    fi

    if [ ! -f etc/grid-security/hostcert.pem ]; then
	build_host_credentials
    fi

    if [ ! -f usercert.pem ]; then
	build_user_credentials
    fi
}

list_potential_subjaltname() {
    echo localhost
    uname -n
    case $(uname) in
        SunOS)
            echo $(uname -n).$(awk '/^domain/ {print $2}' /etc/resolv.conf)
            ;;
        Darwin)
            hostname -f
            ;;
        Linux)
            hostname -A | sed 's/ /\n/g'
            ;;
    esac
}


prepend() { # $1 - file to update, $2 - text to add.
    tmp=$(mktemp)
    echo "$2" | cat - "$1" > $tmp && mv $tmp "$1"
}

prepend_layout() { # $1 - text to add.
    prepend "@TARGET@/dcache/etc/layouts/system-test.conf" "$1"
}

add_oidc() {
    local loaded_ops sub aud_claim audiences

    loaded_ops=$(oidc-add -a | tr '\n' ' ')

    if [ "$loaded_ops" = "" ]; then
	echo
        echo "WARNING: there are no OPs currently loaded into oidc-agent.  Try running"
        if [ $(oidc-gen -l|wc -l) -eq 0 ]; then
            echo "         'oidc-gen' to register an OP."
        else
            echo "         'oidc-add' to load some OPs."
        fi
        return 0
    fi

    echo "INFO: adding support for OP: $loaded_ops"
    prepend etc/gplazma.conf "auth    optional    oidc"

    for op in $loaded_ops; do
        #  The "2>&1" is a work-around for a bug in oidc-token; see:
        #
        #      https://github.com/indigo-dc/oidc-agent/issues/503
        #
        eval $(oidc-token -c $op 2>&1)

        prepend_layout "gplazma.oidc.provider!$op = $OIDC_ISS"

        # REVISIT: here we assume the access token is a JWT.  More
        # generally, we should contact the user-info endpoint to
        # discover the 'sub' claim.
        sub=$(echo $OIDC_AT | cut -d. -f2 | base64 -d 2>/dev/null | jq -r .sub)

        echo "oidc:${sub}@${op} username:${username} uid:$uid gid:$gid,true" >> "@TARGET@/dcache/etc/multi-mapfile"

        # REVISIT: again, we assume the access token is a JWT.  More
        # generally, we should contact the user-info endpoint to
        # discover the 'aud' claim.
        aud_claim=$(echo $OIDC_AT|cut -d. -f2 | base64 -d 2>/dev/null | jq -e -r .aud) \
            && audiences="$audiences $aud_claim"
    done

    if [ "$audiences" != "" ]; then
        prepend_layout "gplazma.oidc.audience-targets = $audiences"
    fi

    echo "username:${username} root:/ home:/" >> "@TARGET@/dcache/etc/omnisession.conf"
}

add_dn_from_file() { # $1 - X.509 pem certificate
    local dn rc

    if [ ! -f "$1" ]; then
	return
    fi

    dn=$(extract_dn "$1")

    rc=0
    bin/dcache kpwd dcuserlist "$username" | grep -q "Authentication Record" || rc=$?

    if [ $rc -eq 0 ]; then
	bin/dcache kpwd dcusermod -s "$dn" "$username"
    else
	bin/dcache kpwd dcuseradd -u $uid -g $gid,$adminRoleGid -h / -r / -f / \
		   -w read-write -s "$dn" "$username"
    fi
    bin/dcache kpwd dcmapadd "$dn" "$username"
}

build_x509_credentials

if [ ! -f etc/dcache.kpwd ]; then
    bin/dcache kpwd dcuseradd -u $uid -g $gid,$adminRoleGid -h / -r / -f / \
	       -w read-write -p password "$username"

    add_dn_from_file usercert.pem
    add_dn_from_file ~/.globus/usercert.pem

    bin/dcache kpwd dcuseradd -u $uid -g $gid -h / -r /users-root \
            -w read-write -p password usersroot
    bin/dcache kpwd dcuseradd -u $uid -g $gid -h / -r /door-root/users-root \
            -w read-write -p password doorrootusersroot

    echo "version 2.1" > etc/grid-security/storage-authzdb
    if which htpasswd; then
      htpasswd -b -c etc/htpasswd admin dickerelch
      htpasswd -b etc/htpasswd readonly password
      echo "authorize admin read-write 0 0 / / /" >> etc/grid-security/storage-authzdb
      echo "authorize readonly read-only 1 1 / / /" >> etc/grid-security/storage-authzdb
    else
      bin/dcache kpwd dcuseradd -u 0 -g 0 -h / -r / -f / \
                                -w read-write -p dickerelch admin
      bin/dcache kpwd dcuseradd -u 1 -g 1 -h / -r / -f / \
                                -w read-only -p password readonly
    fi
fi

if [ ! -f etc/admin/authorized_keys2 ]; then
    for pubkey in id_rsa.pub id_dsa.pub; do
        if [ -f ~/.ssh/$pubkey ]; then
            awk '{print $1,$2,"admin@localhost"}' ~/.ssh/$pubkey >> etc/admin/authorized_keys2
        fi
    done
fi

createfs() {
    bin/chimera -e - <<EOF
writetag / OSMTemplate "StoreName test"
writetag / sGroup "default"
chmod 555 /

mkdir /tape
writetag /tape sGroup "tape"
writetag /tape RetentionPolicy CUSTODIAL
writetag /tape AccessLatency NEARLINE
chown $uid:$gid /tape

mkdir /disk
writetag /disk sGroup "disk"
chown $uid:$gid /disk

mkdir /replica
writetag /replica sGroup "replica"
chown $uid:$gid /replica
writetag /replica RetentionPolicy CUSTODIAL

mkdir /resilient
writetag /resilient sGroup "resilient"
chown $uid:$gid /resilient
writetag /resilient RetentionPolicy REPLICA
writetag /resilient AccessLatency   ONLINE

mkdir /reserved
writetag /reserved sGroup "reserved"
chown $uid:$gid /reserved

mkdir /public
chmod 777 /public
writetag /public sGroup "public"
chown $uid:$gid /public

mkdir /private
chmod 700 /private
writetag /private sGroup "private"
chown $uid:$gid /private

mkdir /users-root
chmod 777 /users-root
mkdir /users-root/door-root
chmod 777 /users-root/door-root
mkdir /door-root
chmod 777 /door-root
mkdir /door-root/users-root
chmod 777 /door-root/users-root
EOF
}
# Apply liquibase change sets in parallel
pids=""
for domain in $(getProperty dcache.domains); do
    for cell in $(getProperty dcache.domain.cells "$domain"); do
        if hasManagedDatabase "$domain" "$cell" && hasAutoSchema "$domain" "$cell"; then
            liquibase "$domain" "$cell" update &
            pids="$! $pids"
        fi
    done
done
for pid in $pids; do
    wait $pid
done

if [ ! -f var/db/chimera.initialized ]; then
    createfs
    touch var/db/chimera.initialized
fi

if [ ! -f etc/linkgroup.conf ]; then
    cat > etc/linkgroup.conf <<EOF
LinkGroup sm-group
$username
system-test
EOF
fi

have_oidc_agent() {
    local oidc_version minimum_version lowest_version

    if ! command -v oidc-token >/dev/null; then
	echo "WARNING: oidc-agent not found, skipping OpenID-Connect configuration."
	return 1
    fi

    oidc_agent_version=$(oidc-token --version | awk '{print $2}')
    minimum_version="4.3.0"
    lowest_version=$(printf "$oidc_agent_version\n$minimum_version" \
		   | sort -t "." -n -k1,1 -k2,2 -k3,3 -k4,4 \
		   | head -n 1)
    if [ "$lowest_version" != "$minimum_version" ]; then
	echo "WARNING: oidc-agent is too old: install v$minimum_version or later."
	return 1
    fi

    return 0
}

have_oidc_agent && add_oidc || :
