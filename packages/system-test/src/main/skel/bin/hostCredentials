#!/bin/sh

set -e

rel_path=$(dirname $0)/../etc/grid-security
mkdir -p $rel_path/certificates
TARGET_DIR=$(cd $rel_path;pwd)
TARGET_TRUST_STORE=$TARGET_DIR/certificates

OUR_TRUST_STORE=$HOME/.globus/dcache-systemtest-certificates
USER_TRUST_STORE=$HOME/.globus/certificates
SYSTEM_TRUST_STORE=/etc/grid-security/certificates
HOST_CRED_STORE=$HOME/.globus

while [ $# -gt 0 ]; do
    case "$1" in
	--only-localhost)
	    only_localhost=1
	    shift
	    ;;

	--install)
	    install=1
	    shift
	    ;;

	--clean)
	    clean=1
	    shift
	    ;;

	--generate)
	    generate=1
	    shift
	    ;;

	--help|-h)
	    echo "Usage:"
	    echo "    $0 --generate [--only-localhost]"
	    echo "    $0 --install"
	    echo "    $0 --clean"
	    echo
	    echo "Tool for managing grid host credentials suitable for testing dCache"
	    echo
	    echo "Commands:"
	    echo "     --generate        create new CA and host credentials"
	    echo "     --install         install (\"trust\") any missing certificate material"
	    echo "     --clean           remove managed files from the ~/.globus directory"
	    echo "  -h --help            provide this information"
	    echo
	    echo "Options:"
	    echo "     --only-localhost  only include 'localhost' as subjAltName"
	    echo
	    echo "This tool has three modes of operation: generating new credentials,"
	    echo "trusting dCache credentials and removing files.  These correspond to"
	    echo "the --generate, --install and --clean commands respectively"
	    echo
	    echo "GENERATE:"
	    echo
	    echo "The --generate command will create CA credentials (a private key and"
	    echo "self-signed certificate) and, using this CA, generate host credentials"
	    echo "(another private key and certificate).  Once the CA key has been used to"
	    echo "sign the host certificate, it is destroyed.  Therefore, this CA cannot sign"
	    echo "any further certificates."
	    echo
	    echo "The generated CA certificate and host credentials are stored in the"
	    echo "current system-test deployment and also in the users ~/.globus directory."
	    echo "The user's trust store is also updated so that users will trust the new CA."
	    echo
	    echo "SubjectAlternativeName"
	    echo
	    echo "In general, a certificate may include zero or more Subject Alternative"
	    echo "Names.  For a host certificate, such Subject Alternative Names can"
	    echo "include all the DNS names through which this machine may be contacted."
	    echo
	    echo "By default, this script generates a host certificate with Subject"
	    echo "Alternative Name of 'localhost', the output of running 'uname -n'"
	    echo "and the FQDNs from 'hostname -A'.  This host certificate will always"
	    echo "work, but is specific to the host it was generated on, and (in general)"
	    echo "cannot be shared between hosts."
	    echo
	    echo "The '--only-localhost' option limits the Subject Alternative Names"
	    echo "to just 'localhost'.  The resulting certificate should work when client"
	    echo "connects to 'localhost'.  It is generic, so may be stored in a VCS."
	    echo "However, on some platforms, clients that use Globus native libraries"
	    echo "seem unable to use this certificate."
	    echo
	    echo "TRUST"
	    echo
	    echo "When testing dCache, a client must trust that the information presented"
	    echo "by the server is correct (e.g., that the server really is 'localhost')."
	    echo "This is done by the client trusting the CA that signed the certificate,"
	    echo "which is done by including the CA's certificate in a trust store."
	    echo
	    echo "The --install command will update the user's trust store (the directory"
	    echo "~/.globus/certificates) so that the CA that signed the dCache certificate"
	    echo "is trusted."
	    echo
	    echo "NB. The --install command is not needed when using the --generate command as"
	    echo "    this command will update the user's trust store automatically."
	    echo
	    echo "CLEAN"
	    echo
	    echo "The --clean command removes all the files that this script stored in the"
	    echo "~/.globus directory.  In effect, this is the reverse of running either"
	    echo "the --generate or --install commands, although reinstalling system-test is"
	    echo "needed to completely undo --generate."
	    exit 0
	    ;;

	*)
	    echo "Unknown option '$1', try --help"
	    exit 1
	    ;;
    esac
done

if [ "$only_localhost" = "1" ] && [ ! "$generate" = "1" ]; then
    echo "The --only-local flag only has effect if --generate is also specified. See"
    echo "--help for details."
    exit 1
fi

if [ ! "$clean$install$generate" = "1" ]; then
    echo "Exactly one of --clean, --install and --generate must be specified.  Try --help for"
    echo "details."
    exit 1
fi

function clean_dot_globus
{
    rm -f $HOST_CRED_STORE/dcache-systemtest-host*.pem

    if [ -d $OUR_TRUST_STORE ]; then
	for file in $OUR_TRUST_STORE/*; do
	    rm -f $USER_TRUST_STORE/$(basename $file)
	done
    fi

    rm -rf $OUR_TRUST_STORE
}

if [ "$clean" = "1" ]; then
    clean_dot_globus
    exit 0
fi

function list_potential_subjaltname()
{
    echo localhost
    if [ "$only_localhost" != 1 ]; then
	uname -n
	hostname -A | sed 's/ /\n/g'
    fi
}

function cleanup_ca_dir()
{
    rm -rf $CA_DIR
}

if [ "$generate" = "1" ]; then
    CA_DIR=$(mktemp -d)

    trap cleanup_ca_dir EXIT

    CA_CONFIG=$CA_DIR/openssl.config
    CA_KEY=$CA_DIR/ca-key.pem
    CA_CERT=$CA_DIR/ca-cert.pem
    CA_INDEX=$CA_DIR/index.txt
    CA_SERIAL=$CA_DIR/serial

    cat > $CA_CONFIG <<EOF
RANDFILE = $CA_DIR/rand
CN       = disposable-CA

##  USED WHEN GENERATING CA (SELF-SIGNED) CERTIFICATE + PRIVATE KEY

[req]
default_bits       = 2048
encrypt_key        = no
default_md         = sha256
distinguished_name = CA_distinguished_name
x509_extensions    = CA_x509_extensions
prompt             = no

[CA_distinguished_name]
1.DC = org
2.DC = dCache
CN   = \$ENV::CN

[CA_x509_extensions]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical,CA:true
subjectAltName         = email:support@dcache.org,URI:http://www.dcache.org/
nsComment              = "dCache.org disposable CA, generated $(date "+%Y-%m-%d %H:%M:%S")"
keyUsage               = critical,keyCertSign

##
##  USED WHEN PROCESSING CERTIFICATE SIGNING REQUEST:
##

[ca]
default_ca = CA_default

[CA_default]
certs            = $CA_DIR
crl_dir          = $CA_DIR
database         = $CA_INDEX
new_certs_dir    = $CA_DIR
certificate      = $CA_CERT
private_key      = $CA_KEY
serial           = $CA_SERIAL
crlnumber        = $CA_DIR/crlnumber
crl              = $CA_DIR/crl.pem
RANDFILE         = $CA_DIR/rand
x509_extensions  = host_cert
name_opt         = ca_default
cert_opt         = ca_default
default_days     = 365
default_crl_days = 30
default_md       = sha256
preserve         = no
policy           = policy_any
email_in_dn      = no

[host_cert]
basicConstraints       = critical,CA:FALSE
keyUsage               = critical,digitalSignature,keyEncipherment,dataEncipherment
nsComment              = "dCache.org disposable CA generated host certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
subjectAltName         = @alt_names
extendedKeyUsage       = serverAuth,clientAuth
issuerAltName          = issuer:copy
certificatePolicies    = 2.5.29.32.0


[policy_any]
DC = match
DC = match
CN = supplied

[alt_names]
EOF

    i=1
    for fqdn in $(list_potential_subjaltname | sort | uniq); do
	echo "DNS.$i = $fqdn" >> $CA_CONFIG
	i=$(( $i + 1 ))
    done

    touch $CA_INDEX
    echo 01 > $CA_SERIAL
    openssl req -batch -new -x509 -config $CA_CONFIG -days 365 -keyout $CA_DIR/ca-key.pem -out $CA_DIR/ca-cert.pem >/dev/null 2>&1
    CN=host/localhost openssl req -new -config $CA_CONFIG -keyout $CA_DIR/hostkey.pem -out $CA_DIR/hostcert.req  >/dev/null 2>&1
    openssl ca -batch -config $CA_CONFIG -out $CA_DIR/hostcert.pem  -infiles $CA_DIR/hostcert.req >/dev/null 2>&1

    hash_old=$(openssl x509 -in $CA_CERT -noout -subject_hash_old)
    hash_new=$(openssl x509 -in $CA_CERT -noout -subject_hash)

    cp $CA_CERT $TARGET_TRUST_STORE/$hash_old.0
    cp $CA_CERT $TARGET_TRUST_STORE/$hash_new.0

    cat > $TARGET_TRUST_STORE/$hash_old.signing_policy <<EOF
access_id_CA    X509    '/DC=org/DC=dCache/CN=disposable-CA'
pos_rights      globus  CA:sign
cond_subjects   globus  '"/DC=org/DC=dCache/*"'
EOF
    cp $TARGET_TRUST_STORE/$hash_old.signing_policy $TARGET_TRUST_STORE/$hash_new.signing_policy

    mv $CA_DIR/hostcert.pem $TARGET_DIR/hostcert.pem
    openssl rsa -in $CA_DIR/hostkey.pem -out $TARGET_DIR/hostkey.pem >/dev/null 2>&1

    clean_dot_globus

    mkdir -p $HOST_CRED_STORE

    cp $TARGET_DIR/hostcert.pem $HOST_CRED_STORE/dcache-systemtest-hostcert.pem
    cp $TARGET_DIR/hostkey.pem $HOST_CRED_STORE/dcache-systemtest-hostkey.pem
fi


# Add any missing trust in user's trust-store

mkdir -p $OUR_TRUST_STORE

for file in $TARGET_TRUST_STORE/*; do
    name=$(basename $file)

    if ! cmp -s $file $SYSTEM_TRUST_STORE/$name &&
       ! cmp -s $file $USER_TRUST_STORE/$name; then
	cp $file $OUR_TRUST_STORE/$name
	ln -s $OUR_TRUST_STORE/$name $USER_TRUST_STORE/$name
    fi
done
